<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Css on kotazi.com</title>
    <link>http://kotazi.github.io/blog/tags/css/</link>
    <description>Recent content in Css on kotazi.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 28 Jul 2016 11:57:40 +0900</lastBuildDate>
    
	<atom:link href="http://kotazi.github.io/blog/tags/css/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>【CSS】ECSSまとめ</title>
      <link>http://kotazi.github.io/blog/post/2016/0729_ecss/</link>
      <pubDate>Thu, 28 Jul 2016 11:57:40 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0729_ecss/</guid>
      <description>Enduring CSS(以下ECSS)についてまとめる。
ECSSは大規模プロジェクトのためのCSS設計手法だ。考案者はBen Frain。 大規模WebアプリケーションにおけるCSSの記述について根本的なアプローチを定義したいという彼の個人的な要望から生まれている。
■ ECSSの要望  長期にわたって肥大なCSSのメンテナンスを容易にすること 他に影響を与えずに、コードベースから一部のCSSを取り除けるようにすること どんな新しいデザインでも高速に開発することを可能とすること ある要素へのプロパティや値の変更が他に意図しない影響を与えないこと 実装の変更には最小限のツールやワークフローしか必要としないこと 可能な限り、ユーザーインターフェイス内でのステートの変更を伝達する際などARIAのようなW3C標準をもちいること  ■ スケールする際の問題点 プロジェクトの成長に伴いCSSの記述量は増大する。 多くの開発者が加わり、特殊なケースやブラウザ挙動に対応するうちに手に負えなくなってしまう。
 The CSS Specificity(詳細度) セレクタをマークアップで縛ること カスケード  どれも便利なものであるが、大規模プロジェクトにおいては既存ルールを取り除いたり、 修正したりすることが難しく、新しいルールを適用してしまう。このやり方に頼っていると コードは不要なルールで溢れかえることになる。
■ その他のCSS設計 ▼ OOCSS これはOOCSSのみならず、Atomic CSSやその他のSRPについても言えることだ。
OOCSSの最たる主張はコードの重複を取り除くことにあり、その結果CSSがメンテナブルになるというものだ。 本質的にはレゴのピースを組み立てるようなもので、可能な限り再利用し、必要であれば拡張する。
これはレスポンシブデザインにおいて急所を抱えている。
&amp;lt;div class=&amp;quot;blk m-10 fr&amp;quot;&amp;gt;Here I am&amp;lt;/div&amp;gt;  上記のように、OOCSS/Atomic CSSでは再利用可能なクラスに分割する。 しかしながら、ビューポートが変更された場合はどうするべきだろう。 例えば別のクラスをつけることもできるが(Mplus-cc2のような)面倒なことになるし、HTMLが複雑になる。
さらにはメンテナンスにも問題があり、大規模プロジェクトではメンテナンスは必ず必要になるが、 その段階ではCSSルールの見直しも必要となる。その場合マークアップについているクラスも書き換えが大きく発生する。
▼ SMACCS SMACSSはCSSのスケーラブルモジュールアーキテクチャとして標準的なもの。 SMACSSではヴィジュアル面の用語や概念を明確に定義する。 それゆえBase/Layout/Module/State/Themeなどを定義していく。
よく考えて構成する必要があり、もっと緩いものが欲しかった。
▼ BEM BEM(Block Element Modifier)はネーミングの方法論。
既存のものからならBEMを選ぶ。BEMの良い点は下記。
 すべての要素に同様の特殊性があること。ある1つのクラスがすべてのエレメントに与えられる。 HTML構造が結合されていないため、スタイルにセレクタを使わないこと。 開発ツールやコードエディタ上で、要素の親が何であるかを推論しやすいこと。  けれどもModifierが適さなかった。</description>
    </item>
    
    <item>
      <title>【CSS】Android標準ブラウザにおけるPlaceholderのズレ</title>
      <link>http://kotazi.github.io/blog/post/2016/0727_placeholder_android/</link>
      <pubDate>Wed, 27 Jul 2016 11:57:40 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0727_placeholder_android/</guid>
      <description>iOS/SafariやAndroid/Chromeなどでは再現しなかったが、Androidの標準ブラウザでPlaceholderの位置がずれてしまった。
調べてみると似たような記事がいくつか見つかった。
 placeholderを指定したときにAndroidでテキスト表示位置を中央にしたい Placeholders inputs not centered with Android 4.1.2 #453  不具合の再現と修正のものを用意した。
See the Pen akKBaa by Kohei Saeki (@kotazi) on CodePen.

結局bodyで当てていたline-heightが良くなかったらしい。 placeholderのheightに合わせて72pxを当てたら直った。
ちなみにline-heightの初期値はnormal。</description>
    </item>
    
  </channel>
</rss>