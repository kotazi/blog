<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo on kotazi.com</title>
    <link>http://kotazi.github.io/blog/tags/hugo/</link>
    <description>Recent content in Hugo on kotazi.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 13 Nov 2015 10:09:02 +0900</lastBuildDate>
    
	<atom:link href="http://kotazi.github.io/blog/tags/hugo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>【Hugo】Hosting on GitHub Pages【翻訳】</title>
      <link>http://kotazi.github.io/blog/post/2015111301/</link>
      <pubDate>Fri, 13 Nov 2015 10:09:02 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2015111301/</guid>
      <description>HugoをGithub Pages上でホスティングする際に、大きくハマってしまったので全訳した。
一度訳してみると、案外簡単にいった。
 導入 多くのHugoユーザーが作成したブログをGithub Pages上にホストする方法に興味を抱いています。 このチュートリアルはまさにそのためのものです。私たちに必要なドキュメントは、Hugoを正しくインストールし、git上で快適に動作させるためのものなのです。
このチュートリアルでは、主要なステップを通してhttp://spencerlyon2.github.io/hugo_gh_blog上で動作するサンプルブログを作成していきます。ソースコードはGithub上に上がっています。読者はサンプルのリポジトリをダウンロードして、それに従ってみることを推奨します。
リポジトリの作成 私たちの目的はGithub Pages上にブログをホストすることなので、ブログ記事をGithubリポジトリ上にホストするのは自然なことです。
従って、最初のステップではウェブサイトのコンテンツを設置する新しいリポジトリ、もしくは既存のリポジトリに新しいディレクトリを作成します。 このため、私はspencerlyon2/hugo_gh_blogというリポジトリを作成しました。
ブログの作成 設定ファイルを用意する 新しいHugoサイトを作成するための第一歩として、configファイルを記述します。このconfigファイルは下記の２つの理由において重要な役割を果たします。(1)baseurlなどの、サイトについての広い設定を行います。(2)またこのファイルが、Hugoサイトがどのように作られたかを示すためのものとなります。 例として、私が作成したconfig.yamlファイルがあります。
--- contentdir: &amp;quot;content&amp;quot; layoutdir: &amp;quot;layouts&amp;quot; publishdir: &amp;quot;public&amp;quot; indexes: category: &amp;quot;categories&amp;quot; baseurl: &amp;quot;http://spencerlyon2.github.io/hugo_gh_blog&amp;quot; title: &amp;quot;Hugo Blog Template for GitHub Pages&amp;quot; canonifyurls: true ...   警告: このチュートリアル作成以後、デフォルトであったcanonifyurls:trueはfalseに変更されました。もしも、Spencerによるhttps://github.com/spencerlyon2/hugo_gh_blogサイトをチュートリアルで使うのであれば、自身のconfig.yamlファイルにcanonifyurls:trueを手動で追加するようにしてください。でないと、CSSファイルが読み込まれません。 より詳しくは、“Extras: URLs page”にある“Canonicalization: Caveat”を参考にしてみてください。
 サイト構造を定義する Hugoはあなた自身が意味のあるサイト構造を設計し、それと同じ構造でサイトをレンダリングすることを想定しています。設定ファイルにあるcontentdir: &amp;quot;content&amp;quot;という行に注目してください。これは全てのコンテンツはcontentという名前のフォルダ配下に置かれるということを意味します。Hugoでは全てのディレクトリをセクションとして扱います。たとえばセクションがひとつしかなければ、投稿が一箇所に置かれることになります。そのため私たちは新たに２つのフォルダを作成しました。
▾ &amp;lt;root&amp;gt;/ ▾ content/ ▾ posts/  HTMLテンプレートの作成 続いて新しいサイトの見た目の部分を定義していきます。 Hugoではユーザー(あなた)が作成したHTMLテンプレートを使ってサイトを生成します。このステップはとても主観的なものです。私は単にブログを生成することが可能なテーマを使っています。LanyonというJekyllのテーマを使うことに決めました。LanyonはピュアCSSを使っており、少しだけ修正したものが/static/cssリポジトリに上がっています。チュートリアルに沿っていれば、サンプルリポジトリのstaticフォルダに格納されているはずです。
完璧なウェブサイトを作るにはたくさんのファイルが必要になるので、このチュートリアルで全てを補うことはできません。しかしながら、ディレクトリ構成だけ紹介させていただきます。
▾ &amp;lt;root&amp;gt;/ ▾ content/ ▾ posts/ &amp;lt;blog posts&amp;gt;.</description>
    </item>
    
    <item>
      <title>HugoブログとGithub Pagesと独自ドメイン</title>
      <link>http://kotazi.github.io/blog/post/2015111201/</link>
      <pubDate>Thu, 12 Nov 2015 08:28:26 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2015111201/</guid>
      <description>Wordpressで続けていたブログをやめて、Hugoでブログを作りなおした。 以前の記事は削除した。 HugoはGoで書かれた静的サイトジェネレータだ。早くて便利。
 Hugoブログの立ちあげ 基本的には公式サイトのQuickstartに従う。
# Hugoをローカルで立ちあげ hugo server --theme=hugo-cactus-theme --buildDrafts -w # 新しく投稿 hugo new post/newpost.md  Github Pages Github PagesもHugo公式のHosting on GitHub Pagesを参考にする。
 git subtreeを使う 全体のコンテンツはmasterブランチに、公開ファイルをgh-pagesブランチで運用 deploy.shの作成   チュートリアルに沿えばGithub Pagesにサイトができる。
独自ドメイン 僕はもともとムームードメインで取得したドメインと、ロリポップのレンタルサーバーを使ってWordpressブログを使っていた。
それにあたりこちらの記事を参考にした。
Hugo + GitHub Pagesでブログを作る#2|TANKSUZUKI.COM
 サブドメインとZone Apex(kotazi.com)で公開するのでは手順が異なる ムームードメインではApex Aliasが使えない そのためGehirn DNSなどを使う必要がある   そんな感じでブログの移行が完了しました。</description>
    </item>
    
  </channel>
</rss>