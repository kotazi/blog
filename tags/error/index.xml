<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Error on kotazi.com</title>
    <link>http://kotazi.github.io/blog/tags/error/</link>
    <description>Recent content in Error on kotazi.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Jan 2016 18:31:41 +0900</lastBuildDate>
    
	<atom:link href="http://kotazi.github.io/blog/tags/error/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>【Rails】ForbiddenAttributesError覚書</title>
      <link>http://kotazi.github.io/blog/post/2016/0105_forbiddenattributeserror/</link>
      <pubDate>Wed, 06 Jan 2016 18:31:41 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0105_forbiddenattributeserror/</guid>
      <description>RailsでActiveModel::ForbiddenAttributesError:エラーが出た。
 マスアサインメント脆弱性 モデルオブジェクトのassign_attributesメソッドの引数にハッシュもしくはparamsオブジェクトを渡せば、 モデルオブジェクトの属性を一括変更できる。フォームから送信することも可能。
管理者などがパラメータを変更する分にはいいが、権限によっては書き換えてはならないパラメータもある。 けれども知識のある人間がスクリプト書けば悪用することができてしまう。
このアプリケーションの脆弱性をマスアサインメント脆弱性と呼ぶ。
そしてこの脆弱性に対してRails4.0から導入された対抗策が、Strong Parameters。
Strong Parameters サンプルコード:
def staff_member_params params.require(:staff_member).permit( :email, :password, :family_name, :given_name, :family_name_kana, :given_name_kana, :start_date, :end_date, :suspended ) end  params.require(:staff_member)
paramsオブジェクトのrequireメソッドで、paramsオブジェクトが:staff_memberというキーと持っているかを調べる。
=&amp;gt; 持っていなければActionController::ParameterMissingエラー</description>
    </item>
    
  </channel>
</rss>