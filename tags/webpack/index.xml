<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Webpack on kotazi.com</title>
    <link>http://kotazi.github.io/blog/tags/webpack/</link>
    <description>Recent content in Webpack on kotazi.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 06 Sep 2016 13:38:10 +0900</lastBuildDate>
    
	<atom:link href="http://kotazi.github.io/blog/tags/webpack/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>【Webpack】devtoolのこと</title>
      <link>http://kotazi.github.io/blog/post/2016/0906_webpack_debug/</link>
      <pubDate>Tue, 06 Sep 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0906_webpack_debug/</guid>
      <description>Webpackでビルドしたファイルのデバッグ方法が気になっていたので少し調べてみた。
 結論からいうとwebpack.config.jsのdevtoolオプションから設定できる。 さらに言えば開発環境ではcheap-module-eval-source-map、本番環境ではcheap-module-source-mapを設定するのが良い。
 configuration | Webpack Webpack devtool source map « Cheng&amp;rsquo;s Blog  本番環境をサポートしているものとしていないものがあるのでその点は注意すること。</description>
    </item>
    
    <item>
      <title>Rails内でのwebpackの使い方</title>
      <link>http://kotazi.github.io/blog/post/2016/0214_rails_webpack/</link>
      <pubDate>Sun, 14 Feb 2016 13:41:03 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0214_rails_webpack/</guid>
      <description>&amp;ldquo;How to use webpack with Rails&amp;rdquo;翻訳記事になります。
 webpackは強力なモジュールバンドラである。主としてフロントエンド開発のために設計されており、 bowerやnpmのJavaScriptモジュールをうまく統合することができる。
Sproketsやアセットパイプラインを用いればシームレスな挿入をすることが可能だけれども、これには典型的なRailsのJSマネジメントシステムを使うによりいくつか大きな利点がある。残念ながらwebpackのドキュメントはまだ要約することが難しく、特にRailsに統合したいとなればなおさらだ。
あなたがまだwebpackを使っていないのであれば、ここに何ができるのかを示そう。
 npmやbowerを使っている全てのフロントエンドのJS(依存関係も)管理する CoffeeScriptやES6を自動で処理する 最小の力で全てのソースマップを出力する 難しい部分でのJSの分離に役に立つ。&amp;rdquo;common&amp;rdquo;モジュールが自動的に全てのページに渡ってシェアしてくれる 大きなモジュールを複数のファイルに分割し、必要なファイルのみをダウンロードする(require.ensureを用いる)  いいなと思ったら、これらを既存のRailsアプリ、もしくは新たなRailsアプリでどのように利用するか呼んでみるといい。 ちなみに、これはRails中心に書かれているけれども、Railsでなくともそのようなフレームワークにwebpackを導入したいのであればきっと役に立つだろう。
 Getting Started Is webpack right for your app? webpackは本当にパワフルで素晴らしいツールである。 けれども本当に効果的に利用するには、あなたが&amp;rdquo;モジュールとしてのJS&amp;rdquo;という哲学をしっかりと信じる必要がある。 jQueryやBackboneといった人気のライブラリを使っているなら簡単なことだ。 けれども、特に大きなアプリをwebpackを用いてコンバートしているのなら、いくつかの問題につまづくであろうことを知っておくべきだ。
典型的な問題:
 モジュールにはちゃんと定義されてエントリーポイントがない(webpackはあなたが要求したときに何を含むべきか知らない) モジュールにpackage.jsonやbower.jsonは無効である modules which simply stick something on window and call it a day modules which add something to jQuery, instead of exporting anything modules which, by default, give you a gigantic kitchen sink you don’t need  幸運にもこれらの問題に対処するための様々なメソッドがあるため、webpackで全て解決できる。 さっきも述べたようにwebpackのドキュメントは量が多いので、私が上記についてはカバーする。</description>
    </item>
    
  </channel>
</rss>