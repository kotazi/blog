<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on kotazi.com</title>
    <link>http://kotazi.github.io/blog/tags/git/</link>
    <description>Recent content in Git on kotazi.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Oct 2016 13:38:10 +0900</lastBuildDate>
    
	<atom:link href="http://kotazi.github.io/blog/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>git rebaseについて</title>
      <link>http://kotazi.github.io/blog/post/2016/1007_rebase/</link>
      <pubDate>Fri, 07 Oct 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/1007_rebase/</guid>
      <description> リモートブランチとリモート追跡ブランチ ちょっと洗いざらいしているうえで、けっこう根本的な部分で理解の浅い箇所があるなということに気がついた。
それがリモートブランチとリモート追跡ブランチ違い。
 git pull と git pull –rebase の違いって？図を交えて説明します！  Docbaseを開発しているKrayのブログ。
図が最高に分かりやすい。fetch理解する前にリモートブランチとローカルブランチの違いを理解する必要があるということに気づくことができた。
完全にリンク先を読むのが一番なので、改めて説明はしないけれども、下記のようなことを学べた。
 リモート追跡ブランチはローカルにある ユーザー自身がリモート追跡ブランチの内容を変更することはできないこと origin/ブランチ名 ってやつはリモート追跡ブランチを指している rebase はコミットを作り直す(ここがリモートに上げたものにrebase すべきでないと言われる理由) そして故に、rebase 後はコミットのハッシュが変わるため、pushがリジェクトされる (これが rebase 後に force push が必要になる理由)  ということがわかった上で、最後は運用ルール次第なのかなと思った。
コミット履歴を汚さないために rebase を推奨する場合もある。(以前一緒に働いていたロシア人もそうだった。)
そんな中で腑に落ちたのがこれ。
 git rebaseを使うときのルール  簡単にまとめると、gitの履歴は綺麗であるべき。だから個人のリポジトリではrebase も好きに使えば良い。
ただチーム開発においてはなにより、他人のコミットにrebase してはいけない。それは他人のコミットを消すということだから(多分ハッシュ値が書き換わるという意味で)。「自分の履歴をきれいに」と 「他人 の履歴をいじるな」。
その他参考リンク  Gitのリモートブランチと追跡ブランチは違うよ Git で「追跡ブランチ」って言うのやめましょう gitglossary(7) Manual Page  </description>
    </item>
    
    <item>
      <title>【git/bfg】間違えてプッシュしたパスワードファイルなどを履歴から完全に削除する</title>
      <link>http://kotazi.github.io/blog/post/2016/0616_git_bfg/</link>
      <pubDate>Thu, 16 Jun 2016 13:50:34 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0616_git_bfg/</guid>
      <description>AWS情報の書いてあるJSONファイルが間違えてコミットしてあったため、 その削除方法について調べてトライしました。
  Remove sensitive data  上記のリンクに方法が書いてある。
ざっくりまとめると2つの方法があって、
 BFG Repo-Cleanerを使う方法 コマンドを叩いて頑張る方法  の2つがある。どちらかと言えば1を推奨しているよう。
 BFGを使って削除する Scala製なのでJavaの実行環境が必要になる。
今回は.zprofileにalias bfg=&#39;java -jar /Applications/bfg-1.12.12.jar&#39;としてエイリアスを作成。
$ bfg --delete-files YOUR-FILE-WITH-SENSITIVE-DATA $ git commit -m &amp;quot;Remove sensitive data&amp;quot; $ git push --force origin master  みたいな感じにすればできる。
参考リンク  git filter-branch のかわりに BFG でファイルの履歴を消去する  コマンドを叩いて頑張る方法 意外とシンプルんできるから悪くない。でも長いから覚えるのは無理。
なんだかんだでBFG入れておいていい気がする。
$ git filter-branch -f --index-filter &#39;git rm --ignore-unmatch YOUR-FILE-WITH-SENSITIVE-DATA&#39; HEAD  参考リンク  gitで特定のファイルの履歴を消す方法|おし、プログラミング GitHub の commit 履歴からパスワードファイル等だけを消す方法   テーマとは関係ないけど、</description>
    </item>
    
    <item>
      <title>【Git】fork元の更新を追う</title>
      <link>http://kotazi.github.io/blog/post/2016/0614_git_fork/</link>
      <pubDate>Tue, 14 Jun 2016 11:31:27 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0614_git_fork/</guid>
      <description>Vuexを最近やっている。
Cloneしてきたリポジトリを触ったりするわけだけど、 元のリポジトリに変更があれば反映させたい。
その方法を調べました。
 まずはクローンしたブランチの状態を確認するとこのようになっている。
~/W/vuex git:master ❯❯❯ git br -a * master remotes/origin/0.3.0 remotes/origin/0.4.0 remotes/origin/HEAD -&amp;gt; origin/master remotes/origin/gh-pages remotes/origin/master remotes/origin/old  リモートにupstreamという名前で本家を追加する。
git remote add upstream git@github.com:vuejs/vuex.git  フェッチする。
git fetch upstream
そして再度ブランチの状態を確認すると、 本家を追従できていることがわかる。
~/W/vuex git:master ❯❯❯ git br -a * master remotes/origin/0.3.0 remotes/origin/0.4.0 remotes/origin/HEAD -&amp;gt; origin/master remotes/origin/gh-pages remotes/origin/master remotes/origin/old remotes/upstream/0.3.0 remotes/upstream/0.4.0 remotes/upstream/gh-pages remotes/upstream/master remotes/upstream/old   本家リポジトリの変更を反映するには  git fetch upstream git merge upstream/master  となる。</description>
    </item>
    
    <item>
      <title>【git】タグを間違えてしまった</title>
      <link>http://kotazi.github.io/blog/post/2016/0504_gittag/</link>
      <pubDate>Wed, 04 May 2016 11:45:41 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0504_gittag/</guid>
      <description>gitのタグを修正することがあったのでメモ書き。
注釈を間違えてしまったのでやりなおす方法。
  ローカルのタグを削除  git tag -d TAG_NAME   リモートのタグを削除(空のタグで上書き)  git push origin :refs/tags/TAG_NAME   新しくタグをつける(注釈付き)  git tag TAG_NAME   リモートのプッシュ  git push --tags origin   意外とすんなり。</description>
    </item>
    
    <item>
      <title>【git】There is an existing release branchへの対処</title>
      <link>http://kotazi.github.io/blog/post/2016/0316_git_flow/</link>
      <pubDate>Wed, 16 Mar 2016 13:01:21 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0316_git_flow/</guid>
      <description>git flowのメモ。
リリースをしようとした時に下記のような注意が出てしまった。
~/W/ git:develop ❯❯❯ git flow release start 2016-03-16-0349 There is an existing release branch (2016-03-14-0349). Finish that one first.  リリースブランチを作成しようと思ったけれど、もうあるからまずはそれを完了させてくれとのこと。
webからgithubを確認すると既に2016-03-14-0349があるから何でだろうと。
~/W/ git:develop ❯❯❯ git branch | grep release release/2016-03-14-0349  grepしてみるとブランチが存在してる。
~/W/ git:develop ❯❯❯ git branch -D release/2016-03-14-0349 Deleted branch release/2016-03-14-0349 (was 0c652fd).  ブランチを削除して完了。無事にリリース作業に移れた。</description>
    </item>
    
    <item>
      <title>gemをインストールしたけれど見つからない時に疑うこと</title>
      <link>http://kotazi.github.io/blog/post/2016/0119_gitup/</link>
      <pubDate>Tue, 19 Jan 2016 13:55:26 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0119_gitup/</guid>
      <description>◯ git-upをインストール ◯ 探す  ◯ パスを通す       git-upをインストールしたけれど使えなかったのでその時の対処法をメモ。
 ◯ git-upをインストール $ gem install git-up  この状態でgit upを試したけれど見つからなかった
◯ 探す $ bundle list | grep git-up  これは見つかる。
$ which git-up  これが見つからない。rbenvあたりでパスが通っていないっぽい。
◯ パスを通す rbev内にgit-upが入っているかを確認する
$ find .rbenv -name git-up .rbenv/versions/2.2.2/bin/git-up .rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/gems/git-up-0.5.12/bin/git-up .rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/gems/git-up-0.5.12/lib/git-up  あった。
シンボリックリンクを作成する
$ ln -s ~/.rbenv/versions/2.2.2/bin/git-up /usr/local/bin  最後にgit-upがあることを確認する。</description>
    </item>
    
  </channel>
</rss>