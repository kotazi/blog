<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redux on kotazi.com</title>
    <link>http://kotazi.github.io/blog/tags/redux/</link>
    <description>Recent content in Redux on kotazi.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 29 Mar 2016 18:55:03 +0900</lastBuildDate>
    
	<atom:link href="http://kotazi.github.io/blog/tags/redux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>【訳読】2.2 Reducers|Redux</title>
      <link>http://kotazi.github.io/blog/post/2016/0329_redux_reducers/</link>
      <pubDate>Tue, 29 Mar 2016 18:55:03 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0329_redux_reducers/</guid>
      <description>2.2 Reducers|Redux
Actionは何かが起こったという事実は述べるが、アプリケーションのStateがどのように変わったかということまで細かくは言わない。 それはReducerの仕事だ。
 Designing the State Shape Reduxではアプリケーションの全てのステートはシングルオブジェクトとして保たれる。
ToDoアプリでは2つのことをストアしたい。
 現在選択されているフィルター 実際のToDoリスト  UI State同様に、ストアしたいデータが見つかると思う。 それは良いことだけれど、UI Stateからデータは分離するようにすること。
// これがState(ステート）!! { visibilityFilter: &#39;SHOW_ALL&#39;, todos: [ { text: &#39;Consider using Redux&#39;, completed: true, }, { text: &#39;Keep all state in a single tree&#39;, completed: false } ] }  Handling Actions Stateオブジェクトの形が決まったので、Reducerを準備していく。 Reducerは前のStateとActionを引数に取り、次のステートを返すピュア関数だ。
(previousState, action) =&amp;gt; newState  Array.prototype.reduce関数のようだからReducerと呼ばれる。
Reducerの中で決してしてはならないことが下記だ。
 引数を変えること APIを呼び出したり、ルーティングを変更すること Date.now()やMath.random()といったピュアでない関数を呼ぶこと  とりあえずReducerはピュアであることを覚えておこう。 ただ計算するだけであり、同じ引数を与えれば同じ次の結果を返す。
最初のStateを決めるところから始めよう。最初はundefinedのStateでReducerを呼ぶ。 そうして最初のステートを取得する。</description>
    </item>
    
    <item>
      <title>【訳読】2.1 Actions|Redux</title>
      <link>http://kotazi.github.io/blog/post/2016/0328_redux_actions/</link>
      <pubDate>Mon, 28 Mar 2016 18:34:45 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0328_redux_actions/</guid>
      <description>2.1 Actions|Redux
 Actions Actionはアプリケーションからの情報をStoreへ渡す。 store.dispatch()を使ってActionをStoreへ送信する。
ToDoアイテムのアクションサンプル:
const ADD_TODO = &#39;ADD_TODO&#39;  { type: ADD_TODO, text: &#39;Build my first Redux app&#39; }  ActionはプレーンなJavaScriptオブジェクトである。typeプロパティを必ず持ち、Actionの種類を示す。 Typeは文字列の定数として定義されるべきであり、アプリケーションが肥大化した際はモジュールに分割することができる。
import { ADD_TODO, REMOVE_TODO } from &#39;../actionTypes&#39;  type以外のActionオブジェクトの構造はあなた次第だ。興味があればFlux Standard Actionを見ること。
ユニークなIDを付けることはいいかも。
{ type: COMPLETE_TODO, index: 5 }  Action Creators Action creators はActionを生成する関数である。 &amp;ldquo;Action&amp;rdquo;と&amp;rdquo;Action Creator&amp;rdquo;をまとめるのは簡単なのでそのほうがいいかも。
典型的なFluxの実装では、こんな感じでAction CreatorはDispachのトリガーとなる。
function addTodoWithDispatch(text) { const action = { type: ADD_TODO, text } dispatch(action) }  それに対しReduxでは、Action Creatorは単純にActionを返すだけ。</description>
    </item>
    
  </channel>
</rss>