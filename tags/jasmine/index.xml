<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jasmine on kotazi.com</title>
    <link>http://kotazi.github.io/blog/tags/jasmine/</link>
    <description>Recent content in Jasmine on kotazi.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 08 Feb 2016 18:45:53 +0900</lastBuildDate>
    
	<atom:link href="http://kotazi.github.io/blog/tags/jasmine/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>【Angular】ユニットテスト</title>
      <link>http://kotazi.github.io/blog/post/2016/0202_angular_unit/</link>
      <pubDate>Mon, 08 Feb 2016 18:45:53 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0202_angular_unit/</guid>
      <description>Unit Testing|AngularJS   JavaScriptは強い式の力を持った動的型付け言語であり、コンパイラの助けを得ることがない。 そのため、JavaScriptのコードにはしっかりしたテストが必要である。 Angularには、Angularアプリケーションのテストを用意にするための機能がたくさん組み込まれている。 Angularにおいて、テストをしないということはありえない。
 Separation of Concerns ユニットテストという名前から示されるように、これは独立した単体のコードのテストのことである。 ユニットテストは「そのロジックは正しく動くだろうか」、「ソート関数が並び替えたリストは正しい順番だろうか」 といった質問に回答しようとするものだ。
テストにおいてこのような質問に答えるためには、単体のコードを孤立させることがとても重要である。 ソート関数のテストをしている時に、関連するDOM要素を生成したり、ソートデータをフェッチするためにXHRを呼び出すといったことをしたくないため。
これは明らかなことなのに、典型的なプロジェクトでは独立した関数を呼び出すことはとてもむずかしい。 これは開発者がしばしば全てのことをするコードを混合させてしまうことに原因があり、 XHRを生成するもの、受け取ったデータをソートするもの、そしてDOMを操作するもの、である。
Angularを用いて、あなたが正しくことを行うことを簡単にした。 XHRのために依存性注入を提供するので、リクエストをシミュレーションすることが可能になり、 レスポンスデータをソートすることができ、DOMを操作することができる。 DOMを生成したり、状態を監視したりXHRリクエストのレスポンスデータを待ったりすることなく、 データのソートをテストすることができる。 単独のソート関数を分離してテストすることができる。
 With great power comes great responsibility Angularはテストしやすいことを念頭に書かれているが、それでもまだ 正しい書き方をする必要がある。 書き方が簡単になるよう努めたものの、ガイドラインを無視すれば アンテスタブルなアプリケーションになってしまう。
 Dependency Injection Angularは依存性注入のビルトインからなっており、 それはテストのコンポーネント化するため、思いどおりにコンポーネント間での依存関係やスタブ、モックをテストすることが可能。
コンポーネントに依存性注入をすればテストのモックが簡単になり、 グローバル汚染もなくなりうっかり別のテストに影響してしまうこともなくなる。
 Additional tools for testing Angular applications Angularアプリケーションのテストでは、テストをより簡単にセットアップし実行するために使うべきツールがある。
Karma Karmaはコマンドラインツールである。 アプリケーションのコードを読み込み、実行するWebサーバーを用意する。 アプリケーションがサポートする全てのブラウザにで操作することをテストするために、ブラウザの数分に対してKarmaを実行するように設定することができる。 Karmaをコマンドライン上で実行すると、ブラウザでのテスト実行結果をコマンドライン上にすぐに表示する。
KarmaはNodeJS製のアプリケーションであり、npmでインストールする。 インストールガイドについてはKarmaのサイトが役に立つ。
Jasmine Jasminはビヘイビア駆動開発のJavaScriptフレームワークであり、 Angularアプリケーションをテストするうえで最も人気のフレームワークである。 テストに構造をもたせ、アサーションを作成するための関数を提供する。 テストが大きくなっても構造的であり、ドキュメント性を保ちながら、アーカイブしてく。
テストをグループ化するためにはdescribeを利用する。
describe(&amp;quot;sorting the list of users&amp;quot;, function() { // individual tests go here });  個々のテストはit関数の中に定義される。</description>
    </item>
    
  </channel>
</rss>