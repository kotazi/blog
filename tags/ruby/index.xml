<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on kotazi.com</title>
    <link>http://kotazi.github.io/blog/tags/ruby/</link>
    <description>Recent content in Ruby on kotazi.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Feb 2016 20:34:06 +0900</lastBuildDate>
    <atom:link href="http://kotazi.github.io/blog/tags/ruby/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>【プログラミング言語Ruby】2章-Rubyプログラムの構造と実行</title>
      <link>http://kotazi.github.io/blog/post/2016/0211_ruby/</link>
      <pubDate>Mon, 15 Feb 2016 20:34:06 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0211_ruby/</guid>
      <description>

&lt;p&gt;Rubyインタープリタは、トークンの連続としてプログタムを解析する。
トークンは、コメント、リテラル、記号類、識別子、キーワードである。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;コメントは&lt;code&gt;#&lt;/code&gt;。
複数行コメントは&lt;code&gt;=begin&lt;/code&gt;に始まり、&lt;code&gt;=end&lt;/code&gt;で終わる&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;リテラルはRubyソースコードに直接現れる値。数値、文字列、正規表現の3種類がある。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;識別子とは単純に名前のことである。Rubyは変数、メソッド、クラスなどに名前を与えるために識別子を使っている。&lt;/p&gt;

&lt;hr&gt;

&lt;h4 id=&#34;識別子の中の記号類:5cf09527adc08d8c661f06f43d913565&#34;&gt;▼ 識別子の中の記号類&lt;/h4&gt;

&lt;p&gt;|記号|意味|
|===|===|
|$|グローバル変数にプレフィックスとして付ける。|
|@|インスタンス変数に付ける。クラス変数には２つつける|
|?|役に立つ慣習として、論理値を返すメソッドの末尾に疑問符を付ける|
|!|注意が必要なことを示すときに付ける|
|=|末尾が統合になっているメソッド式は、代入演算子のサ変で東道なしのメソッド名を置くだけで実行できる|&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Rubyの構文の基本単位は式である。Rubyインタープリタは式を評価して値を生成する。&lt;/p&gt;

&lt;p&gt;Rubyはオブジェクト指向なので、メソッドという言葉を使う。&lt;/p&gt;

&lt;p&gt;相互作用するように作られたメソッドのグループはクラスにまとめることができる。
そして、関連するクラスとクラスを持たないメソッドはモジュールにまとめることができる。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【プログラミング言語Ruby】1章-イントロダクション</title>
      <link>http://kotazi.github.io/blog/post/2016/0210_ruby/</link>
      <pubDate>Thu, 11 Feb 2016 20:34:06 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0210_ruby/</guid>
      <description>&lt;p&gt;Rubyは完全なオブジェクト指向言語。
すべての値は、単純な数値リテラルやbooleanなども含めてオブジェクトである。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Rubyでは関数やメソッド軌道のための括弧が多くの場合省略可能である。
メソッド呼び出しで括弧が省略されているためオブジェクトの名前付きフィールドか名前付き変数のように見える。
オブジェクトの外からオブジェクトの内部状態にアクセスすることはできない、カプセル化については厳格な言語である。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;ブロックとイテレータは繰り返し処理でよく使われるが、
ブロックを一度しか実行しないメソッドでも役に立つ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;File.open(&amp;quot;data.txt&amp;quot;) do |f|
  line = f.readline
end
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;p&gt;Rubyのメソッド名は疑問符や感嘆符で終わることもできる。
通常感嘆符のないメソッドは元のオブジェクトのコピーに変更を加えて返してくるが、
感嘆符付きのメソッドはオブジェクトをその場で書き換えるミューテータ(mutator)メソッドである。&lt;/p&gt;

&lt;p&gt;グローバル変数には&lt;code&gt;$&lt;/code&gt;、インスタンス変数には&lt;code&gt;@&lt;/code&gt;、クラス変数には&lt;code&gt;@@&lt;/code&gt;というプレフィックスをつける。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;クラスとはオブジェクトの状態を操作する関連メソッドのコレクションである。
オブジェクトの状態は、インスタンス変数によって管理されている。
インスタンス変数とは名前の先頭が&lt;code&gt;@&lt;/code&gt;で、オブジェクトごとに異なる値を持てる変数のことである。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ruby - pry導入編</title>
      <link>http://kotazi.github.io/blog/post/20151207_pry/</link>
      <pubDate>Mon, 07 Dec 2015 17:48:50 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/20151207_pry/</guid>
      <description>

&lt;p&gt;Railsのデバッグについて調べていた。&lt;br /&gt;
pryを知った。便利そうだったことメモ書き。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&#34;pryとは:f3bd45a4a5113941a84c21ea0e18d62f&#34;&gt;Pryとは&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;./../../media/pry_logo.png&#34; alt=&#34;pry&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://pryrepl.org/&#34;&gt;Pry&lt;/a&gt;はRuby標準的なIRBシェルの強力な代替手段です。
シンタックスハイライトや、フレキシブルなプラグインアーキテクチャ、実行時の呼び出しやドキュメントの閲覧を備えています。&lt;/p&gt;

&lt;h2 id=&#34;インストール:f3bd45a4a5113941a84c21ea0e18d62f&#34;&gt;インストール&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ gem install pry pry-doc
$ pry
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;.ls&lt;/code&gt;, &lt;code&gt;.pwd&lt;/code&gt;などでShellコマンドを呼び出せる。&lt;/p&gt;

&lt;h2 id=&#34;railsプロジェクトに組み込む:f3bd45a4a5113941a84c21ea0e18d62f&#34;&gt;Railsプロジェクトに組み込む&lt;/h2&gt;

&lt;p&gt;RailsプロジェクトにPryを入れて、ブレークポイントやステップ実行が行えるようにした。&lt;/p&gt;

&lt;p&gt;Gemfileを編集(参考:&lt;a href=&#34;http://ruby-rails.hatenadiary.com/entry/20141024/1414081224&#34;&gt;Railsの開発効率をあげる - Pryを使ってRailsのコンソールをパワーアップ &amp;amp; デバッグをする&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;group :development, :test do
  gem &#39;pry-rails&#39;, &#39;~&amp;gt; 0.3.4&#39;  # rails console(もしくは、rails c)でirbの代わりにpryを使われる
  gem &#39;pry-doc&#39;, &#39;~&amp;gt; 0.8.0&#39;    # methodを表示
  gem &#39;pry-byebug&#39;, &#39;~&amp;gt; 3.3.0&#39; # デバッグを実施(Ruby 2.0以降で動作する)
  gem &#39;pry-stack_explorer&#39;, &#39;~&amp;gt; 0.4.9.2&#39; # スタックをたどれる
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;モデル確認:f3bd45a4a5113941a84c21ea0e18d62f&#34;&gt;■ モデル確認&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[12] pry(main)&amp;gt; show-models
Administrator
  id: integer
  email: string
  email_for_index: string
  hashed_password: string
  suspended: boolean
  created_at: datetime
  updated_at: datetime
StaffMember
  id: integer
  email: string
  email_for_index: string
  family_name: string
  given_name: string
  family_name_kana: string
  given_name_kana: string
  hashed_password: string
  start_date: date
  end_date: date
  suspended: boolean
  created_at: datetime
  updated_at: datetime
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ルート確認:f3bd45a4a5113941a84c21ea0e18d62f&#34;&gt;■ ルート確認&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[13] pry(main)&amp;gt; show-routes
       Prefix Verb   URI Pattern              Controller#Action
   staff_root GET    /staff(.:format)         staff/top#index
  staff_login GET    /staff/login(.:format)   staff/sessions#new
staff_session POST   /staff/session(.:format) staff/sessions#create
              DELETE /staff/session(.:format) staff/sessions#destroy
   admin_root GET    /admin(.:format)         admin/top#index
  admin_login GET    /admin/login(.:format)   admin/sessions#new
admin_session POST   /admin/session(.:format) admin/sessions#create
              DELETE /admin/session(.:format) admin/sessions#destroy
customer_root GET    /customer(.:format)      customer/top#index
         root GET    /                        errors#routing_error
              GET    /*anything(.:format)     errors#routing_error
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;デバッグ:f3bd45a4a5113941a84c21ea0e18d62f&#34;&gt;デバッグ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;binding.pry&lt;/code&gt;を打ち込むとブレークポイントになる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;show-stack&lt;/code&gt;でスタックトレースを表示&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考url:f3bd45a4a5113941a84c21ea0e18d62f&#34;&gt;参考URL&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://labs.timedia.co.jp/2011/12/rubyist-should-use-pry.html&#34;&gt;Rubyistよ、irbを捨ててPryを使おう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.tokoyax.com/entry/ruby/how-to-use-pry&#34;&gt;Ruby 2.x.x 入門 -そう、pry ならね。-&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ruby-rails.hatenadiary.com/entry/20141024/1414081224&#34;&gt;Railsの開発効率をあげる - Pryを使ってRailsのコンソールをパワーアップ &amp;amp; デバッグをする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/yaotti/items/c6e850010f36acedb0e1&#34;&gt;Railsのコンソールをより便利にするpry-rails gem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/k0kubun/items/b118e9ccaef8707c4d9f&#34;&gt;今更聞けないpryの使い方と便利プラグイン集&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;ものすごく便利だった。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>