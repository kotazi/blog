<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jsx on kotazi.com</title>
    <link>http://kotazi.github.io/blog/tags/jsx/</link>
    <description>Recent content in Jsx on kotazi.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Jan 2016 21:47:07 +0900</lastBuildDate>
    
	<atom:link href="http://kotazi.github.io/blog/tags/jsx/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>【訳読】JSX</title>
      <link>http://kotazi.github.io/blog/post/2016/0126_jsx/</link>
      <pubDate>Tue, 26 Jan 2016 21:47:07 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0126_jsx/</guid>
      <description>勉強がてらJSXのTutorialを翻訳しました。
 Background JSXはJavaScriptへのコンパイルが可能な、静的型付けかつオブジェクト指向のプログラミング言語です。 JavaScriptよりも頑丈なプログラミング言語が必要だったためにJSXは開発されました。 とはいえ、JSXはとりわけ文や式など、そこそこJavaScriptに近いように作られています。
ミスタイポや変数名や関数の定義忘れなどをコンパイル時に検知可能のため、静的型付け言語は頑丈なプログラミング言語といえます。 これは特に多くのエンジニアが携わる中規模から大規模のプロジェクトにおいて重要なことです。
それゆえに、JSXは静的型付け言語として設計されました。 全ての値と変数には静的な型があり、適切な方の値のみを代入することができます。 加えて、全ての関数はパラメータと返り値によって決定されたクロージャーに含まれます。 引数の型が間違っていると代入することはできません。
またJSXを開発した別の重要な理由として、JSのパフォーマンスを引き上げつことがありました。 JavaScript自身が遅いということはないのですが、大規模開発になると抽象的なレイヤーが肥大化しがちです。 例えば代用的なクラスやアクセサメソッドのことであり、これらはしばしばパフォーマンスにネガティブな影響を与えます。 JSZでは&amp;rdquo;inline expansion&amp;rdquo;によってパフォーマンスを引き上げています。 これはコンパイル時に関数呼び出しが決定したものを、関数本体を呼び出し元の方へ拡張することです。 静的型付け言語のパフォーマンスのちからになります。
 Run &amp;ldquo;Hello, World!&amp;rdquo; JSXのプログタムを実行してみましょう。jsxコマンドを使い、JSXをJavaScriptにコンパイルします。
まずはnpmでjsxをインストールします。
$ npm install -g jsx  そしたら下記のコードでhello.jsxを作成しましょう。
class _Main { static function main(args : string[]) : void { log &amp;quot;Hello, world!&amp;quot;; } }  下記のコマンドでJSXを実行することができ、&amp;rdquo;Hello, world&amp;rdquo;がコンソール上に出力されます。
$ jsx --run hello.jsx  次のセクションではhello.jsxについて詳しく見ていきましょう。
 Program Structure ここでは&amp;rdquo;Hello world!&amp;ldquo;サンプルであるhello.jsxについて取り扱っていきます。 このプログラムに名前や静的型付け、クラス構造といったいくつかのJSXの機能を見ることができます。
class _Main { static function main(args : string[]) : void { log &amp;quot;Hello, world!</description>
    </item>
    
  </channel>
</rss>