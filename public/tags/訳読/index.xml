<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>訳読 on kotazi.com</title>
    <link>http://kotazi.github.io/blog/tags/%E8%A8%B3%E8%AA%AD/</link>
    <description>Recent content in 訳読 on kotazi.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 Nov 2015 15:18:19 +0900</lastBuildDate>
    
	<atom:link href="http://kotazi.github.io/blog/tags/%E8%A8%B3%E8%AA%AD/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MasonryをAngularで使う際に注意すること</title>
      <link>http://kotazi.github.io/blog/post/2015113001/</link>
      <pubDate>Mon, 30 Nov 2015 15:18:19 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2015113001/</guid>
      <description>Masonryのstampが正しく動かないことがあったのでメモ。
 AngularプロジェクトでMasonryとAngularJS Masonry Directiveを利用している。
その際にMasonryのstampが動いていなかったのでメモ。 なんで動かなかったかというとMyIncludeとngIfがよくなかった。
とりあえずサンプル
■ ng-ifバージョン(動かない) See the Pen 【AngularJS】Masonry Directive Behavior with Stamp(ng-if) by Kohei Saeki (@kotazi) on CodePen.

■ ng-showバージョン(動く) See the Pen 【AngularJS】Masonry Directive Behavior with Stamp(ng-show) by Kohei Saeki (@kotazi) on CodePen.

ngIfの場合がDOMが再生性されているので、stampが毎回解除されてしまう。</description>
    </item>
    
    <item>
      <title>【訳読】ngInfiniteScroll</title>
      <link>http://kotazi.github.io/blog/post/2015112701/</link>
      <pubDate>Fri, 27 Nov 2015 15:18:19 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2015112701/</guid>
      <description>ngInfiniteScrollについてです。 Issueが溜まっているけれど、一年近く更新がない。
 ドキュメント infiniteScroll (directive in module infinite-scroll)
説明 要素の底がブラウザの底に近づいた時に、infiniteScrollで特定の振る舞いを指定することができます。
使い方 &amp;lt;ANY infinite-scroll=&#39;{expression}&#39; [infinite-scroll-distance=&#39;{number}&#39;] [infinite-scroll-disabled=&#39;{boolean}&#39;] [infinite-scroll-immediate-check=&#39;{boolean}&#39;] [infinite-scroll-listen-for-event=&#39;{string}&#39;]&amp;gt; &amp;lt;/ANY&amp;gt;  パラメータ infinite-scroll - {expression} エレメントの底がブラウザの底に近づいた時に、式を評価します。(基本的には関数呼び出し)
infinite-scroll-distance (optional) - {number} infinite-scrollに評価された式がトリガーされる前に、エレメントの底がブラウザの底にどれだけ近いかを表す数字です。ウインドウの高さの倍数で測定します。たとえば、ブラウザウィンドウの高さが1000pxで、infinite-scroll-distanceが2にセットされている場合、infinite scrollの式はエレメントの底がブラウザウィンドウの底から2000px以内にあるときに評価します。デフォルトは0です。(要素の底がブラウザウィンドウの下部を横切るとき式が評価されます)
infinite-scroll-disabled (optional) - {boolean} ブール式です。trueの場合、他のすべての条件が満たされている場合でも infininite scrollが評価されることはありません。たいていは一時停止などで使われます。例えばAjax読込中などです。スクロールイベントが発火し、この属性が評価を妨げた場合、そのイベントは属性値が再度falseになったタイミングで再度評価されます。
infinite-scroll-immediate-check (optional) - {boolean} スクロールイベントが起こっていない場合でも、ディレクティブがinfinite scroll式を評価するかを指定するブール式です。コンテンツの高さが十分にないときに便利です。デフォルトはtrueです。
infinite-scroll-listen-for-event (optional) - {string} イベント名を設定します。このイベントが実行された際、スクロール位置のチェックが走ります。手動でスクロールハンドラをトリガーする必要がある場合に便利です。
モジュールの読み込み infiniteScrollディレクティブはinfinite-scrollモジュール内で利用可能です。アクセスを可能にするために、infinite-scrollが自身のモジュールの依存関係に含まれていることを確認してください。
var myApp = angular.module(&#39;myApp&#39;, [&#39;infinite-scroll&#39;]);  スクロールイベントを絞る スクロールイベントは非常に頻繁に発火します。これによってパフォーマンスを低下させたり、スクロールの挙動を悪くしてしまうことがあります。これを和らげるために、infiniteScrollではmillisecondsにおけるスクロールイベントの上限を設定することができます。
// you might call this after your module initalization angular.module(&#39;infinite-scroll&#39;).value(&#39;THROTTLE_MILLISECONDS&#39;, 250)  手動でスクロールハンドラをトリガーする アイテムの高さを変更したり隠したりした際に、ユーザーのスクロールイベント無しで短いリストを取得し、再構築させることができます。この場合、infinite-scroll-listen-for-eventを使います。また、スクロールチェックが必要であれば、対応するイベントを発生できます。例えば、</description>
    </item>
    
    <item>
      <title>【訳読】PDFMakeにおけるカスタムフォントの利用</title>
      <link>http://kotazi.github.io/blog/post/2015111901/</link>
      <pubDate>Wed, 18 Nov 2015 15:53:13 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2015111901/</guid>
      <description>カスタムフォントの使用 vfs_fonts.jsは&amp;rdquo;virtual-file-system&amp;rdquo;オブジェクトをpdfMake.vfsに割り当てています。 このオブジェクトの各キーがファイル名であり、値はbase64エンコードされたファイルを含みます。
grunt dump_dir  を実行すると新しくexamples/fonts内のフォントを含んだvfs_fonts.jsが生成されます。 RobotにLICENSE.txtが必要かは分かりませんが、ライセンスを壊してしまわないように含んでいます。
カスタムフォントを利用するためには、3つのステップが必要になります。
 使用するフォントを含んだvfs_fonts.jsを生成する font familyを定義する doc-definition-object内にあるfont familyを変更する  
1. 使用するフォントを含んだvfs_fonts.jsを生成する: examples/fonts内にフォントをコピーします。 grunt dump_dirを実行してください。新しいbuild/vfs_fonts.jsをウェブページで使います。
ちなみに、上記のアクションはexamples/fonts内の全てのファイルをダンプしてしまうので、画像ファイルなどを含むこともできます。
2. font familyを定義する pdfMake.createPdf(docDefinition)が呼ばれる前に、pdfMake.fontsをセットします。
{ yourFontName: { normal: &#39;fontFile.ttf&#39;, bold: &#39;fontFile2.ttf&#39;, italics: &#39;fontFile3.ttf&#39;, bolditalics: &#39;fontFile4.ttf&#39; }, anotherFontName: { (...) } }  キーの部分があとでdoc-definitionで使うfont-family名になります。 各font-familyは4つのプロパティを定義します。normal/bold/italics/bolditalicsです。
デフォルトの構成は下記のようになっています。
{ Roboto: { normal: &#39;Roboto-Regular.ttf&#39;, bold: &#39;Roboto-Medium.ttf&#39;, italics: &#39;Roboto-Italic.ttf&#39;, bolditalics: &#39;Roboto-Italic.ttf&#39; } };  3. doc-definition-object内にあるfont familyを変更する 現在、PDFMakeではRobotoをデフォルトのfamily nameとして利用しています。あなたのフォントを使うためにはこれを変更する必要があります。一番簡単な方法はグローバルでdefaultStyleを定義することです。
var docDefinition = { content: (.</description>
    </item>
    
    <item>
      <title>【訳読】DataTablesのPDFエクスポート</title>
      <link>http://kotazi.github.io/blog/post/2015111801/</link>
      <pubDate>Tue, 17 Nov 2015 15:10:01 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2015111801/</guid>
      <description>DataTablesのPDF吐き出しの日本語がうまくできません。
すごくはまったけれど、ドキュメントをちゃんと読むと分かったりする。
PDFMakeの存在に気付いていないだけでした。
 テーブルデータを含んだPDFファイルを作成保存します。 注意: このプロパティはDataTablesのButtonsが必要になります。
必要なもの In order to operate, this button requires the following:
動作ささせるために下記のものが必要になります。
 Flashエクスポート用のプラグイン ローカル保存に対応したブラウザ(I) PDFMake フォントファイル(PDFMakeが用意しているものか、カスタムフォントが使えます)  説明 このボタンはデータテーブルからPDFファイルを作成し保存します。 動作させるためにはモダンブラウザが必要となります。(IE8やIE9では動作しません。) 古いブラウザのためにpdfFlashボタンを提供しています。同じくPDFファイルを作成し保存するFlashプラグインです。また、pdfボタンは自動でブラウザ判定をしてボタンを選んでくれます。
このボタンを追加するためにはPDFMakeが利用可能であること、また適切なフォントサイズが必要です。PDFMakeはvfs_fonts.jsとカスタムフォントの使用を提供しています。このMITライセンスのライブラリはブラウザ上でPDFファイルを作成する機能を提供しており、このボタンではこれを利用しています。
PDFMakeとこのボタンを使えば、簡単にテキストやイメージファイル、その他の状貌をPDFにすることができます。詳しくは下記とPDFMakeのドキュメントを読んでください。
Safariについての注意:Safariでは生成されたPDFをダウンロードすることができません。(Webkitのバグ)
生成されたPDFは新しいタブで表示されます。エンドユーザーはブラウザの&amp;rdquo;Save as&amp;rdquo;ボタンを使って保存してください。
Options 下記のオプションを使って動作や表示の設定ができます。
   名前 タイプ 初期値     text ボタンの表示テキスト。このオプションかbuttons.copyを使っても設定できます。 PDF   calssName ボタンのクラス名 buttons-pdf buttons-html5   action PDFの作成保存    exportOptions Datatablesから出力されたデータを選択してください。行や列についても含みます。buttons.exportData()を見てください。 {}   header ヘッダーを含むかどうかを示します。 true   footer フッターを含むかどうかを示します false   title 生成されたファイルのファイル名です。*を使うと自動的にtitleタグの値が置き換えられます。また、PDFファイルの上部にもこのタイトルが表示されます。 *   download PDFが生成された際のアクションを選択します。downloadもしくはopenを選択することができます。Safariの動作には注意してください。limitation in Safari download   extension ファイルの拡張子です .</description>
    </item>
    
  </channel>
</rss>