<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Angular2 on kotazi.com</title>
    <link>http://kotazi.github.io/blog/tags/angular2/</link>
    <description>Recent content in Angular2 on kotazi.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Jan 2016 20:07:16 +0900</lastBuildDate>
    
	<atom:link href="http://kotazi.github.io/blog/tags/angular2/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Angular2のチュートリアル</title>
      <link>http://kotazi.github.io/blog/post/2016/0115_angular2_2/</link>
      <pubDate>Fri, 15 Jan 2016 20:07:16 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0115_angular2_2/</guid>
      <description>Angualr2のチュートリアルやったのでメモ。
 kotazi/angular2-quick-start TUTORIAL: TOUR OF HEROES   構成 angular2-tour-of-heroes |- node_modules |-app | |- app.component.ts | |- boot.ts | |- hero.ts | |- hero-detail.component.ts | |- hero.service.ts | |- mock-heroes.ts |- index.html |- package.json |- tsconfig.json  index.html  Angular2ではangular2-polyfills.jsとRx.jsが必要 Systemでconfigとbootの読み込み &amp;lt;my-app&amp;gt;タグを埋め込む   boot.ts  bootstrap()でアプリケーション起動   app.component.ts @ComponentはAngularにこのクラスはAngularのコンポーネントだと伝える役割を担う。
selectorでHTMLのタグ名を指定する。templateにはレンタリングするHTMLを記述する。
 *ngFor=&amp;ldquo;#hero of heroes&amp;rdquo; ng-repeatが変わった アスタリスクとシャープが特徴   hero.ts classではなくinterfaceを利用している。
ここでの選び方はHeroをどのように使いたいか。
ロジックや振る舞いを書く場合は、class。 型の定義などだけであれば、interfaceで十分。
 mock-heroes.ts  HREOES配列はHero型。   hero-detail.</description>
    </item>
    
    <item>
      <title>Angular2メモ</title>
      <link>http://kotazi.github.io/blog/post/2016/0115_angular2/</link>
      <pubDate>Fri, 15 Jan 2016 11:56:56 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0115_angular2/</guid>
      <description>SPEED &amp;amp; PERFORMANCE Angular2ではAngular1から劇的に速くなります。 - サーバーサイドプリレンダリングによる初期ロードの高速化 - オフラインコンパイルの立ちあげの速さ、 - 検出やビューキャッシュの大幅改善によるスムーズなスクロールやトランジション。
SIMPLE &amp;amp; EXPRESSIVE 意図を明確に自然に書きやすくなります。 柔軟なテンプレートは読みやすく理解しやすいので、 チームの複雑さがなくなります。
CROSS PLATFORM Angular2はデスクトップアプリやモバイルウェブ、AndroidとiOSにも対応。 Angular Universalはモバイル高速化のためにサーバーサイドレンダリングを提供します。
Web workerによってレスポンシブなアプリUIがサポートされます。
SEAMLESS UPGRADE FROM ANGULAR 1 自身のペースでAngular1からのアップデードができます。
FLEXIBLE DEVELOPMENT 言語を自由に選べます。 ES5、TypeScript、Dart、ES2015やJSにコンパイルできる言語なら動作します。
COMPREHENSIVE ROUTING ビューの設計が洗練されています。
DEPENDENCY INJECTION 依存性注入がシンプルに。 退屈なコードが不要に。 テストも書きやすくなる。
LEGACY BROWSER SUPPORT Chrome, Edge, Firefox, IE, and Safariの最新バージョンをサポート。 IE9+ and Android 4.1+も。
ANIMATIONS 低レイヤーでのアニメーションをサポート。
INTERNATIONALIZATION (I18N) &amp;amp; ACCESSIBILITY 全ての人に届くようにできてる。</description>
    </item>
    
  </channel>
</rss>