<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on kotazi.com</title>
    <link>http://kotazi.github.io/blog/tags/go/</link>
    <description>Recent content in Go on kotazi.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 10 Aug 2016 13:38:10 +0900</lastBuildDate>
    
	<atom:link href="http://kotazi.github.io/blog/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>【Go】Deploying a Go App</title>
      <link>http://kotazi.github.io/blog/post/2016/0810_goapp_deploy/</link>
      <pubDate>Wed, 10 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0810_goapp_deploy/</guid>
      <description>GCP/Goアプリケーションのデプロイ周りについて学んでいたところ。
goapp deployだったり、GoogleAppEngineLauncherだったり、 appcfg.pyだったり、dev_appserver.pyだったりと少しややこしくなった。
 Deploying a Go App  まず、goappはApp Engine Go SDK に含まれているものだ。appcfg.pyもここに含まれている。
デプロイ後、アプリケーションはhttps://&amp;lt;YOUR-PROJECT-ID&amp;gt;.appspot.comで動作する。
ファイルをアップロードするには、goapp deployをアプリケーションのルートディレクトリから実行しよう。この時ルートディレクトリには app.yamlが用意されていなければならない。 引数を使ってルートの位置を示すこともできるけれども、細かいことはgoapp help deployで見てほしい。
app.yamlにあるアプリケーションIDを自動的に使う。けれども多くのサンプルアプリケーションではapp.yamlからapplication:や version:を除外している。そういう場合はコンソールからバージョンやアプリケーションIDを指定する。
goapp deploy -application &amp;lt;YOUR_PROJECT_ID&amp;gt; -V v1 myapp/  アプリケーションが複数のサービスから成る場合、 更新するサービスを指定することができる。
 デフォルトのサービスを更新する場合、リストの最初ものが更新される 初めて更新する場合、デフォルトのサービスは必ず含まれる  </description>
    </item>
    
    <item>
      <title>【Go】Go Bookshelf App: PubSub</title>
      <link>http://kotazi.github.io/blog/post/2016/0809_go_pub_sub/</link>
      <pubDate>Tue, 09 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0809_go_pub_sub/</guid>
      <description>Using Cloud Pub/Sub with Go  Google Book APIを使ってバックグラウンドワーカーに処理をさせる。
 前回同様、config.goから下記部分のコメントを削除し、ProjectIDを書き換える。
ローカルホストを立ち上げた状態で下記のコマンドでバックグラウンドワーカーが動く。
cd $GOPATH/src/github.com/GoogleCloudPlatform/golang-samples/getting-started/bookshelf cd pubsub_worker PORT=8081 go run worker.go  http://localhost:8081/でワーカーインスタンスに立直できる。 処理した本の数についてのステータスが確認できる。
↑ 「イノベーションのジレンマ」とタイトルをいれると勝手に入る
デプロイする $ cd $GOPATH/src/github.com/GoogleCloudPlatform/golang-samples/getting-started/bookshelf # Deploy the worker cd pubsub_worker aedeploy gcloud app deploy # Deploy the main app cd ../app aedeploy gcloud app deploy  下記がアクセス先になる。
https://[YOUR_PROJECT_ID].appspot.com https://worker-dot-[YOUR_PROJECT_ID].appspot.com  データベース内で本が更新されるとCloud Pub/Subが走る。 ワーカーは分離して稼働していて、これらのイベントをリッスンしている。 イベントを受け取るとワーカーkはBooksAPIにリクエストを作成し、データベースの本の記録を更新する。
以上。</description>
    </item>
    
    <item>
      <title>【Go】Go Bookshelf App: Logging</title>
      <link>http://kotazi.github.io/blog/post/2016/0808_go_logging/</link>
      <pubDate>Mon, 08 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0808_go_logging/</guid>
      <description>どのようにして詳細なログ情報を残していくか。
 Logging Application Events with Go  Cloud Platformの提供するログやモニタリングツールがあるので、Cloud Platform Consoleから簡単に確認することができる。
このサンプルでは標準のlogパッケージとGorillaのCombinedLoggingHandlerを利用している。
標準のエラー:
type appHandler func(http.ResponseWriter, *http.Request) *appError type appError struct { Error error Message string Code int } func (fn appHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) { if e := fn(w, r); e != nil { // e is *appError, not os.Error. log.Printf(&amp;quot;Handler error: status code: %d, message: %s, underlying err: %#v&amp;quot;, e.Code, e.Message, e.Error) http.Error(w, e.Message, e.Code) } }  HTTPリクエストのログ:</description>
    </item>
    
    <item>
      <title>【Go】Go Bookshelf App: Authenticating Users</title>
      <link>http://kotazi.github.io/blog/post/2016/0805_go_authenticating_users/</link>
      <pubDate>Fri, 05 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0805_go_authenticating_users/</guid>
      <description>OAuth2.0を使ったユーザー認証。
 Authenticating Users with Go   Web application client IDの作成 credentialsへアクセスし、OAuth consent screenをクリック。 プロダクト名のところにGo Bookshelf Appと入力し、その他も任意で記入する。
保存後、Create credentials &amp;gt; OAuth client IDと移動し、Application typeではWeb applicationを選択。 NameはGo Bookshelf Client。Authorized redirect URIsにProjectIDに置き換えた値を入れる。
http://localhost:8080/oauth2callback http://[YOUR_PROJECT_ID].appspot.com/oauth2callback  作成すると、IDとclient secretが表示されるので保存しておくこと。
 前回同様、下記へ移動してconfig.goを開く。
cd $GOPATH/src/github.com/GoogleCloudPlatform/golang-samples/getting-started/bookshelf  下記のコメントを削除し、clientidとclientsecretを先ほどの値に置き換える。
// oauthConfig = configureOAuthClient(&amp;quot;clientid&amp;quot;, &amp;quot;clientsecret&amp;quot;)  app/app.yamlを開き、OAUTH2_CALLBACKのProjectIDを自分のものに置き換える。
 ローカルの立ち上げやデプロイは前回同様。
セッションを扱うためにGorilla web toolkitを使っている。 GorillaはいくつかのStoreインターフェイスを持っているが、今回はCookieStoreを利用。
認証の仕組みはまず、Googleの認証画面にリダイレクトさせ、そのレスポンスを、ユーザーがアプリケーションに戻る際に処理させるというものである。
アプリケーションはClientIDとOAuthスコープを使ってURLを生成する。スコープには、アプリケーションがアクセスしようとするユーザー情報が何かということを含む。
config.goのこの部分がそれにあたる。
func configureOAuthClient(clientID, clientSecret string) *oauth2.Config { redirectURL := os.Getenv(&amp;quot;OAUTH2_CALLBACK&amp;quot;) if redirectURL == &amp;quot;&amp;quot; { redirectURL = &amp;quot;http://localhost:8080/oauth2callback&amp;quot; } return &amp;amp;oauth2.</description>
    </item>
    
    <item>
      <title>【Go】Go Bookshelf App: Cloud Storage</title>
      <link>http://kotazi.github.io/blog/post/2016/0804_go_cloud_strage/</link>
      <pubDate>Thu, 04 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0804_go_cloud_strage/</guid>
      <description>続いて、&amp;ldquo;Using Cloud Storage with Go&amp;rdquo;。
Cloud Storageの作成 下記コマンドでCloud Storageを作成する。
実はどんな名前でもいいんだけど、ProjectIDに合わせておくのがよい。
❯❯❯ gsutil mb gs://*****-***-kotazi Creating gs://*****-***-kotazi/... ~/R/blog ❯❯❯ gsutil defacl set public-read gs://*****-***-kotazi Setting default object ACL on gs://*****-***-kotazi/...  Configuring settings プロジェクトルートへ移動してconfig.goを開く。
cd $GOPATH/src/github.com/GoogleCloudPlatform/golang-samples/getting-started/bookshelf  下記部分のコメントを消して、バケット名に書き換える。
// StorageBucket, err = configureStorage(&amp;quot;&amp;lt;your-storage-bucket&amp;gt;&amp;quot;)  ローカル立ち上げやデプロイの方法はさっきと同じ。
今回で言うと本棚の画像をCloud Storage側におけるようになる。そのためのコードが下記。
getting-started/bookshelf/app/app.goのuploadFileFromForm関数。 この関数の中で画像があるかないかをチェックした折、あればCloud Storageにアップロードする。
// uploadFileFromForm uploads a file if it&#39;s present in the &amp;quot;image&amp;quot; form field. func uploadFileFromForm(r *http.Request) (url string, err error) { f, fh, err := r.</description>
    </item>
    
    <item>
      <title>【Go】Go Bookshelf App: Datastore</title>
      <link>http://kotazi.github.io/blog/post/2016/0803_go_nosql/</link>
      <pubDate>Wed, 03 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0803_go_nosql/</guid>
      <description>GCPのGoのチュートリアルの概要。
とりあえずDatastoreでやってみることに。
 Using Structured Data with Go   先ほどクローンしたコードの編集を加える。
cd $GOPATH/src/github.com/GoogleCloudPlatform/golang-samples/getting-started/bookshelf  config.goを開き、下記部分のコメントを消して、自分のプロジェクトIDに置き換える。
// DB, err = configureDatastoreDB(&amp;quot;projectid&amp;quot;)  ローカルマシンで起動 下記コマンドでローカルマシンを立ち上げる。
 http://localhost:8080  cd app go run app.go auth.go template.go  アプリケーションの動作を確認できる。
デプロイする appディレクトリ内で下記のコマンド。https://[YOUR_PROJECT_ID].appspot.comでアクセス可能。
aedeploy gcloud app deploy  アプリを更新する場合、同じコマンドをを使えばバージョンを更新できる。 新しくデプロイすると新しいバージョンが作られる。
古いバージョンも残り続けるので課金対象にしたくなければ削除するのがいい。
バージョンページから削除できる。
 getting-started/bookshelf/db_datastore.goの
// AddBook saves a given book, assigning it a new ID. func (db *datastoreDB) AddBook(b *Book) (id int64, err error) { ctx := context.</description>
    </item>
    
    <item>
      <title>【Go】Go Bookshelf App: 概要</title>
      <link>http://kotazi.github.io/blog/post/2016/0802_go_bookshelf/</link>
      <pubDate>Tue, 02 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0802_go_bookshelf/</guid>
      <description>GCPのGoのチュートリアルの概要。
 Go Bookshelf App   機能:  リストの閲覧、追加、削除 詳細の編集 カバー画像のアップロード Googleアカウントでのログインと、追加した本の確認  目標:  サンプルアプリケーションのクローン ローカルでの起動 GAE環境へのデプロイ サンプルコードを読む データ構造のストアについて Google Cloud Storeでのバイナリデータのストアについて ユーザー認証について GCP Consoleで確認するイベントログについて バックグラウンドワーカーにタスクを送るGoogle Cloud Pub/Subの使い方  手順: ここからGCP Console Projectを選択/生成する。 ここを見て課金を有効にする。 さらに、Cloud SDKのインストール。
それができたら、下記コマンドでgcloud認証
gcloud init  成功するとここへ飛ぶ。(gcloudのチュートリアルあるから読んでみてみいいかも。)
ここからDatastore、Cloud Pub/Sub, Cloud Storage JSON, Cloud Logging, Google+ APIsを利用できるようにする
続いて、アカウントを確認
~/R/s/gcp ❯❯❯ gcloud config list Your active configuration is: [default] [core] account = kotazi@*****.com disable_usage_reporting = False project = ********  必要に応じて、自分で設定もできる</description>
    </item>
    
  </channel>
</rss>