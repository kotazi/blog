<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nightwatch on kotazi.com</title>
    <link>http://kotazi.github.io/blog/tags/nightwatch/</link>
    <description>Recent content in Nightwatch on kotazi.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Jun 2016 17:17:08 +0900</lastBuildDate>
    
	<atom:link href="http://kotazi.github.io/blog/tags/nightwatch/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>【サンプルあり】Nightwatch.js覚書</title>
      <link>http://kotazi.github.io/blog/post/2016/0613_nightwatchjs/</link>
      <pubDate>Mon, 13 Jun 2016 17:17:08 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0613_nightwatchjs/</guid>
      <description>Nightwatch.jsについて簡単に学び、簡単にまとめました。
 概要 Nightwatchとは？  Selenium WebDriver APIを使い、Node.jsで書かれたWebアプリケーション/Webサイト用の自動テストフレームワーク 継続的インテグレーションを行うためのE2Eテスト自動化へのソリューション  Seleniumの概要  ブラウザ自動制御のための人気で包括できなツール。元々Javaだったが現在は多くの言語をサポート Nightwatchはブラウザ自動制御のためにSelenium WebDriver(特にWebDriver Wire Protocol)を使っている  オペレーションについて NightwatchはSeleniumサーバーに正しいパラメータを付与してHTTPリクエストを送ることで動作する。
RESTfulなAPIプロトコルはSelenium JsonWireProtocolに定義されている。
Nightwatchでは多くの場合、Seleniumサーバーに対して少なくとも2回のリクエストを送る必要がある。最初のリクエストではCSSセレクタで与えられた要素を見つけるためのものであり、次のリクエストでコマンドに対して与えられた要素を演算する。
サンプル(公式から) CSSセレクタを使うことで、簡単にE2Eテストを書ける。
module.exports = { &#39;Demo test Google&#39; : function (browser) { browser // URLを指定 .url(&#39;http://www.google.com&#39;) // bodyタグが表示されるまで1000ms待つ .waitForElementVisible(&#39;body&#39;, 1000) // input[type=text]に&amp;quot;nightwatch&amp;quot;とセット .setValue(&#39;input[type=text]&#39;, &#39;nightwatch&#39;) // button[name=btnG]が表示されるまで1000ms待つ .waitForElementVisible(&#39;button[name=btnG]&#39;, 1000) // button[name=btnG]ボタンをクリック .click(&#39;button[name=btnG]&#39;) // 1000ms待つ .pause(1000) // #mainタグがNight Watchを含んでいることを確認する .assert.containsText(&#39;#main&#39;, &#39;Night Watch&#39;) // 終了 .end(); } };  必要に応じて複数のステップに分割することも可能。</description>
    </item>
    
  </channel>
</rss>