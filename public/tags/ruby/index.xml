<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on kotazi.com</title>
    <link>http://kotazi.github.io/blog/tags/ruby/</link>
    <description>Recent content in Ruby on kotazi.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 Feb 2016 20:34:06 +0900</lastBuildDate>
    
	<atom:link href="http://kotazi.github.io/blog/tags/ruby/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>【プログラミング言語Ruby】3章-データ型とオブジェクト</title>
      <link>http://kotazi.github.io/blog/post/2016/0212_ruby/</link>
      <pubDate>Sat, 13 Feb 2016 20:34:06 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0212_ruby/</guid>
      <description>数値 Rubyは数値を表現する5種類の組み込みクラスを持っており、 標準ライブラリにはさらに3種類の役に立ち数値クラスが含まれている。
Rubyの全ての数値オブジェクトはNumericのインスタンスになっている。 全ての整数はIntegerのインスタンスである。31ビット幅に収まる整数値はFixnumのインスタンスであり、 そうでなければBignumのインスタンスである。 Rubyでは実数値をFloatクラスで近似的に表現する。Floatクラスは プラットフォーム固有の浮動小数点表現を使う。
Complexクラスは複素数を表現する。 BigDecimalクラスは10進数表現を使って任意の制度の実数を表現する。 Rationalクラスは有理数、すなわち整数を別の整数で除算した値を表現する。
また、全ての数値オブジェクトはイミュータブルである。
文字列 文字列はStringクラスによって表現する。ミュータブルなオブジェクトである。 パターンはRegexpオブジェクトとして表現される。
%q、%QはStringリテラル。
配列 配列とは、値の列で、列の中の位置(添字)によって値にアクセスできるようになっているものである。
%w、%Wは配列リテラル。
配列はArray.newコンストラクタでも作成できる。
ハッシュ ハッシュとはキーと呼ばれるオブジェクトの集合を保持し、ここのキーに値を対応付けているデータ構造である。 キーを値にマッピングするので、ハッシュはマップとも呼ばれる。 個々のキーから値を連想するように導き出すので、連想配列とも呼ばれることもあるし、 添字が整数ではなく任意のオブジェクトになった配列と考え得ることもできる。
numbers = Hash.new  ハッシュリテラル ハッシュリテラルは全体が中括弧で囲まれ、カンマで区切られたキー/値の対という形で記述される。 キーと値は=&amp;gt;という2文字の矢印で区切られる。先ほど作成したHashオブジェクトは次のリテラルでも作成できる。
numbers = { &amp;quot;one&amp;quot; =&amp;gt; 1, &amp;quot;two&amp;quot; =&amp;gt; 2, &amp;quot;three&amp;quot; =&amp;gt; 3 }  一般に、ハッシュキーとしては文字列よりもSymbolオブジェクトの方が効率的に使える。
numbers = { :one =&amp;gt; 1, :two =&amp;gt; 2, :three =&amp;gt; 3 }  Symbolとはinternされたイミュータブルな文字列で、プレフィックスとしてコロンが付けられた識別子という形で記述される。
Rubyのハッシュは、ハッシュテーブルというデータ構造を使って実装されている。 ハッシュのキーとして使えるオブジェクトは、キーのハッシュ値となるFixnumを返すhashという名前のメソッドを保つ必要がある。
範囲 Rangeオブジェクトは先頭の値から末尾の値までのすべての値を表す。範囲リテラルは、先頭の値と末尾の値の間に2個または3子のドットを入れて記述する。 ドットが２個なら範囲は包含的で、末尾の値も範囲の一部となる。 ドットが３個なら、範囲は排他的で、末尾の値は範囲に含まれない。
範囲には暗黙的に順序がある。 Stringクラスにはsuccメソッド定義されており、&#39;a&#39;.</description>
    </item>
    
    <item>
      <title>【プログラミング言語Ruby】2章-Rubyプログラムの構造と実行</title>
      <link>http://kotazi.github.io/blog/post/2016/0211_ruby/</link>
      <pubDate>Fri, 12 Feb 2016 20:34:06 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0211_ruby/</guid>
      <description>Rubyインタープリタは、トークンの連続としてプログタムを解析する。 トークンは、コメント、リテラル、記号類、識別子、キーワードである。
 コメントは#。 複数行コメントは=beginに始まり、=endで終わる
 リテラルはRubyソースコードに直接現れる値。数値、文字列、正規表現の3種類がある。
 識別子とは単純に名前のことである。Rubyは変数、メソッド、クラスなどに名前を与えるために識別子を使っている。
 ▼ 識別子の中の記号類 |記号|意味| |===|===| |$|グローバル変数にプレフィックスとして付ける。| |@|インスタンス変数に付ける。クラス変数には２つつける| |?|役に立つ慣習として、論理値を返すメソッドの末尾に疑問符を付ける| |!|注意が必要なことを示すときに付ける| |=|末尾が統合になっているメソッド式は、代入演算子のサ変で東道なしのメソッド名を置くだけで実行できる|
 Rubyの構文の基本単位は式である。Rubyインタープリタは式を評価して値を生成する。
Rubyはオブジェクト指向なので、メソッドという言葉を使う。
相互作用するように作られたメソッドのグループはクラスにまとめることができる。 そして、関連するクラスとクラスを持たないメソッドはモジュールにまとめることができる。</description>
    </item>
    
    <item>
      <title>【プログラミング言語Ruby】1章-イントロダクション</title>
      <link>http://kotazi.github.io/blog/post/2016/0210_ruby/</link>
      <pubDate>Thu, 11 Feb 2016 20:34:06 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0210_ruby/</guid>
      <description>Rubyは完全なオブジェクト指向言語。 すべての値は、単純な数値リテラルやbooleanなども含めてオブジェクトである。
 Rubyでは関数やメソッド軌道のための括弧が多くの場合省略可能である。 メソッド呼び出しで括弧が省略されているためオブジェクトの名前付きフィールドか名前付き変数のように見える。 オブジェクトの外からオブジェクトの内部状態にアクセスすることはできない、カプセル化については厳格な言語である。
 ブロックとイテレータは繰り返し処理でよく使われるが、 ブロックを一度しか実行しないメソッドでも役に立つ。
File.open(&amp;quot;data.txt&amp;quot;) do |f| line = f.readline end   Rubyのメソッド名は疑問符や感嘆符で終わることもできる。 通常感嘆符のないメソッドは元のオブジェクトのコピーに変更を加えて返してくるが、 感嘆符付きのメソッドはオブジェクトをその場で書き換えるミューテータ(mutator)メソッドである。
グローバル変数には$、インスタンス変数には@、クラス変数には@@というプレフィックスをつける。
 クラスとはオブジェクトの状態を操作する関連メソッドのコレクションである。 オブジェクトの状態は、インスタンス変数によって管理されている。 インスタンス変数とは名前の先頭が@で、オブジェクトごとに異なる値を持てる変数のことである。</description>
    </item>
    
    <item>
      <title>Ruby - pry導入編</title>
      <link>http://kotazi.github.io/blog/post/20151207_pry/</link>
      <pubDate>Mon, 07 Dec 2015 17:48:50 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/20151207_pry/</guid>
      <description>Railsのデバッグについて調べていた。
pryを知った。便利そうだったことメモ書き。
 Pryとは PryはRuby標準的なIRBシェルの強力な代替手段です。 シンタックスハイライトや、フレキシブルなプラグインアーキテクチャ、実行時の呼び出しやドキュメントの閲覧を備えています。
インストール $ gem install pry pry-doc $ pry  .ls, .pwdなどでShellコマンドを呼び出せる。
Railsプロジェクトに組み込む RailsプロジェクトにPryを入れて、ブレークポイントやステップ実行が行えるようにした。
Gemfileを編集(参考:Railsの開発効率をあげる - Pryを使ってRailsのコンソールをパワーアップ &amp;amp; デバッグをする)
group :development, :test do gem &#39;pry-rails&#39;, &#39;~&amp;gt; 0.3.4&#39; # rails console(もしくは、rails c)でirbの代わりにpryを使われる gem &#39;pry-doc&#39;, &#39;~&amp;gt; 0.8.0&#39; # methodを表示 gem &#39;pry-byebug&#39;, &#39;~&amp;gt; 3.3.0&#39; # デバッグを実施(Ruby 2.0以降で動作する) gem &#39;pry-stack_explorer&#39;, &#39;~&amp;gt; 0.4.9.2&#39; # スタックをたどれる end  ■ モデル確認 [12] pry(main)&amp;gt; show-models Administrator id: integer email: string email_for_index: string hashed_password: string suspended: boolean created_at: datetime updated_at: datetime StaffMember id: integer email: string email_for_index: string family_name: string given_name: string family_name_kana: string given_name_kana: string hashed_password: string start_date: date end_date: date suspended: boolean created_at: datetime updated_at: datetime  ■ ルート確認 [13] pry(main)&amp;gt; show-routes Prefix Verb URI Pattern Controller#Action staff_root GET /staff(.</description>
    </item>
    
  </channel>
</rss>