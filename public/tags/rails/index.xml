<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rails on kotazi.com</title>
    <link>http://kotazi.github.io/blog/tags/rails/</link>
    <description>Recent content in Rails on kotazi.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 27 Feb 2016 20:18:53 +0900</lastBuildDate>
    
	<atom:link href="http://kotazi.github.io/blog/tags/rails/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>【Rails】whenever導入を通した学び</title>
      <link>http://kotazi.github.io/blog/post/2016/0227_whenever/</link>
      <pubDate>Sat, 27 Feb 2016 20:18:53 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0227_whenever/</guid>
      <description> Railsのwheneverを使う機会があったのでその学びをまとめる。 やりたかっとことはRakeタスクを作成し、wheneverを使って定期的にSlackへポストする。
 Slack通知 Slackへの通知はすごく簡単。
ここにだいたい書いてある。
 RailsアプリからSlackに通知  とりあえず、config/intializers/slack_api.rbを作成してtokenを登録しておけば、いろいろできるみたい。
rakeタスクの作成 初めてrakeタスクを作成した。
 library rake  $ rake &amp;lt;タスク名&amp;gt; # 指定のタスクを実行。 $ rake &amp;lt;パラメータキー&amp;gt;=&amp;lt;値&amp;gt; &amp;lt;タスク名&amp;gt; # パラメータ指定ありで、指定のタスクを実行。 $ rake -h # 使い方を表示。 $ rake -T # 定義されているタスク一覧を表示  (引用:Rakeの基本的な使い方まとめ|うなの日記)
whenever  javan/whenever|github Wheneverは導入が超簡単なcrontab管理ライブラリGemです！  mixpanel mixpanelのデータのエクスポートしたい。
 Data Export API Rubyでmixpanelのイベントをtrackしたり、データをexportする術  </description>
    </item>
    
    <item>
      <title>Rails内でのwebpackの使い方</title>
      <link>http://kotazi.github.io/blog/post/2016/0214_rails_webpack/</link>
      <pubDate>Sun, 14 Feb 2016 13:41:03 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0214_rails_webpack/</guid>
      <description>&amp;ldquo;How to use webpack with Rails&amp;rdquo;翻訳記事になります。
 webpackは強力なモジュールバンドラである。主としてフロントエンド開発のために設計されており、 bowerやnpmのJavaScriptモジュールをうまく統合することができる。
Sproketsやアセットパイプラインを用いればシームレスな挿入をすることが可能だけれども、これには典型的なRailsのJSマネジメントシステムを使うによりいくつか大きな利点がある。残念ながらwebpackのドキュメントはまだ要約することが難しく、特にRailsに統合したいとなればなおさらだ。
あなたがまだwebpackを使っていないのであれば、ここに何ができるのかを示そう。
 npmやbowerを使っている全てのフロントエンドのJS(依存関係も)管理する CoffeeScriptやES6を自動で処理する 最小の力で全てのソースマップを出力する 難しい部分でのJSの分離に役に立つ。&amp;rdquo;common&amp;rdquo;モジュールが自動的に全てのページに渡ってシェアしてくれる 大きなモジュールを複数のファイルに分割し、必要なファイルのみをダウンロードする(require.ensureを用いる)  いいなと思ったら、これらを既存のRailsアプリ、もしくは新たなRailsアプリでどのように利用するか呼んでみるといい。 ちなみに、これはRails中心に書かれているけれども、Railsでなくともそのようなフレームワークにwebpackを導入したいのであればきっと役に立つだろう。
 Getting Started Is webpack right for your app? webpackは本当にパワフルで素晴らしいツールである。 けれども本当に効果的に利用するには、あなたが&amp;rdquo;モジュールとしてのJS&amp;rdquo;という哲学をしっかりと信じる必要がある。 jQueryやBackboneといった人気のライブラリを使っているなら簡単なことだ。 けれども、特に大きなアプリをwebpackを用いてコンバートしているのなら、いくつかの問題につまづくであろうことを知っておくべきだ。
典型的な問題:
 モジュールにはちゃんと定義されてエントリーポイントがない(webpackはあなたが要求したときに何を含むべきか知らない) モジュールにpackage.jsonやbower.jsonは無効である modules which simply stick something on window and call it a day modules which add something to jQuery, instead of exporting anything modules which, by default, give you a gigantic kitchen sink you don’t need  幸運にもこれらの問題に対処するための様々なメソッドがあるため、webpackで全て解決できる。 さっきも述べたようにwebpackのドキュメントは量が多いので、私が上記についてはカバーする。</description>
    </item>
    
    <item>
      <title>【Rails】Routing周りのメモ書き</title>
      <link>http://kotazi.github.io/blog/post/2016/0107_rails_routing/</link>
      <pubDate>Thu, 07 Jan 2016 18:31:41 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0107_rails_routing/</guid>
      <description>新しいRailsプロジェクトのroutes.rbを読んでいて調べたこととか。
 ◯ namespaceとscope moduleとscopeのち外  namespaceはURI PatternもController#Actionも指定したパスに scope moduleはController#Actionのみ指定したパスに scopeはURI Patternのみ指定したパスに  routeのmoduleとnamespaceとscopeの違い
◯ constraintsについて constraintsを使うことでさまざまな制限を兼ねることができる。 独自のクラスを使用すうることなども可能。
rails routing constraintsについて
◯ resourcesルーティング一覧   HTTP動詞 パス コントローラ#アクション 目的     GET /photos photos#index すべての写真の一覧を表示   GET /photos/new photos#new 写真を1つ作成するためのHTMLフォームを返す   POST /photos photos#create 写真を1つ作成する   GET /photos/:id photos#show 特定の写真を表示する   GET /photos/:id/edit photos#edit 写真編集用のHTMLフォームを1つ返す   PATCH/PUT /photos/:id photos#update 特定の写真を更新する   DELETE /photos/:id photos#destroy 特定の写真を削除する     ActiveAdminとEngineについてはまた今度。</description>
    </item>
    
    <item>
      <title>【Rails】ForbiddenAttributesError覚書</title>
      <link>http://kotazi.github.io/blog/post/2016/0105_forbiddenattributeserror/</link>
      <pubDate>Wed, 06 Jan 2016 18:31:41 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0105_forbiddenattributeserror/</guid>
      <description>RailsでActiveModel::ForbiddenAttributesError:エラーが出た。
 マスアサインメント脆弱性 モデルオブジェクトのassign_attributesメソッドの引数にハッシュもしくはparamsオブジェクトを渡せば、 モデルオブジェクトの属性を一括変更できる。フォームから送信することも可能。
管理者などがパラメータを変更する分にはいいが、権限によっては書き換えてはならないパラメータもある。 けれども知識のある人間がスクリプト書けば悪用することができてしまう。
このアプリケーションの脆弱性をマスアサインメント脆弱性と呼ぶ。
そしてこの脆弱性に対してRails4.0から導入された対抗策が、Strong Parameters。
Strong Parameters サンプルコード:
def staff_member_params params.require(:staff_member).permit( :email, :password, :family_name, :given_name, :family_name_kana, :given_name_kana, :start_date, :end_date, :suspended ) end  params.require(:staff_member)
paramsオブジェクトのrequireメソッドで、paramsオブジェクトが:staff_memberというキーと持っているかを調べる。
=&amp;gt; 持っていなければActionController::ParameterMissingエラー</description>
    </item>
    
  </channel>
</rss>