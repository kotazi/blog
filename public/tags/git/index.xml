<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on kotazi.com</title>
    <link>http://kotazi.github.io/blog/tags/git/</link>
    <description>Recent content in Git on kotazi.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Oct 2016 13:38:10 +0900</lastBuildDate>
    <atom:link href="http://kotazi.github.io/blog/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>git rebaseについて</title>
      <link>http://kotazi.github.io/blog/post/2016/1007_rebase/</link>
      <pubDate>Fri, 07 Oct 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/1007_rebase/</guid>
      <description>

&lt;h2 id=&#34;リモートブランチとリモート追跡ブランチ&#34;&gt;リモートブランチとリモート追跡ブランチ&lt;/h2&gt;

&lt;p&gt;ちょっと洗いざらいしているうえで、けっこう根本的な部分で理解の浅い箇所があるなということに気がついた。&lt;/p&gt;

&lt;p&gt;それがリモートブランチとリモート追跡ブランチ違い。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kray.jp/blog/git-pull-rebase/&#34;&gt;git pull と git pull –rebase の違いって？図を交えて説明します！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Docbaseを開発しているKrayのブログ。&lt;br&gt;
図が最高に分かりやすい。fetch理解する前にリモートブランチとローカルブランチの違いを理解する必要があるということに気づくことができた。&lt;/p&gt;

&lt;p&gt;完全にリンク先を読むのが一番なので、改めて説明はしないけれども、下記のようなことを学べた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;リモート追跡ブランチはローカルにある&lt;/li&gt;
&lt;li&gt;ユーザー自身がリモート追跡ブランチの内容を変更することはできないこと&lt;/li&gt;
&lt;li&gt;&lt;code&gt;origin/ブランチ名&lt;/code&gt; ってやつはリモート追跡ブランチを指している&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rebase&lt;/code&gt; はコミットを作り直す(ここがリモートに上げたものに&lt;code&gt;rebase&lt;/code&gt; すべきでないと言われる理由)&lt;/li&gt;
&lt;li&gt;そして故に、&lt;code&gt;rebase&lt;/code&gt; 後はコミットのハッシュが変わるため、pushがリジェクトされる (これが &lt;code&gt;rebase&lt;/code&gt; 後に &lt;code&gt;force push&lt;/code&gt; が必要になる理由)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ということがわかった上で、最後は運用ルール次第なのかなと思った。&lt;br&gt;
コミット履歴を汚さないために &lt;code&gt;rebase&lt;/code&gt; を推奨する場合もある。(以前一緒に働いていたロシア人もそうだった。)&lt;br&gt;&lt;/p&gt;

&lt;p&gt;そんな中で腑に落ちたのがこれ。&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yakst.com/ja/posts/18&#34;&gt;git rebaseを使うときのルール&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;簡単にまとめると、gitの履歴は綺麗であるべき。だから個人のリポジトリでは&lt;code&gt;rebase&lt;/code&gt; も好きに使えば良い。&lt;br&gt;
ただチーム開発においてはなにより、他人のコミットに&lt;code&gt;rebase&lt;/code&gt; してはいけない。それは他人のコミットを消すということだから(多分ハッシュ値が書き換わるという意味で)。「自分の履歴をきれいに」と 「他人 の履歴をいじるな」。&lt;/p&gt;

&lt;h2 id=&#34;その他参考リンク&#34;&gt;その他参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kaeruspoon.net/articles/1078&#34;&gt;Gitのリモートブランチと追跡ブランチは違うよ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/uasi/items/69368c17c79e99aaddbf&#34;&gt;Git で「追跡ブランチ」って言うのやめましょう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kernel.org/pub/software/scm/git/docs/gitglossary.html&#34;&gt;gitglossary(7) Manual Page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>【git/bfg】間違えてプッシュしたパスワードファイルなどを履歴から完全に削除する</title>
      <link>http://kotazi.github.io/blog/post/2016/0616_git_bfg/</link>
      <pubDate>Thu, 16 Jun 2016 13:50:34 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0616_git_bfg/</guid>
      <description>

&lt;p&gt;AWS情報の書いてあるJSONファイルが間違えてコミットしてあったため、
その削除方法について調べてトライしました。&lt;/p&gt;

&lt;hr&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://help.github.com/articles/remove-sensitive-data/&#34;&gt;Remove sensitive data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上記のリンクに方法が書いてある。&lt;br /&gt;
ざっくりまとめると2つの方法があって、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://rtyley.github.io/bfg-repo-cleaner/&#34;&gt;BFG Repo-Cleaner&lt;/a&gt;を使う方法&lt;/li&gt;
&lt;li&gt;コマンドを叩いて頑張る方法&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;の2つがある。どちらかと言えば1を推奨しているよう。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&#34;bfgを使って削除する&#34;&gt;BFGを使って削除する&lt;/h2&gt;

&lt;p&gt;Scala製なのでJavaの実行環境が必要になる。&lt;br /&gt;
今回は&lt;code&gt;.zprofile&lt;/code&gt;に&lt;code&gt;alias bfg=&#39;java -jar /Applications/bfg-1.12.12.jar&#39;&lt;/code&gt;としてエイリアスを作成。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ bfg --delete-files YOUR-FILE-WITH-SENSITIVE-DATA
$ git commit -m &amp;quot;Remove sensitive data&amp;quot;
$ git push --force origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;みたいな感じにすればできる。&lt;/p&gt;

&lt;h5 id=&#34;参考リンク&#34;&gt;参考リンク&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.technolize.net/post/82283923159/git-filter-branch-%E3%81%AE%E3%81%8B%E3%82%8F%E3%82%8A%E3%81%AB-bfg-%E3%81%A7%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%B1%A5%E6%AD%B4%E3%82%92%E6%B6%88%E5%8E%BB%E3%81%99%E3%82%8B&#34;&gt;git filter-branch のかわりに BFG でファイルの履歴を消去する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;コマンドを叩いて頑張る方法&#34;&gt;コマンドを叩いて頑張る方法&lt;/h2&gt;

&lt;p&gt;意外とシンプルんできるから悪くない。でも長いから覚えるのは無理。&lt;br /&gt;
なんだかんだでBFG入れておいていい気がする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git filter-branch -f --index-filter &#39;git rm --ignore-unmatch YOUR-FILE-WITH-SENSITIVE-DATA&#39; HEAD
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;参考リンク-1&#34;&gt;参考リンク&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/ichhi/20110825/1314300975&#34;&gt;gitで特定のファイルの履歴を消す方法|おし、プログラミング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/MahoTakara/items/3b02bf55767a6372596e&#34;&gt;GitHub の commit 履歴からパスワードファイル等だけを消す方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;テーマとは関係ないけど、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.jar&lt;/code&gt;ファイルはどこに置けばいいのか&lt;/li&gt;
&lt;li&gt;エイリアスを書いておくのは&lt;code&gt;.zprofile&lt;/code&gt;でいいのか&lt;/li&gt;
&lt;li&gt;エイリアスを作成する以外に良い方法がないのか&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というのが気になった。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【Git】fork元の更新を追う</title>
      <link>http://kotazi.github.io/blog/post/2016/0614_git_fork/</link>
      <pubDate>Tue, 14 Jun 2016 11:31:27 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0614_git_fork/</guid>
      <description>

&lt;p&gt;Vuexを最近やっている。&lt;br /&gt;
Cloneしてきたリポジトリを触ったりするわけだけど、
元のリポジトリに変更があれば反映させたい。&lt;/p&gt;

&lt;p&gt;その方法を調べました。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;まずはクローンしたブランチの状態を確認するとこのようになっている。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/W/vuex git:master ❯❯❯ git br -a
* master
  remotes/origin/0.3.0
  remotes/origin/0.4.0
  remotes/origin/HEAD -&amp;gt; origin/master
  remotes/origin/gh-pages
  remotes/origin/master
  remotes/origin/old
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;リモートに&lt;code&gt;upstream&lt;/code&gt;という名前で本家を追加する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git remote add upstream git@github.com:vuejs/vuex.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;フェッチする。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git fetch upstream&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;そして再度ブランチの状態を確認すると、
本家を追従できていることがわかる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/W/vuex git:master ❯❯❯ git br -a
* master
  remotes/origin/0.3.0
  remotes/origin/0.4.0
  remotes/origin/HEAD -&amp;gt; origin/master
  remotes/origin/gh-pages
  remotes/origin/master
  remotes/origin/old
  remotes/upstream/0.3.0
  remotes/upstream/0.4.0
  remotes/upstream/gh-pages
  remotes/upstream/master
  remotes/upstream/old
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;h3 id=&#34;本家リポジトリの変更を反映するには&#34;&gt;本家リポジトリの変更を反映するには&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git fetch upstream&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git merge upstream/master&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;となる。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/xtetsuji/items/555a1ef19ed21ee42873&#34;&gt;こちらの記事&lt;/a&gt;を参考にしました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【git】タグを間違えてしまった</title>
      <link>http://kotazi.github.io/blog/post/2016/0504_gittag/</link>
      <pubDate>Wed, 04 May 2016 11:45:41 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0504_gittag/</guid>
      <description>&lt;p&gt;gitのタグを修正することがあったのでメモ書き。&lt;/p&gt;

&lt;p&gt;注釈を間違えてしまったのでやりなおす方法。&lt;/p&gt;

&lt;hr&gt;

&lt;ul&gt;
&lt;li&gt;ローカルのタグを削除&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;git tag -d TAG_NAME
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;リモートのタグを削除(空のタグで上書き)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;git push origin :refs/tags/TAG_NAME
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;新しくタグをつける(注釈付き)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;git tag TAG_NAME
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;リモートのプッシュ&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;git push --tags origin
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;p&gt;意外とすんなり。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【git】There is an existing release branchへの対処</title>
      <link>http://kotazi.github.io/blog/post/2016/0316_git_flow/</link>
      <pubDate>Wed, 16 Mar 2016 13:01:21 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0316_git_flow/</guid>
      <description>&lt;p&gt;&lt;code&gt;git flow&lt;/code&gt;のメモ。&lt;/p&gt;

&lt;p&gt;リリースをしようとした時に下記のような注意が出てしまった。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/W/ git:develop ❯❯❯ git flow release start 2016-03-16-0349
There is an existing release branch (2016-03-14-0349). Finish that one first.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;リリースブランチを作成しようと思ったけれど、もうあるからまずはそれを完了させてくれとのこと。&lt;br /&gt;
webからgithubを確認すると既に&lt;code&gt;2016-03-14-0349&lt;/code&gt;があるから何でだろうと。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/W/ git:develop ❯❯❯ git branch | grep release
  release/2016-03-14-0349
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;grepしてみるとブランチが存在してる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/W/ git:develop ❯❯❯ git branch -D release/2016-03-14-0349
Deleted branch release/2016-03-14-0349 (was 0c652fd).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ブランチを削除して完了。無事にリリース作業に移れた。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>gemをインストールしたけれど見つからない時に疑うこと</title>
      <link>http://kotazi.github.io/blog/post/2016/0119_gitup/</link>
      <pubDate>Tue, 19 Jan 2016 13:55:26 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0119_gitup/</guid>
      <description>&lt;nav&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#git-up-をインストール&#34;&gt;◯ &lt;code&gt;git-up&lt;/code&gt;をインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#探す&#34;&gt;◯ 探す&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#パスを通す&#34;&gt;◯ パスを通す&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;

&lt;p&gt;&lt;code&gt;git-up&lt;/code&gt;をインストールしたけれど使えなかったのでその時の対処法をメモ。&lt;/p&gt;

&lt;hr&gt;

&lt;h6 id=&#34;git-up-をインストール&#34;&gt;◯ &lt;code&gt;git-up&lt;/code&gt;をインストール&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;$ gem install git-up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この状態で&lt;code&gt;git up&lt;/code&gt;を試したけれど見つからなかった&lt;/p&gt;

&lt;h6 id=&#34;探す&#34;&gt;◯ 探す&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;$ bundle list | grep git-up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは見つかる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ which git-up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これが見つからない。rbenvあたりでパスが通っていないっぽい。&lt;/p&gt;

&lt;h5 id=&#34;パスを通す&#34;&gt;◯ パスを通す&lt;/h5&gt;

&lt;p&gt;rbev内にgit-upが入っているかを確認する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ find .rbenv -name git-up
.rbenv/versions/2.2.2/bin/git-up
.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/gems/git-up-0.5.12/bin/git-up
.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/gems/git-up-0.5.12/lib/git-up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あった。&lt;/p&gt;

&lt;p&gt;シンボリックリンクを作成する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ln -s ~/.rbenv/versions/2.2.2/bin/git-up /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最後にgit-upがあることを確認する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ which git-up
/usr/local/bin/git-up
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>