<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on kotazi.com</title>
    <link>http://kotazi.github.io/blog/post/</link>
    <description>Recent content in Posts on kotazi.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 06 Oct 2016 13:38:10 +0900</lastBuildDate>
    <atom:link href="http://kotazi.github.io/blog/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>起業家はどこで選択を誤るのか</title>
      <link>http://kotazi.github.io/blog/post/2016/1006_kigyouka/</link>
      <pubDate>Thu, 06 Oct 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/1006_kigyouka/</guid>
      <description>&lt;p&gt;スマホをAndroidに変えてから読書の量が大幅に減ったためか、ブログの更新が一ヶ月ぶりになってしまった。&lt;br&gt;
iPhoneではVoiceOverの読み上げ機能を使って基本耳で聞きながら読書している。AndroidにもTalkBackという読み上げ機能はあるのだが、
どうやら肌に合わなかったらしい。iPhone7を購入したので最近は読書量が再び増えてきた。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a  href=&#34;https://www.amazon.co.jp/gp/product/4862761682/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4862761682&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;起業家はどこで選択を誤るのか――スタートアップが必ず陥る9つのジレンマ&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=kotazi-22&amp;l=as2&amp;o=9&amp;a=4862761682&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;
◯ 第Ⅰ部 創業前夜&lt;br&gt;
第１章 イントロダクション&lt;br&gt;
第２章 キャリアのジレンマ&lt;br&gt;&lt;/p&gt;

&lt;p&gt;◯ 第Ⅱ部 創業チームのジレンマ&lt;br&gt;
第３章 ソロかチームかのジレンマ&lt;br&gt;
第４章 人間関係のジレンマ&lt;br&gt;
第５章 役割のジレンマ&lt;br&gt;
第６章 報酬のジレンマ&lt;br&gt;
第７章 ３Rシステム&lt;br&gt;&lt;/p&gt;

&lt;p&gt;◯ 第Ⅲ部 創業チームを超えて&lt;br&gt;
第８章 雇用のジレンマ&lt;br&gt;
第９章 投資家のジレンマ&lt;br&gt;
第１０章 ファウンダーCEO交代のジレンマ&lt;br&gt;&lt;/p&gt;

&lt;p&gt;◯ 第Ⅳ部 総論&lt;br&gt;
第１１章 富かコントロールかのジレンマ&lt;br&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;ハーバード・ビジネススクール教授のノーム・ワッサーマンが10年分の研究をまとめたという本作。
調査データを元に、企業における様々なジレンマに対してどのようなアプローチをとるべきかを示唆している。&lt;/p&gt;

&lt;p&gt;Amazonや他ブログでは比較的高い評価を得ていたが、個人的には現実が伴っていないように感じてあまり面白く感じなかった。
Kindleで「私の調査データ」と検索をかけると43件マッチする。けれども彼の言う調査データが何なのかよく分からない。
あと基本的に冗長で同じことを何回も書いているので1/3の量にまとめてくれれば&amp;hellip;。笑&lt;/p&gt;

&lt;p&gt;ただ自分も起業家ではないのであまりこういった本を批判するのもどうかと思うので、自分なりに感じた部分について書きたい。&lt;/p&gt;

&lt;p&gt;本書のなかでもいくつかのジレンマについて触れられているが、そのほとんどは「人」がいるから生まれるものだ。
起業をしてEXITを目指すとなると、本当にさまざまな人が関わってくる。さまざまな想いを持った、さまざまな立場の人々。
そういう人たちがさまざまな量の時間なり金なりを一つの会社に投資するわけだから、そりゃしがらみも生まれる。&lt;/p&gt;

&lt;p&gt;そうしたしがらみ、そのための意思決定の場面は幾度とあるのだろうが、やはり最初が肝心なのだろう。
最初の仲間。彼の役割、エクイティの分配。最後まで一緒に走りきりたいのであれば、高い比率で分配してもいいかもしれないし、場合によっては優先株やSOを使えばコントロールを渡さずに富による報酬を用意することもできる。後に続く仲間は最初の人と少なからず比較することになるので、最初は間違えてはいけない。&lt;/p&gt;

&lt;p&gt;投資家選びも最初が肝心というのはきっと同じ。自分に足りていないリソースを見極めて、お金が必要なだけでコントロールは渡したくないとか、もしくは経験豊富な人にアドバイスも貰いたいのかとか、お互い納得できる人と出会えればいいと思う。(きっとそれが難しくて多くの人に会うんだろうな)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【Redux】Redux要点まとめ</title>
      <link>http://kotazi.github.io/blog/post/2016/0908_redux/</link>
      <pubDate>Tue, 06 Sep 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0908_redux/</guid>
      <description>

&lt;h2 id=&#34;api&#34;&gt;API&lt;/h2&gt;

&lt;h3 id=&#34;createstore&#34;&gt;■ &lt;code&gt;createStore&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;アプリのステートツリーを保持するRedux storeを生成する。
アプリ内にひとつであるべき。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;引数&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;reducers(Function)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;[preloadState]&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>【Webpack】devtoolのこと</title>
      <link>http://kotazi.github.io/blog/post/2016/0906_webpack_debug/</link>
      <pubDate>Tue, 06 Sep 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0906_webpack_debug/</guid>
      <description>&lt;p&gt;Webpackでビルドしたファイルのデバッグ方法が気になっていたので少し調べてみた。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;結論からいうと&lt;code&gt;webpack.config.js&lt;/code&gt;の&lt;code&gt;devtool&lt;/code&gt;オプションから設定できる。
さらに言えば開発環境では&lt;code&gt;cheap-module-eval-source-map&lt;/code&gt;、本番環境では&lt;code&gt;cheap-module-source-map&lt;/code&gt;を設定するのが良い。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://webpack.github.io/docs/configuration.html#devtool&#34;&gt;configuration | Webpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cheng.logdown.com/posts/2016/03/25/679045&#34;&gt;Webpack devtool source map « Cheng&amp;rsquo;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本番環境をサポートしているものとしていないものがあるのでその点は注意すること。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Missing .map resource?</title>
      <link>http://kotazi.github.io/blog/post/2016/0824_missing_sourcemap/</link>
      <pubDate>Tue, 23 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0824_missing_sourcemap/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/18499930/missing-map-resource&#34;&gt;Missing .map resource? [duplicate]&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Failed to load resource: the server responded with a status of 404 (HTTP/2.0 404)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Safariでbootstrap.css.mapがないというエラーが出ていたから調べてみたけど、
特に問題はないらしい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【読書】不格好経営</title>
      <link>http://kotazi.github.io/blog/post/2016/0816_nanba/</link>
      <pubDate>Tue, 16 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0816_nanba/</guid>
      <description>&lt;p&gt;&lt;a  href=&#34;https://www.amazon.co.jp/gp/product/4532318955/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4532318955&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;不格好経営―チームDeNAの挑戦&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=kotazi-22&amp;l=as2&amp;o=9&amp;a=4532318955&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;を読みました。&lt;/p&gt;

&lt;hr&gt;

&lt;ul&gt;
&lt;li&gt;第1章 立ち上げ&lt;/li&gt;
&lt;li&gt;第2章 生い立ち&lt;/li&gt;
&lt;li&gt;第3章 金策&lt;/li&gt;
&lt;li&gt;第4章 モバイルシフト&lt;/li&gt;
&lt;li&gt;第5章 ソーシャルゲーム&lt;/li&gt;
&lt;li&gt;第6章 退任&lt;/li&gt;
&lt;li&gt;第7章 人と組織&lt;/li&gt;
&lt;li&gt;第8章 これから&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;DeNA創業者の南場社長の著書。&lt;br /&gt;
本書は一字一句南場社長自身によって綴られている。
多少日記調の部分もあるが、やはり本人が書いているとリアリティがある。&lt;/p&gt;

&lt;p&gt;新卒説明会でDeNAの話を聞きに行った時、少しだけ南場社長に質問させてもらったことがある。
何を聞いたか今では忘れてしまったが、すごくエネルギッシュな人だと思った。&lt;/p&gt;

&lt;p&gt;そんな南場社長がDeNAの社長退任をすると聞いた時はとても驚いた。
本書の中に夫がガン宣告をされた時の考えが記されているので引用する。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;子どもに恵まれなかったふたちは、あまり家庭らしさのない夫婦で、
互いに仕事を最優先にそれぞれ勝手にやってきた。ふたりとも深夜遅くに帰宅するやいなや爆睡するというパターンが多く、生存確認はするが話をする時間はない。マッキンゼーの同窓会で久しぶり！と挨拶をすることもあった。掃除もしない、漁師もしない、仕事ばかりする妻を、面白がって放っておいてくれた。&lt;br /&gt;
今を起点にベストを尽くす。10年以上経営者をやり、そういう訓練だけはしてきたはずだ。過去を悔いても仕方がない。これからだ。告知されてからずっと暗い不安の淵に行ってしまったような夫の目を思い出す。今行くから。助けに行くから。これまでの人生は全部この時のためにあったんじゃないだろうか。そんなふうに思った。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;現在は復帰しているのでこれからも頑張ってほしい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【読書】営業の「聴く技術」 SPIN</title>
      <link>http://kotazi.github.io/blog/post/2016/0803_spin/</link>
      <pubDate>Sat, 13 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0803_spin/</guid>
      <description>&lt;p&gt;&lt;a  href=&#34;https://www.amazon.co.jp/gp/product/447808260X/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=447808260X&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;営業の「聴く技術」 新版―SPIN「4つの質問」「3つの説明」&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=kotazi-22&amp;l=as2&amp;o=9&amp;a=447808260X&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;
を読みました。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Cp1. 営業を成功へと導く質問技法&lt;br /&gt;
Cp2. ホンモノの営業スキルとは&amp;hellip;&lt;br /&gt;
Cp3. クロージング神話の崩壊とSPINの誕生&lt;br /&gt;
Cp4. 顧客の心理をハートフルに動かす「4つの質問」&lt;br /&gt;
Cp5. 「3つの説明」商談成功のクライマックス&lt;br /&gt;
Cp6. 変革・改革・激動の世紀を生き抜くスキル&lt;br /&gt;
Cp7. サクセス企業のリポート 4社の事例&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;非常に文章力に欠けた本だったので感想を簡略に記す。&lt;/p&gt;

&lt;p&gt;SPINの真髄は&amp;rdquo;しゃべるな、しゃべらせろ&amp;rdquo;。&lt;br /&gt;
従来「営業はしゃべるもの」を前提に本書はSPINについて解説している。&lt;/p&gt;

&lt;p&gt;オールドスタイルのセールス技法として、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;推定承諾法: 買い手が買う気前提に、詰めていく(「いつ届けましょうか？」など)&lt;/li&gt;
&lt;li&gt;二者択一法: 「AとB、どちらにしますか？」&lt;/li&gt;
&lt;li&gt;立見席法: 「すごい人気。今日ならまだ買えますよ。」不動産などで使われる。&lt;/li&gt;
&lt;li&gt;導入時期強調法: 「システム開発に4ヶ月はかかるから、早めに決断しないと」&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などは、顧客の気持ちに立てていない。&lt;/p&gt;

&lt;p&gt;そこでSPIN。
SPINは「2つのニーズ、4つの質問、3つの説明」によって構成される。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;潜在ニーズ&lt;/li&gt;

&lt;li&gt;&lt;p&gt;顕在ニーズ&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;状況質問(SituationQ)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;問題質問(ProblemQ)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;示唆質問(ImplicationQ)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;解決質問(Need-PayoffQ)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;特徴(Features)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;利点(Advantages)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;利益(Benefits)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2008年に書かれたという割には目新しいことが何も書かれていなかった。&lt;/p&gt;

&lt;p&gt;けれども著者が1940年生まれということだったので、仕方ないかなあとも思った。&lt;/p&gt;

&lt;p&gt;昔はそうだったのかも。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【読書】社長失格</title>
      <link>http://kotazi.github.io/blog/post/2016/0802_syacho_shikkaku/</link>
      <pubDate>Fri, 12 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0802_syacho_shikkaku/</guid>
      <description>&lt;p&gt;&lt;a  href=&#34;https://www.amazon.co.jp/gp/product/4822241300/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4822241300&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;社長失格&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=kotazi-22&amp;l=as2&amp;o=9&amp;a=4822241300&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;
を読みました。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;うまくまとまっている本ではないが、ハイパーネットの板倉社長の半生がかなり赤裸々に書かれている。「ここまで書いて平気なのだろうか？」と思うぐらい登場人物の名前や取引会社などのことが書かれているので、ある意味他の本では決して読めないことが書いてあるし、一読の価値がある一冊だ。&lt;/p&gt;

&lt;p&gt;会社が成長し、衰退し倒産していくまで。
その間で関わってくる人たち、そしてその態度の変化がしっかりと描かれていた。&lt;/p&gt;

&lt;p&gt;また、事業を急成長させていくうえで出資なり融資なりの協力はとても大きい。
大きいからこそしっかりと知り、適切な関係を築いていかなくてはならない。&lt;/p&gt;

&lt;p&gt;その上で、人が最大の資産だということを忘れない。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【Go】Deploying a Go App</title>
      <link>http://kotazi.github.io/blog/post/2016/0810_goapp_deploy/</link>
      <pubDate>Wed, 10 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0810_goapp_deploy/</guid>
      <description>&lt;p&gt;GCP/Goアプリケーションのデプロイ周りについて学んでいたところ。&lt;br /&gt;
&lt;code&gt;goapp deploy&lt;/code&gt;だったり、GoogleAppEngineLauncherだったり、
&lt;code&gt;appcfg.py&lt;/code&gt;だったり、&lt;code&gt;dev_appserver.py&lt;/code&gt;だったりと少しややこしくなった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/appengine/docs/go/tools/uploadinganapp#top_of_page&#34;&gt;Deploying a Go App&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まず、&lt;code&gt;goapp&lt;/code&gt;は&lt;a href=&#34;https://cloud.google.com/appengine/downloads#Google_App_Engine_SDK_for_Go&#34;&gt;App Engine Go SDK&lt;/a&gt;
に含まれているものだ。&lt;code&gt;appcfg.py&lt;/code&gt;もここに含まれている。&lt;/p&gt;

&lt;p&gt;デプロイ後、アプリケーションは&lt;code&gt;https://&amp;lt;YOUR-PROJECT-ID&amp;gt;.appspot.com&lt;/code&gt;で動作する。&lt;/p&gt;

&lt;p&gt;ファイルをアップロードするには、&lt;code&gt;goapp deploy&lt;/code&gt;をアプリケーションのルートディレクトリから実行しよう。この時ルートディレクトリには
&lt;code&gt;app.yaml&lt;/code&gt;が用意されていなければならない。
引数を使ってルートの位置を示すこともできるけれども、細かいことは&lt;code&gt;goapp help deploy&lt;/code&gt;で見てほしい。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app.yaml&lt;/code&gt;にあるアプリケーションIDを自動的に使う。けれども多くのサンプルアプリケーションでは&lt;code&gt;app.yaml&lt;/code&gt;から&lt;code&gt;application:&lt;/code&gt;や
&lt;code&gt;version:&lt;/code&gt;を除外している。そういう場合はコンソールからバージョンやアプリケーションIDを指定する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;goapp deploy -application &amp;lt;YOUR_PROJECT_ID&amp;gt; -V v1 myapp/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;アプリケーションが複数の&lt;a href=&#34;https://cloud.google.com/appengine/docs/go/configuration-files&#34;&gt;サービス&lt;/a&gt;から成る場合、
更新するサービスを指定することができる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;デフォルトのサービスを更新する場合、リストの最初ものが更新される&lt;/li&gt;
&lt;li&gt;初めて更新する場合、デフォルトのサービスは必ず含まれる&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>【Go】Go Bookshelf App: PubSub</title>
      <link>http://kotazi.github.io/blog/post/2016/0809_go_pub_sub/</link>
      <pubDate>Tue, 09 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0809_go_pub_sub/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/go/getting-started/using-pub-sub&#34;&gt;Using Cloud Pub/Sub with Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.google.com/books/&#34;&gt;Google Book API&lt;/a&gt;を使ってバックグラウンドワーカーに処理をさせる。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;前回同様、&lt;code&gt;config.go&lt;/code&gt;から下記部分のコメントを削除し、ProjectIDを書き換える。&lt;/p&gt;

&lt;p&gt;ローカルホストを立ち上げた状態で下記のコマンドでバックグラウンドワーカーが動く。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd $GOPATH/src/github.com/GoogleCloudPlatform/golang-samples/getting-started/bookshelf
cd pubsub_worker
PORT=8081 go run worker.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;http://localhost:8081/&lt;/code&gt;でワーカーインスタンスに立直できる。
処理した本の数についてのステータスが確認できる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.evernote.com/l/Aj24JXT3jO1BGJQHmgGX0QAoHCxcg56AdDIB/image.png&#34; alt=&#34;Pasted%20Image%208/3/16,%2011:14&#34; /&gt;&lt;/p&gt;

&lt;p&gt;↑ 「イノベーションのジレンマ」とタイトルをいれると勝手に入る&lt;/p&gt;

&lt;h3 id=&#34;デプロイする&#34;&gt;デプロイする&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ cd $GOPATH/src/github.com/GoogleCloudPlatform/golang-samples/getting-started/bookshelf

# Deploy the worker
cd pubsub_worker
aedeploy gcloud app deploy

# Deploy the main app
cd ../app
aedeploy gcloud app deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下記がアクセス先になる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://[YOUR_PROJECT_ID].appspot.com
https://worker-dot-[YOUR_PROJECT_ID].appspot.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/go/images/go-pub-sub.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;データベース内で本が更新されるとCloud Pub/Subが走る。
ワーカーは分離して稼働していて、これらのイベントをリッスンしている。
イベントを受け取るとワーカーkはBooksAPIにリクエストを作成し、データベースの本の記録を更新する。&lt;/p&gt;

&lt;p&gt;以上。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【Go】Go Bookshelf App: Logging</title>
      <link>http://kotazi.github.io/blog/post/2016/0808_go_logging/</link>
      <pubDate>Mon, 08 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0808_go_logging/</guid>
      <description>&lt;p&gt;どのようにして詳細なログ情報を残していくか。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/go/getting-started/logging-application-events&#34;&gt;Logging Application Events with Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cloud Platformの提供するログやモニタリングツールがあるので、Cloud Platform Consoleから簡単に確認することができる。&lt;/p&gt;

&lt;p&gt;このサンプルでは標準の&lt;code&gt;log&lt;/code&gt;パッケージとGorillaの&lt;code&gt;CombinedLoggingHandler&lt;/code&gt;を利用している。&lt;/p&gt;

&lt;p&gt;標準のエラー:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type appHandler func(http.ResponseWriter, *http.Request) *appError

type appError struct {
        Error   error
        Message string
        Code    int
}

func (fn appHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
        if e := fn(w, r); e != nil { // e is *appError, not os.Error.
                log.Printf(&amp;quot;Handler error: status code: %d, message: %s, underlying err: %#v&amp;quot;,
                        e.Code, e.Message, e.Error)

                http.Error(w, e.Message, e.Code)
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;HTTPリクエストのログ:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Delegate all of the HTTP routing and serving to the gorilla/mux router.
// Log all requests using the standard Apache format.
http.Handle(&amp;quot;/&amp;quot;, handlers.CombinedLoggingHandler(os.Stderr, r))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ログは&lt;a href=&#34;https://console.cloud.google.com/logs/viewer&#34;&gt;ここ&lt;/a&gt;から見れる。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【Go】Go Bookshelf App: Authenticating Users</title>
      <link>http://kotazi.github.io/blog/post/2016/0805_go_authenticating_users/</link>
      <pubDate>Fri, 05 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0805_go_authenticating_users/</guid>
      <description>

&lt;p&gt;OAuth2.0を使ったユーザー認証。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/go/getting-started/authenticate-users&#34;&gt;Authenticating Users with Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h3 id=&#34;web-application-client-idの作成&#34;&gt;Web application client IDの作成&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://console.cloud.google.com/apis/credentials&#34;&gt;credentials&lt;/a&gt;へアクセスし、&lt;code&gt;OAuth consent screen&lt;/code&gt;をクリック。
プロダクト名のところに&lt;code&gt;Go Bookshelf App&lt;/code&gt;と入力し、その他も任意で記入する。&lt;/p&gt;

&lt;p&gt;保存後、&lt;code&gt;Create credentials &amp;gt; OAuth client ID&lt;/code&gt;と移動し、&lt;code&gt;Application type&lt;/code&gt;では&lt;code&gt;Web application&lt;/code&gt;を選択。
&lt;code&gt;Name&lt;/code&gt;は&lt;code&gt;Go Bookshelf Client&lt;/code&gt;。&lt;code&gt;Authorized redirect URIs&lt;/code&gt;にProjectIDに置き換えた値を入れる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://localhost:8080/oauth2callback
http://[YOUR_PROJECT_ID].appspot.com/oauth2callback
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;作成すると、IDとclient secretが表示されるので保存しておくこと。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;前回同様、下記へ移動して&lt;code&gt;config.go&lt;/code&gt;を開く。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd $GOPATH/src/github.com/GoogleCloudPlatform/golang-samples/getting-started/bookshelf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下記のコメントを削除し、clientidとclientsecretを先ほどの値に置き換える。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// oauthConfig = configureOAuthClient(&amp;quot;clientid&amp;quot;, &amp;quot;clientsecret&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;app/app.yaml&lt;/code&gt;を開き、&lt;code&gt;OAUTH2_CALLBACK&lt;/code&gt;のProjectIDを自分のものに置き換える。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;ローカルの立ち上げやデプロイは前回同様。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/go/images/go-auth.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;セッションを扱うために&lt;a href=&#34;http://www.gorillatoolkit.org/&#34;&gt;Gorilla web toolkit&lt;/a&gt;を使っている。
Gorillaはいくつかの&lt;code&gt;Store&lt;/code&gt;インターフェイスを持っているが、今回は&lt;code&gt;CookieStore&lt;/code&gt;を利用。&lt;/p&gt;

&lt;p&gt;認証の仕組みはまず、Googleの認証画面にリダイレクトさせ、そのレスポンスを、ユーザーがアプリケーションに戻る際に処理させるというものである。&lt;/p&gt;

&lt;p&gt;アプリケーションはClientIDとOAuthスコープを使ってURLを生成する。スコープには、アプリケーションがアクセスしようとするユーザー情報が何かということを含む。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;config.go&lt;/code&gt;のこの部分がそれにあたる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func configureOAuthClient(clientID, clientSecret string) *oauth2.Config {
        redirectURL := os.Getenv(&amp;quot;OAUTH2_CALLBACK&amp;quot;)
        if redirectURL == &amp;quot;&amp;quot; {
                redirectURL = &amp;quot;http://localhost:8080/oauth2callback&amp;quot;
        }
        return &amp;amp;oauth2.Config{
                ClientID:     clientID,
                ClientSecret: clientSecret,
                RedirectURL:  redirectURL,
                Scopes:       []string{&amp;quot;email&amp;quot;, &amp;quot;profile&amp;quot;},
                Endpoint:     google.Endpoint,
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;認証が完了するとGoogle認証サービスは&lt;code&gt;/oauth2callback&lt;/code&gt;を通してユーザーをアプリケーションへ戻す。&lt;/p&gt;

&lt;p&gt;認証後はGoogle+ APIが利用できるため&lt;code&gt;plusService.People.Get(&amp;quot;me&amp;quot;)&lt;/code&gt;を使うと認証済みのユーザーの情報が取得できる。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【Go】Go Bookshelf App: Cloud Storage</title>
      <link>http://kotazi.github.io/blog/post/2016/0804_go_cloud_strage/</link>
      <pubDate>Thu, 04 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0804_go_cloud_strage/</guid>
      <description>

&lt;p&gt;続いて、&lt;a href=&#34;https://cloud.google.com/go/getting-started/using-cloud-storage&#34;&gt;&amp;ldquo;Using Cloud Storage with Go&amp;rdquo;&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&#34;cloud-storageの作成&#34;&gt;Cloud Storageの作成&lt;/h3&gt;

&lt;p&gt;下記コマンドでCloud Storageを作成する。&lt;br /&gt;
実はどんな名前でもいいんだけど、ProjectIDに合わせておくのがよい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;❯❯❯ gsutil mb gs://*****-***-kotazi                                            
Creating gs://*****-***-kotazi/...
~/R/blog ❯❯❯ gsutil defacl set public-read gs://*****-***-kotazi
Setting default object ACL on gs://*****-***-kotazi/...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;configuring-settings&#34;&gt;Configuring settings&lt;/h3&gt;

&lt;p&gt;プロジェクトルートへ移動して&lt;code&gt;config.go&lt;/code&gt;を開く。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd $GOPATH/src/github.com/GoogleCloudPlatform/golang-samples/getting-started/bookshelf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下記部分のコメントを消して、バケット名に書き換える。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// StorageBucket, err = configureStorage(&amp;quot;&amp;lt;your-storage-bucket&amp;gt;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ローカル立ち上げやデプロイの方法はさっきと同じ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/go/images/go-binary-data.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;今回で言うと本棚の画像をCloud Storage側におけるようになる。そのためのコードが下記。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;getting-started/bookshelf/app/app.go&lt;/code&gt;の&lt;code&gt;uploadFileFromForm&lt;/code&gt;関数。
この関数の中で画像があるかないかをチェックした折、あればCloud Storageにアップロードする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// uploadFileFromForm uploads a file if it&#39;s present in the &amp;quot;image&amp;quot; form field.
func uploadFileFromForm(r *http.Request) (url string, err error) {
        f, fh, err := r.FormFile(&amp;quot;image&amp;quot;)
        if err == http.ErrMissingFile {
                return &amp;quot;&amp;quot;, nil
        }
        if err != nil {
                return &amp;quot;&amp;quot;, err
        }

        if bookshelf.StorageBucket == nil {
                return &amp;quot;&amp;quot;, errors.New(&amp;quot;storage bucket is missing - check config.go&amp;quot;)
        }

        // random filename, retaining existing extension.
        name := uuid.NewV4().String() + path.Ext(fh.Filename)

        ctx := context.Background()
        w := bookshelf.StorageBucket.Object(name).NewWriter(ctx)
        w.ACL = []storage.ACLRule{{Entity: storage.AllUsers, Role: storage.RoleReader}}
        w.ContentType = fh.Header.Get(&amp;quot;Content-Type&amp;quot;)

        // Entries are immutable, be aggressive about caching (1 day).
        w.CacheControl = &amp;quot;public, max-age=86400&amp;quot;

        if _, err := io.Copy(w, f); err != nil {
                return &amp;quot;&amp;quot;, err
        }
        if err := w.Close(); err != nil {
                return &amp;quot;&amp;quot;, err
        }

        const publicURL = &amp;quot;https://storage.googleapis.com/%s/%s&amp;quot;
        return fmt.Sprintf(publicURL, bookshelf.StorageBucketName, name), nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;uploadFileFromForm&lt;/code&gt;の呼び出しは&lt;code&gt;app.go&lt;/code&gt;の&lt;code&gt;bookFromForm&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// bookFromForm populates the fields of a Book from form values
// (see templates/edit.html).
func bookFromForm(r *http.Request) (*bookshelf.Book, error) {
        imageURL, err := uploadFileFromForm(r)
        if err != nil {
                return nil, fmt.Errorf(&amp;quot;could not upload file: %v&amp;quot;, err)
        }
        if imageURL == &amp;quot;&amp;quot; {
                imageURL = r.FormValue(&amp;quot;imageURL&amp;quot;)
        }

        book := &amp;amp;bookshelf.Book{
                Title:         r.FormValue(&amp;quot;title&amp;quot;),
                Author:        r.FormValue(&amp;quot;author&amp;quot;),
                PublishedDate: r.FormValue(&amp;quot;publishedDate&amp;quot;),
                ImageURL:      imageURL,
                Description:   r.FormValue(&amp;quot;description&amp;quot;),
                CreatedBy:     r.FormValue(&amp;quot;createdBy&amp;quot;),
                CreatedByID:   r.FormValue(&amp;quot;createdByID&amp;quot;),
        }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>【Go】Go Bookshelf App: Datastore</title>
      <link>http://kotazi.github.io/blog/post/2016/0803_go_nosql/</link>
      <pubDate>Wed, 03 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0803_go_nosql/</guid>
      <description>

&lt;p&gt;GCPのGoのチュートリアルの概要。&lt;br /&gt;
とりあえずDatastoreでやってみることに。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/go/getting-started/using-structured-data&#34;&gt;Using Structured Data with Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;先ほどクローンしたコードの編集を加える。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd $GOPATH/src/github.com/GoogleCloudPlatform/golang-samples/getting-started/bookshelf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;config.go&lt;/code&gt;を開き、下記部分のコメントを消して、自分のプロジェクトIDに置き換える。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// DB, err = configureDatastoreDB(&amp;quot;projectid&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ローカルマシンで起動&#34;&gt;ローカルマシンで起動&lt;/h3&gt;

&lt;p&gt;下記コマンドでローカルマシンを立ち上げる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;cd app
go run app.go auth.go template.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;アプリケーションの動作を確認できる。&lt;/p&gt;

&lt;h3 id=&#34;デプロイする&#34;&gt;デプロイする&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;app&lt;/code&gt;ディレクトリ内で下記のコマンド。&lt;code&gt;https://[YOUR_PROJECT_ID].appspot.com&lt;/code&gt;でアクセス可能。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aedeploy gcloud app deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;アプリを更新する場合、同じコマンドをを使えばバージョンを更新できる。
新しくデプロイすると新しいバージョンが作られる。&lt;/p&gt;

&lt;p&gt;古いバージョンも残り続けるので課金対象にしたくなければ削除するのがいい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://console.cloud.google.com/appengine/versions&#34;&gt;バージョンページ&lt;/a&gt;から削除できる。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/go/images/go-datastore.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;getting-started/bookshelf/db_datastore.go&lt;/code&gt;の&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// AddBook saves a given book, assigning it a new ID.
func (db *datastoreDB) AddBook(b *Book) (id int64, err error) {
        ctx := context.Background()
        k := datastore.NewIncompleteKey(ctx, &amp;quot;Book&amp;quot;, nil)
        k, err = db.client.Put(ctx, k, b)
        if err != nil {
                return 0, fmt.Errorf(&amp;quot;datastoredb: could not put Book: %v&amp;quot;, err)
        }
        return k.ID(), nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この辺りがDatastoreに保存する処理。&lt;/p&gt;

&lt;p&gt;ちなみに&lt;code&gt;:=&lt;/code&gt;は変数宣言と代入を行っている。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【Go】Go Bookshelf App: 概要</title>
      <link>http://kotazi.github.io/blog/post/2016/0802_go_bookshelf/</link>
      <pubDate>Tue, 02 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0802_go_bookshelf/</guid>
      <description>

&lt;p&gt;GCPのGoのチュートリアルの概要。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/go/getting-started/tutorial-app&#34;&gt;Go Bookshelf App&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h5 id=&#34;機能&#34;&gt;機能:&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;リストの閲覧、追加、削除&lt;/li&gt;
&lt;li&gt;詳細の編集&lt;/li&gt;
&lt;li&gt;カバー画像のアップロード&lt;/li&gt;
&lt;li&gt;Googleアカウントでのログインと、追加した本の確認&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;目標&#34;&gt;目標:&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;サンプルアプリケーションのクローン&lt;/li&gt;
&lt;li&gt;ローカルでの起動&lt;/li&gt;
&lt;li&gt;GAE環境へのデプロイ&lt;/li&gt;
&lt;li&gt;サンプルコードを読む&lt;/li&gt;
&lt;li&gt;データ構造のストアについて&lt;/li&gt;
&lt;li&gt;Google Cloud Storeでのバイナリデータのストアについて&lt;/li&gt;
&lt;li&gt;ユーザー認証について&lt;/li&gt;
&lt;li&gt;GCP Consoleで確認するイベントログについて&lt;/li&gt;
&lt;li&gt;バックグラウンドワーカーにタスクを送るGoogle Cloud Pub/Subの使い方&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;手順&#34;&gt;手順:&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;https://console.cloud.google.com/project?_ga=1.189765870.459013261.1468980200&#34;&gt;ここ&lt;/a&gt;からGCP Console Projectを選択/生成する。
&lt;a href=&#34;https://support.google.com/cloud/answer/6293499#enable-billing&#34;&gt;ここ&lt;/a&gt;を見て課金を有効にする。
さらに、&lt;a href=&#34;https://cloud.google.com/sdk/docs/&#34;&gt;Cloud SDK&lt;/a&gt;のインストール。&lt;/p&gt;

&lt;p&gt;それができたら、下記コマンドで&lt;code&gt;gcloud&lt;/code&gt;認証&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gcloud init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;成功すると&lt;a href=&#34;https://cloud.google.com/sdk/auth_success&#34;&gt;ここ&lt;/a&gt;へ飛ぶ。(gcloudのチュートリアルあるから読んでみてみいいかも。)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://console.cloud.google.com/flows/enableapi?apiid=datastore.googleapis.com,datastore,pubsub,storage_api,logging,plus&amp;amp;_ga=1.180912098.459013261.1468980200&#34;&gt;ここ&lt;/a&gt;からDatastore、Cloud Pub/Sub, Cloud Storage JSON, Cloud Logging, Google+ APIsを利用できるようにする&lt;/p&gt;

&lt;p&gt;続いて、アカウントを確認&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/R/s/gcp ❯❯❯ gcloud config list
Your active configuration is: [default]

[core]
account = kotazi@*****.com
disable_usage_reporting = False
project = ********
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;必要に応じて、自分で設定もできる&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gcloud config set project [YOUR_PROJECT_ID]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;サンプルリポジトリのクローンします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get -u -d github.com/GoogleCloudPlatform/golang-samples/getting-started/bookshelf/app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;aedeploy&lt;/code&gt;コマンドをインストールする&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get -u google.golang.org/appengine/cmd/aedeploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上で準備が完了。&lt;/p&gt;

&lt;p&gt;ここからGoogle Cloud Platformのさまざまな機能を試していく。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Atomic Design覚書</title>
      <link>http://kotazi.github.io/blog/post/2016/0801_atomic_design/</link>
      <pubDate>Mon, 01 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0801_atomic_design/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://atomicdesign.bradfrost.com/&#34;&gt;Atomic Design&lt;/a&gt;について少し学んだので覚えているうちにメモにまとめよう。&lt;/p&gt;

&lt;h2 id=&#34;atomic-design&#34;&gt;Atomic Design&lt;/h2&gt;

&lt;p&gt;Atomic Designは性質の異なる5つのステージによって構成される方法論である。
これらのステージはよく考えられたインターフェイスデザインシステムを作り出す。&lt;/p&gt;

&lt;h3 id=&#34;atoms-原子&#34;&gt;Atoms(原子)&lt;/h3&gt;

&lt;p&gt;原子が物質の基本的な構成要素であるならば、ユーザーインターフェイスを構成する基本的な要素である。
それゆえラベルやインプット、ボタンなどのそれ以上分解できない基本的なHTMLタグなどが含まれる。&lt;/p&gt;

&lt;p&gt;それに加えて、フォントスタックやカラーパレット、またはアニメーションなどの抽象的な要素も含まれる。&lt;/p&gt;

&lt;h3 id=&#34;molecules-分子&#34;&gt;Molecules(分子)&lt;/h3&gt;

&lt;p&gt;比較的シンプルな単一機能のUI要素。
例えば、フォーム用のラベルと、検索用インプットと、それようのサーチボタンなど。&lt;/p&gt;

&lt;h3 id=&#34;organisms-有機体&#34;&gt;Organisms(有機体)&lt;/h3&gt;

&lt;p&gt;比較的複雑なUIコンポーネントであり、分子や原子などが合わさったり合わさらなかったりして構成される。&lt;/p&gt;

&lt;h3 id=&#34;templates&#34;&gt;Templates&lt;/h3&gt;

&lt;p&gt;ページレベルのオブジェクトであり、コンポーネントをレイアウトに配置し、設計の基礎となるコンテンツの構造を明確にする。&lt;br /&gt;
ワイヤーフレームのような印象。&lt;/p&gt;

&lt;h3 id=&#34;pages&#34;&gt;Pages&lt;/h3&gt;

&lt;p&gt;ページは特有のテンプレートのインスタンスであり、リアルなコンテンツでプレースホルダーを置き換える。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;良いけどうまくまとめられん。&lt;/p&gt;

&lt;p&gt;思想は良いけど、実際のワークフローにどのように組み込むかが大切で、
しっかりそれについても書いてくれているんだけれども、
今のチームの既存のデザインワークフローを知らないのでなんとも言えない。&lt;/p&gt;

&lt;p&gt;また機が来たら向き合おう。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>