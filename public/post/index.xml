<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on kotazi.com</title>
    <link>http://kotazi.github.io/blog/post/</link>
    <description>Recent content in Posts on kotazi.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 04 Aug 2016 13:38:10 +0900</lastBuildDate>
    <atom:link href="http://kotazi.github.io/blog/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>【Go】Go Bookshelf App: Cloud Storage</title>
      <link>http://kotazi.github.io/blog/post/2016/0804_go_cloud_strage/</link>
      <pubDate>Thu, 04 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0804_go_cloud_strage/</guid>
      <description>

&lt;p&gt;続いて、&lt;a href=&#34;https://cloud.google.com/go/getting-started/using-cloud-storage&#34;&gt;&amp;ldquo;Using Cloud Storage with Go&amp;rdquo;&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&#34;cloud-storageの作成&#34;&gt;Cloud Storageの作成&lt;/h3&gt;

&lt;p&gt;下記コマンドでCloud Storageを作成する。&lt;br /&gt;
実はどんな名前でもいいんだけど、ProjectIDに合わせておくのがよい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;❯❯❯ gsutil mb gs://*****-***-kotazi                                            
Creating gs://*****-***-kotazi/...
~/R/blog ❯❯❯ gsutil defacl set public-read gs://*****-***-kotazi
Setting default object ACL on gs://*****-***-kotazi/...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;configuring-settings&#34;&gt;Configuring settings&lt;/h3&gt;

&lt;p&gt;プロジェクトルートへ移動して&lt;code&gt;config.go&lt;/code&gt;を開く。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd $GOPATH/src/github.com/GoogleCloudPlatform/golang-samples/getting-started/bookshelf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下記部分のコメントを消して、バケット名に書き換える。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// StorageBucket, err = configureStorage(&amp;quot;&amp;lt;your-storage-bucket&amp;gt;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ローカル立ち上げやデプロイの方法はさっきと同じ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/go/images/go-binary-data.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;今回で言うと本棚の画像をCloud Storage側におけるようになる。そのためのコードが下記。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;getting-started/bookshelf/app/app.go&lt;/code&gt;の&lt;code&gt;uploadFileFromForm&lt;/code&gt;関数。
この関数の中で画像があるかないかをチェックした折、あればCloud Storageにアップロードする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// uploadFileFromForm uploads a file if it&#39;s present in the &amp;quot;image&amp;quot; form field.
func uploadFileFromForm(r *http.Request) (url string, err error) {
        f, fh, err := r.FormFile(&amp;quot;image&amp;quot;)
        if err == http.ErrMissingFile {
                return &amp;quot;&amp;quot;, nil
        }
        if err != nil {
                return &amp;quot;&amp;quot;, err
        }

        if bookshelf.StorageBucket == nil {
                return &amp;quot;&amp;quot;, errors.New(&amp;quot;storage bucket is missing - check config.go&amp;quot;)
        }

        // random filename, retaining existing extension.
        name := uuid.NewV4().String() + path.Ext(fh.Filename)

        ctx := context.Background()
        w := bookshelf.StorageBucket.Object(name).NewWriter(ctx)
        w.ACL = []storage.ACLRule{{Entity: storage.AllUsers, Role: storage.RoleReader}}
        w.ContentType = fh.Header.Get(&amp;quot;Content-Type&amp;quot;)

        // Entries are immutable, be aggressive about caching (1 day).
        w.CacheControl = &amp;quot;public, max-age=86400&amp;quot;

        if _, err := io.Copy(w, f); err != nil {
                return &amp;quot;&amp;quot;, err
        }
        if err := w.Close(); err != nil {
                return &amp;quot;&amp;quot;, err
        }

        const publicURL = &amp;quot;https://storage.googleapis.com/%s/%s&amp;quot;
        return fmt.Sprintf(publicURL, bookshelf.StorageBucketName, name), nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;uploadFileFromForm&lt;/code&gt;の呼び出しは&lt;code&gt;app.go&lt;/code&gt;の&lt;code&gt;bookFromForm&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// bookFromForm populates the fields of a Book from form values
// (see templates/edit.html).
func bookFromForm(r *http.Request) (*bookshelf.Book, error) {
        imageURL, err := uploadFileFromForm(r)
        if err != nil {
                return nil, fmt.Errorf(&amp;quot;could not upload file: %v&amp;quot;, err)
        }
        if imageURL == &amp;quot;&amp;quot; {
                imageURL = r.FormValue(&amp;quot;imageURL&amp;quot;)
        }

        book := &amp;amp;bookshelf.Book{
                Title:         r.FormValue(&amp;quot;title&amp;quot;),
                Author:        r.FormValue(&amp;quot;author&amp;quot;),
                PublishedDate: r.FormValue(&amp;quot;publishedDate&amp;quot;),
                ImageURL:      imageURL,
                Description:   r.FormValue(&amp;quot;description&amp;quot;),
                CreatedBy:     r.FormValue(&amp;quot;createdBy&amp;quot;),
                CreatedByID:   r.FormValue(&amp;quot;createdByID&amp;quot;),
        }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>【Go】Go Bookshelf App: Datastore</title>
      <link>http://kotazi.github.io/blog/post/2016/0803_go_nosql/</link>
      <pubDate>Wed, 03 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0803_go_nosql/</guid>
      <description>

&lt;p&gt;GCPのGoのチュートリアルの概要。&lt;br /&gt;
とりあえずDatastoreでやってみることに。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/go/getting-started/using-structured-data&#34;&gt;Using Structured Data with Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;先ほどクローンしたコードの編集を加える。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd $GOPATH/src/github.com/GoogleCloudPlatform/golang-samples/getting-started/bookshelf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;config.go&lt;/code&gt;を開き、下記部分のコメントを消して、自分のプロジェクトIDに置き換える。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// DB, err = configureDatastoreDB(&amp;quot;projectid&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ローカルマシンで起動&#34;&gt;ローカルマシンで起動&lt;/h3&gt;

&lt;p&gt;下記コマンドでローカルマシンを立ち上げる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;cd app
go run app.go auth.go template.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;アプリケーションの動作を確認できる。&lt;/p&gt;

&lt;h3 id=&#34;デプロイする&#34;&gt;デプロイする&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;app&lt;/code&gt;ディレクトリ内で下記のコマンド。&lt;code&gt;https://[YOUR_PROJECT_ID].appspot.com&lt;/code&gt;でアクセス可能。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aedeploy gcloud app deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;アプリを更新する場合、同じコマンドをを使えばバージョンを更新できる。
新しくデプロイすると新しいバージョンが作られる。&lt;/p&gt;

&lt;p&gt;古いバージョンも残り続けるので課金対象にしたくなければ削除するのがいい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://console.cloud.google.com/appengine/versions&#34;&gt;バージョンページ&lt;/a&gt;から削除できる。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/go/images/go-datastore.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;getting-started/bookshelf/db_datastore.go&lt;/code&gt;の&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// AddBook saves a given book, assigning it a new ID.
func (db *datastoreDB) AddBook(b *Book) (id int64, err error) {
        ctx := context.Background()
        k := datastore.NewIncompleteKey(ctx, &amp;quot;Book&amp;quot;, nil)
        k, err = db.client.Put(ctx, k, b)
        if err != nil {
                return 0, fmt.Errorf(&amp;quot;datastoredb: could not put Book: %v&amp;quot;, err)
        }
        return k.ID(), nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この辺りがDatastoreに保存する処理。&lt;/p&gt;

&lt;p&gt;ちなみに&lt;code&gt;:=&lt;/code&gt;は変数宣言と代入を行っている。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>0809_go_pub_sub</title>
      <link>http://kotazi.github.io/blog/post/2016/0809_go_pub_sub/</link>
      <pubDate>Tue, 02 Aug 2016 17:41:51 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0809_go_pub_sub/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/go/getting-started/using-pub-sub&#34;&gt;Using Cloud Pub/Sub with Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.google.com/books/&#34;&gt;Google Book API&lt;/a&gt;を使ってバックグラウンドワーカーに処理をさせる。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;前回同様、&lt;code&gt;config.go&lt;/code&gt;から下記部分のコメントを削除し、ProjectIDを書き換える。&lt;/p&gt;

&lt;p&gt;ローカルホストを立ち上げた状態で下記のコマンドでバックグラウンドワーカーが動く。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd $GOPATH/src/github.com/GoogleCloudPlatform/golang-samples/getting-started/bookshelf
cd pubsub_worker
PORT=8081 go run worker.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;http://localhost:8081/&lt;/code&gt;でワーカーインスタンスに立直できる。
処理した本の数についてのステータスが確認できる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.evernote.com/l/Aj24JXT3jO1BGJQHmgGX0QAoHCxcg56AdDIB/image.png&#34; alt=&#34;Pasted%20Image%208/3/16,%2011:14&#34; /&gt;&lt;/p&gt;

&lt;p&gt;↑ 「イノベーションのジレンマ」とタイトルをいれると勝手に入る&lt;/p&gt;

&lt;h3 id=&#34;デプロイする&#34;&gt;デプロイする&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ cd $GOPATH/src/github.com/GoogleCloudPlatform/golang-samples/getting-started/bookshelf

# Deploy the worker
cd pubsub_worker
aedeploy gcloud app deploy

# Deploy the main app
cd ../app
aedeploy gcloud app deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下記がアクセス先になる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://[YOUR_PROJECT_ID].appspot.com
https://worker-dot-[YOUR_PROJECT_ID].appspot.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/go/images/go-pub-sub.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;データベース内で本が更新されるとCloud Pub/Subが走る。
ワーカーは分離して稼働していて、これらのイベントをリッスンしている。
イベントを受け取るとワーカーkはBooksAPIにリクエストを作成し、データベースの本の記録を更新する。&lt;/p&gt;

&lt;p&gt;以上。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【Go】Go Bookshelf App: 概要</title>
      <link>http://kotazi.github.io/blog/post/2016/0802_go_bookshelf/</link>
      <pubDate>Tue, 02 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0802_go_bookshelf/</guid>
      <description>

&lt;p&gt;GCPのGoのチュートリアルの概要。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/go/getting-started/tutorial-app&#34;&gt;Go Bookshelf App&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h5 id=&#34;機能&#34;&gt;機能:&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;リストの閲覧、追加、削除&lt;/li&gt;
&lt;li&gt;詳細の編集&lt;/li&gt;
&lt;li&gt;カバー画像のアップロード&lt;/li&gt;
&lt;li&gt;Googleアカウントでのログインと、追加した本の確認&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;目標&#34;&gt;目標:&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;サンプルアプリケーションのクローン&lt;/li&gt;
&lt;li&gt;ローカルでの起動&lt;/li&gt;
&lt;li&gt;GAE環境へのデプロイ&lt;/li&gt;
&lt;li&gt;サンプルコードを読む&lt;/li&gt;
&lt;li&gt;データ構造のストアについて&lt;/li&gt;
&lt;li&gt;Google Cloud Storeでのバイナリデータのストアについて&lt;/li&gt;
&lt;li&gt;ユーザー認証について&lt;/li&gt;
&lt;li&gt;GCP Consoleで確認するイベントログについて&lt;/li&gt;
&lt;li&gt;バックグラウンドワーカーにタスクを送るGoogle Cloud Pub/Subの使い方&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;手順&#34;&gt;手順:&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;https://console.cloud.google.com/project?_ga=1.189765870.459013261.1468980200&#34;&gt;ここ&lt;/a&gt;からGCP Console Projectを選択/生成する。
&lt;a href=&#34;https://support.google.com/cloud/answer/6293499#enable-billing&#34;&gt;ここ&lt;/a&gt;を見て課金を有効にする。
さらに、&lt;a href=&#34;https://cloud.google.com/sdk/docs/&#34;&gt;Cloud SDK&lt;/a&gt;のインストール。&lt;/p&gt;

&lt;p&gt;それができたら、下記コマンドで&lt;code&gt;gcloud&lt;/code&gt;認証&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gcloud init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;成功すると&lt;a href=&#34;https://cloud.google.com/sdk/auth_success&#34;&gt;ここ&lt;/a&gt;へ飛ぶ。(gcloudのチュートリアルあるから読んでみてみいいかも。)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://console.cloud.google.com/flows/enableapi?apiid=datastore.googleapis.com,datastore,pubsub,storage_api,logging,plus&amp;amp;_ga=1.180912098.459013261.1468980200&#34;&gt;ここ&lt;/a&gt;からDatastore、Cloud Pub/Sub, Cloud Storage JSON, Cloud Logging, Google+ APIsを利用できるようにする&lt;/p&gt;

&lt;p&gt;続いて、アカウントを確認&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/R/s/gcp ❯❯❯ gcloud config list
Your active configuration is: [default]

[core]
account = kotazi@*****.com
disable_usage_reporting = False
project = ********
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;必要に応じて、自分で設定もできる&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gcloud config set project [YOUR_PROJECT_ID]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;サンプルリポジトリのクローンします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get -u -d github.com/GoogleCloudPlatform/golang-samples/getting-started/bookshelf/app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;aedeploy&lt;/code&gt;コマンドをインストールする&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get -u google.golang.org/appengine/cmd/aedeploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上で準備が完了。&lt;/p&gt;

&lt;p&gt;ここからGoogle Cloud Platformのさまざまな機能を試していく。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Atomic Design覚書</title>
      <link>http://kotazi.github.io/blog/post/2016/0801_atomic_design/</link>
      <pubDate>Mon, 01 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0801_atomic_design/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://atomicdesign.bradfrost.com/&#34;&gt;Atomic Design&lt;/a&gt;について少し学んだので覚えているうちにメモにまとめよう。&lt;/p&gt;

&lt;h2 id=&#34;atomic-design&#34;&gt;Atomic Design&lt;/h2&gt;

&lt;p&gt;Atomic Designは性質の異なる5つのステージによって構成される方法論である。
これらのステージはよく考えられたインターフェイスデザインシステムを作り出す。&lt;/p&gt;

&lt;h3 id=&#34;atoms-原子&#34;&gt;Atoms(原子)&lt;/h3&gt;

&lt;p&gt;原子が物質の基本的な構成要素であるならば、ユーザーインターフェイスを構成する基本的な要素である。
それゆえラベルやインプット、ボタンなどのそれ以上分解できない基本的なHTMLタグなどが含まれる。&lt;/p&gt;

&lt;p&gt;それに加えて、フォントスタックやカラーパレット、またはアニメーションなどの抽象的な要素も含まれる。&lt;/p&gt;

&lt;h3 id=&#34;molecules-分子&#34;&gt;Molecules(分子)&lt;/h3&gt;

&lt;p&gt;比較的シンプルな単一機能のUI要素。
例えば、フォーム用のラベルと、検索用インプットと、それようのサーチボタンなど。&lt;/p&gt;

&lt;h3 id=&#34;organisms-有機体&#34;&gt;Organisms(有機体)&lt;/h3&gt;

&lt;p&gt;比較的複雑なUIコンポーネントであり、分子や原子などが合わさったり合わさらなかったりして構成される。&lt;/p&gt;

&lt;h3 id=&#34;templates&#34;&gt;Templates&lt;/h3&gt;

&lt;p&gt;ページレベルのオブジェクトであり、コンポーネントをレイアウトに配置し、設計の基礎となるコンテンツの構造を明確にする。&lt;br /&gt;
ワイヤーフレームのような印象。&lt;/p&gt;

&lt;h3 id=&#34;pages&#34;&gt;Pages&lt;/h3&gt;

&lt;p&gt;ページは特有のテンプレートのインスタンスであり、リアルなコンテンツでプレースホルダーを置き換える。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;良いけどうまくまとめられん。&lt;/p&gt;

&lt;p&gt;思想は良いけど、実際のワークフローにどのように組み込むかが大切で、
しっかりそれについても書いてくれているんだけれども、
今のチームの既存のデザインワークフローを知らないのでなんとも言えない。&lt;/p&gt;

&lt;p&gt;また機が来たら向き合おう。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【読書】イノベーションへの解</title>
      <link>http://kotazi.github.io/blog/post/2016/0701_innovation/</link>
      <pubDate>Sat, 30 Jul 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0701_innovation/</guid>
      <description>

&lt;p&gt;&lt;a  href=&#34;https://www.amazon.co.jp/gp/product/4798104930/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4798104930&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;イノベーションへの解 利益ある成長に向けて (Harvard business school press)&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=kotazi-22&amp;l=as2&amp;o=9&amp;a=4798104930&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;を読みました。&lt;/p&gt;

&lt;hr&gt;

&lt;ul&gt;
&lt;li&gt;第一章 成長という至上命令&lt;/li&gt;
&lt;li&gt;第二章 最強の競合企業を打ち負かす方法&lt;/li&gt;
&lt;li&gt;第三章 顧客が求める製品とは&lt;/li&gt;
&lt;li&gt;第四章 自社製品にとって最高の顧客とは&lt;/li&gt;
&lt;li&gt;第五章 事業範囲を適切に定める&lt;/li&gt;
&lt;li&gt;第六章 コモディティ化をいかにして回避するか&lt;/li&gt;
&lt;li&gt;第七章 破壊的成長能力を持つ組織とは&lt;/li&gt;
&lt;li&gt;第八章 戦略策定プロセスのマネジメント&lt;/li&gt;
&lt;li&gt;第九章 良い金もあれば悪い金もある&lt;/li&gt;
&lt;li&gt;第十章 新成長の創出における上級役員の役割&lt;/li&gt;
&lt;li&gt;終章 バトンタッチ&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;前作の「イノベーションのジレンマ」が超良書だとすると、こちらの本は良書といった印象。&lt;br /&gt;
というか、対象とする企業が大きくなりすぎて少し遠く感じてしまったかもしれない。&lt;/p&gt;

&lt;h5 id=&#34;第一章-成長という至上命令&#34;&gt;第一章 成長という至上命令&lt;/h5&gt;

&lt;p&gt;本書のテーマはビジネスにおける新たな成長を生み出す方法である。どんな企業も成長という至上命令からは免れない。
投資家は「企業の&lt;strong&gt;予測&lt;/strong&gt;成長率を株式の&lt;strong&gt;現在&lt;/strong&gt;価値に織り込む」という性向を持つ。そのため、株価を動かすのは成長の方向性ではなく、予想外の変化である。株価を引き上げるためには市場予測を上回る早さで成長する必要があり、これは株主価値の増大に気を配る経営者にとっては重圧となる。&lt;/p&gt;

&lt;h5 id=&#34;第二章-最強の競合企業を打ち負かす方法&#34;&gt;第二章 最強の競合企業を打ち負かす方法&lt;/h5&gt;

&lt;p&gt;どうすれば最強の競合企業を打ち負かすことができるのか。&lt;br /&gt;
前作でもイノベーションの状況を、持続的イノベーションと破壊的イノベーションに区別した。
持続的イノベーションにおいては既存企業がほぼ必ず勝つため、新興企業が実績のある競合を打ち負かすための最良の手段は、破壊的戦略をとること。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.evernote.com/l/Aj0M-nf2PMFFv6asgzy9bEYOkhvRnyKg5PsB/image.png&#34; alt=&#34;Pasted%20Image%207/19/16,%2010:05&#34; /&gt;&lt;/p&gt;

&lt;p&gt;また、上図のように第三次元に新しいバリューネットワークを生み出す破壊を&lt;strong&gt;新市場型破壊&lt;/strong&gt;、本来のバリューネットワークのローエンドにいる顧客を攻略する破壊を&lt;strong&gt;ローエンド型破壊&lt;/strong&gt;と呼ぶ。&lt;/p&gt;

&lt;p&gt;破壊とは理論であり、競争の帰結が状況に応じてどのように変化するかを、高い精度で予測できる、因果関係を示す概念モデル。&lt;/p&gt;

&lt;p&gt;(章末にある各企業や製品の破壊的戦略の概要がすごくいい。)&lt;/p&gt;

&lt;h5 id=&#34;第三章-顧客が求める製品とは&#34;&gt;第三章 顧客が求める製品とは&lt;/h5&gt;

&lt;p&gt;破壊的戦略を実行するためにどのような製品を開発すべきか。ターゲットとすべき市場は？&lt;/p&gt;

&lt;p&gt;あらゆる企業が製品の企画や開発に取り組むが、総計すると資金の3/4が商業的に成り立たない製品を生み出す結果に終わっている。市場細分化のプロセスには&lt;strong&gt;状況&lt;/strong&gt;に即した市場分野の定義が欠かせない。&lt;/p&gt;

&lt;p&gt;以下引用。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;本書ではまず、一般的なアプローチとは若干異なる、市場細分化の考え方について説明する。顧客が特定の「用事」を片付けるために製品を「雇う」、という考えに基づくこの手法を用いれば、顧客が現実に生活を送る様子を正確に映し出すような形で、市場の細分化をすることができる。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;持続的向上を進める間も特定の用事に結びついたままでいること、そして顧客を雇うべき製品に誘導する目的ブランドを構築することが、破壊的製品を成長軌跡上に留める唯一の方法。(マーケティングを考えると、データが入手可能な区分によって市場を細分化してしまいがちだが、そのために真のニーズを見失ってはいけない。顧客が片付けようとしている用事を考えよう。)&lt;/p&gt;

&lt;h5 id=&#34;第四章-自社製品にとって最高の顧客とは&#34;&gt;第四章 自社製品にとって最高の顧客とは&lt;/h5&gt;

&lt;p&gt;最も発展性のある基盤となるのはどのような顧客か。&lt;/p&gt;

&lt;p&gt;破壊的イノベーションにとって理想的な顧客や用途市場を探すためのテンプレートを下記に引用する。&lt;/p&gt;

&lt;p&gt;１．標的顧客はある用事を片付けようとしているが、金やスキルをもたないため、解決策を手に入れられずにいる。&lt;br /&gt;
２．このような顧客は、破壊的製品をまったく何も持たない状態と比較する。そのため、本来のバリューネットワークのなかで、高いスキルを持つ人々に高い価格で販売されている製品ほど性能が良くなくても、喜んで購入する。こうした新市場顧客を喜ばせるための性能ハードルは、かなり低い。&lt;br /&gt;
３．破壊を実現する技術の中には、非常に高度なものもある。だが、破壊者はその技術を利用して、誰でも購入し利用できる、シンプルで便利な製品をつくる。製品が新たな成長を生み出すのは、「誰でも使える」からこそだ。金やスキルをそれほど持たない人々でも消費を始められるのだ。&lt;br /&gt;
４．破壊的イノベーションは、まったく新しいバリューネットワークを生み出す。新しい顧客は新しいチャネル経由で製品を購入し、それまでと違った場で利用することが多い。&lt;/p&gt;

&lt;p&gt;あなたの会社にとって理想の顧客とは、あなたのバリューネットワークに属するすべての存在にとって魅力的で、彼らに力を合わせてこの機会を追求する意欲を与えるような顧客。理想顧客に的を絞るためにこのプロセスを注意深くマネジメントすれば、新成長ベンチャーは将来の成長のための確固たる基盤を手に入れられる。&lt;/p&gt;

&lt;h5 id=&#34;第五章-事業範囲を適切に定める&#34;&gt;第五章 事業範囲を適切に定める&lt;/h5&gt;

&lt;p&gt;製品の設計、生産、販売、流通。どれを社内で行い、どれを社外に任せるべきか。
一般的にはコアコンピタンス(中核的な能力)は社内に残し、コアコンピタンスに結びつかない業務は外部の専門業者に委託すべきだという。&lt;/p&gt;

&lt;p&gt;製品の機能性と信頼性が顧客ニーズを満たすほど十分でない状況では、独自のアーキテクチャを持ち、統合されている企業が有利。
だが機能性と信頼性が十分以上になるとスピードとレスポンスが求められるようになり、その段階では特化型の専門企業、つまり
相互作用の方式がモジュール型のアーキテクチャと業界標準によって定義されている企業が優位に立つ。&lt;/p&gt;

&lt;h5 id=&#34;第六章-コモディティ化をいかにして回避するか&#34;&gt;第六章 コモディティ化をいかにして回避するか&lt;/h5&gt;

&lt;p&gt;どうすれば競争優位を確実に維持できるか。魅力ある利益を維持するためには何をすればいいか。&lt;/p&gt;

&lt;p&gt;どれほどの驚異的なイノベーションも、いつかは必ずコモディティ化される運命にあると観念している経営者は多い。
世界初の3.5インチディスクドライブは1992年、メーカーに60%の粗利率をもたらす価格で販売された。
だが、最近では60倍も優れたものが15%の粗利を出すことに苦心している。&lt;/p&gt;

&lt;p&gt;そもそもコモディティ化は悪鬼のステップによって起こる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;新しい市場が生まれ、ある企業が顧客にニーズに近い独自製品を開発し魅力的な利益を得る。&lt;/li&gt;
&lt;li&gt;競争相手より優位に立とうとし、顧客の求める機能性と信頼性を追い抜いてしまう&lt;/li&gt;
&lt;li&gt;その結果、その階層の競争基盤の変化が促され&amp;hellip;&lt;/li&gt;
&lt;li&gt;モジュール型アーキテクチャへの変化が促され&amp;hellip;&lt;/li&gt;
&lt;li&gt;産業の非統合化が進み&amp;hellip;&lt;/li&gt;
&lt;li&gt;製品の性能やコスト面で競合企業との差別化を図ることが困難になる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;コモディティ化と脱コモディティ化のプロセスは、どちらもコアではなく周辺部で始まる。&lt;/p&gt;

&lt;h5 id=&#34;第七章-破壊的成長能力を持つ組織とは&#34;&gt;第七章 破壊的成長能力を持つ組織とは&lt;/h5&gt;

&lt;p&gt;新事業にとって最適な組織構造とは何か。
新成長事業の運営は誰に任せるべきか。&lt;/p&gt;

&lt;p&gt;組織の能力について考えるとき、「資源、プロセス、価値基準」と考えると理解しやすい。&lt;/p&gt;

&lt;p&gt;資源が最も具体的。人材や設備、技術、ブランドに資金や顧客関係などが含まれる。&lt;/p&gt;

&lt;p&gt;資源のインプットを価値の高い製品やサービスに変換するとき、組織は価値を生み出す。
このような変換を実現する、相互作用や連携、意思伝達、意思決定などのパターンが組織のもつ「プロセス」である。&lt;/p&gt;

&lt;p&gt;組織の能力と無能力に影響を与える価値基準。従業員が仕事の優先順位を決定する際に用いる判断基準を指す。&lt;/p&gt;

&lt;p&gt;成長機会に取り組む経営者は、成功に必要な人材や資源があるかどうかを判断しなければならない。
「組織で習慣的に用いられているプロセスは、この新しい課題にふさわしいのか？」「組織の価値基準は、
この実行計画に必要な優先順位を与えるのか？」。この質問に答えなければならない。
課題にあったプロセスや価値基準を持つ組織に有能な人材を配置するよう心を砕くことが、経営者の力点。&lt;/p&gt;

&lt;h5 id=&#34;第八章-戦略策定プロセスのマネジメント&#34;&gt;第八章 戦略策定プロセスのマネジメント&lt;/h5&gt;

&lt;p&gt;必勝戦略の細部を正しく詰めるにはそうすればいいか。&lt;/p&gt;

&lt;p&gt;起業家が最初から正しい戦略を持っていることはめったにない。
当初の戦略に決kがんがあることが判明した場合に備えて、再試行するための資金を残しておくべき。&lt;/p&gt;

&lt;p&gt;つまり、正しい戦略を求めるのではなく、戦略が生み出されるプロセスをマネジメントすることが重要。
資源配分プロセスは意図的戦略と創発的戦略がある。
戦略策定における経営陣の力点は3つあり、第一は組織のコスト構造、つまり価値基準をマネジメントし、理想顧客からの破壊的製品に対する
注文が優先されるように図ること。第二は発見志向計画法、つまり何が有効で何がそうでないかについての学習を加速させる、徹底したプロセスを用いること。
第三は意図的、創発的プロセスが各事業の状況に応じて用いられるよう、油断なく気を配ることである。&lt;/p&gt;

&lt;h5 id=&#34;第九章-良い金もあれば悪い金もある&#34;&gt;第九章 良い金もあれば悪い金もある&lt;/h5&gt;

&lt;p&gt;誰の投資金が成功を促し、誰の資金が命取りになるか。&lt;/p&gt;

&lt;p&gt;「成長を気長に待て、だが利益を待ってはいけない。」&lt;br /&gt;
これは投資を行う人々にも、その資金を受ける人々にも送るメッセージである。&lt;/p&gt;

&lt;h5 id=&#34;第十章-新成長の創出における上級役員の役割&#34;&gt;第十章 新成長の創出における上級役員の役割&lt;/h5&gt;

&lt;p&gt;事業の成長を持続させるために、上級役員はどのような役割を果たさなくてはならないか。&lt;/p&gt;

&lt;p&gt;上級役員がイノベーションのマネジメントにおいて果たすべき役割は4つある。&lt;br /&gt;
第一に、適切な連携プロセスが存在しない場合には、様々な行動や決定を、自ら進んで連携させ無くてはならない。
第二に、部下が新しいコミュニケーション、連携、意思決定のパターンを必要とする新しい課題に直面した時には、
既存プロセスの支配力を崩さなくてはならない。第三に、同じような行動や決定が組織内で繰り返し行われるとき、
経営幹部はこれに関わる従業員の活動を確実に導き連携させるためのプロセスを創りださなくてはならない。
そして第四に、新たな破壊的成長事業を続けざまに立ち上げ育むためには、同時進行する複数のプロセスやビジネスモデルを構築し維持する必要があるため、
上級役員はさまざまな組織の橋渡しを行って、新成長事業での有益な学習を主流部門に還流させ、適切な資源、プロセス、価値基準が適切な状況で用いられる
よう、心を砕かなくてはならない。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;イノベーションのジレンマのあとに読むとよい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【CSS】ECSSまとめ</title>
      <link>http://kotazi.github.io/blog/post/2016/0729_ECSS/</link>
      <pubDate>Thu, 28 Jul 2016 11:57:40 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0729_ECSS/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://ecss.io/&#34;&gt;Enduring CSS&lt;/a&gt;(以下ECSS)についてまとめる。&lt;/p&gt;

&lt;p&gt;ECSSは大規模プロジェクトのためのCSS設計手法だ。考案者は&lt;a href=&#34;https://benfrain.com/&#34;&gt;Ben Frain&lt;/a&gt;。
大規模WebアプリケーションにおけるCSSの記述について根本的なアプローチを定義したいという彼の個人的な要望から生まれている。&lt;/p&gt;

&lt;h3 id=&#34;ecssの要望&#34;&gt;■ ECSSの要望&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;長期にわたって肥大なCSSのメンテナンスを容易にすること&lt;/li&gt;
&lt;li&gt;他に影響を与えずに、コードベースから一部のCSSを取り除けるようにすること&lt;/li&gt;
&lt;li&gt;どんな新しいデザインでも高速に開発することを可能とすること&lt;/li&gt;
&lt;li&gt;ある要素へのプロパティや値の変更が他に意図しない影響を与えないこと&lt;/li&gt;
&lt;li&gt;実装の変更には最小限のツールやワークフローしか必要としないこと&lt;/li&gt;
&lt;li&gt;可能な限り、ユーザーインターフェイス内でのステートの変更を伝達する際などARIAのようなW3C標準をもちいること&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;スケールする際の問題点&#34;&gt;■ スケールする際の問題点&lt;/h3&gt;

&lt;p&gt;プロジェクトの成長に伴いCSSの記述量は増大する。
多くの開発者が加わり、特殊なケースやブラウザ挙動に対応するうちに手に負えなくなってしまう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The CSS Specificity(詳細度)&lt;/li&gt;
&lt;li&gt;セレクタをマークアップで縛ること&lt;/li&gt;
&lt;li&gt;カスケード&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;どれも便利なものであるが、大規模プロジェクトにおいては既存ルールを取り除いたり、
修正したりすることが難しく、新しいルールを適用してしまう。このやり方に頼っていると
コードは不要なルールで溢れかえることになる。&lt;/p&gt;

&lt;h3 id=&#34;その他のcss設計&#34;&gt;■ その他のCSS設計&lt;/h3&gt;

&lt;h4 id=&#34;oocss&#34;&gt;▼ OOCSS&lt;/h4&gt;

&lt;p&gt;これはOOCSSのみならず、Atomic CSSやその他のSRPについても言えることだ。&lt;br /&gt;
OOCSSの最たる主張はコードの重複を取り除くことにあり、その結果CSSがメンテナブルになるというものだ。
本質的にはレゴのピースを組み立てるようなもので、可能な限り再利用し、必要であれば拡張する。&lt;/p&gt;

&lt;p&gt;これはレスポンシブデザインにおいて急所を抱えている。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;blk m-10 fr&amp;quot;&amp;gt;Here I am&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記のように、OOCSS/Atomic CSSでは再利用可能なクラスに分割する。
しかしながら、ビューポートが変更された場合はどうするべきだろう。
例えば別のクラスをつけることもできるが(&lt;code&gt;Mplus-cc2&lt;/code&gt;のような)面倒なことになるし、HTMLが複雑になる。&lt;/p&gt;

&lt;p&gt;さらにはメンテナンスにも問題があり、大規模プロジェクトではメンテナンスは必ず必要になるが、
その段階ではCSSルールの見直しも必要となる。その場合マークアップについているクラスも書き換えが大きく発生する。&lt;/p&gt;

&lt;h4 id=&#34;smaccs&#34;&gt;▼ SMACCS&lt;/h4&gt;

&lt;p&gt;SMACSSはCSSのスケーラブルモジュールアーキテクチャとして標準的なもの。
SMACSSではヴィジュアル面の用語や概念を明確に定義する。
それゆえBase/Layout/Module/State/Themeなどを定義していく。&lt;/p&gt;

&lt;p&gt;よく考えて構成する必要があり、もっと緩いものが欲しかった。&lt;/p&gt;

&lt;h4 id=&#34;bem&#34;&gt;▼ BEM&lt;/h4&gt;

&lt;p&gt;BEM(Block Element Modifier)はネーミングの方法論。&lt;br /&gt;
既存のものからならBEMを選ぶ。BEMの良い点は下記。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;すべての要素に同様の特殊性があること。ある1つのクラスがすべてのエレメントに与えられる。&lt;/li&gt;
&lt;li&gt;HTML構造が結合されていないため、スタイルにセレクタを使わないこと。&lt;/li&gt;
&lt;li&gt;開発ツールやコードエディタ上で、要素の親が何であるかを推論しやすいこと。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;けれどもModifierが適さなかった。&lt;/p&gt;

&lt;h3 id=&#34;ecssのハイライト&#34;&gt;■ ECSSのハイライト&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ビジュアルを分離してよりメンテナブルに&lt;/li&gt;
&lt;li&gt;ファイルサイズを長期にわたって小さく保てる&lt;/li&gt;
&lt;li&gt;ルールは「自身隔離(&amp;lsquo;self-quarantining&amp;rsquo;)」&lt;/li&gt;
&lt;li&gt;クラス名は文脈を伝え、ロジックを持ち変化する&lt;/li&gt;
&lt;li&gt;モジュール作成したすべてのファイルは共通フォルダに含まれる&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;用語定義&#34;&gt;■ 用語定義&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;モジュール&lt;/strong&gt;: 大きいもの。個々の機能性をもつもの&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;コンポーネント&lt;/strong&gt;： モジュール内にネストしたパール&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;子ノード&lt;/strong&gt;: コンポーネントを構成する個々のパーツ&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ecssが解決するもの&#34;&gt;■ ECSSが解決するもの&lt;/h3&gt;

&lt;p&gt;ECSSのゴールは抽象的なスタイルを個々に分離すること。&lt;/p&gt;

&lt;p&gt;たいていの場合は、抽象的に機能を共通にするクラスを作ることは理にかなっている。さまざまな要素に対して再利用することができるからだ。
原理的には聞こえが良い。問題は大規模で複雑なインターフェイスを扱うとき。予期せぬ影響を与えずに修正することが難しくなってしまう。
だからECSSは分離したスタイルを目指す。&lt;/p&gt;

&lt;p&gt;「見て見ぬふり」に対処することが大切。
ECSSではすべてのモジュールやコンポーネントは他と分離するためにマイクロネームスペースを付けて書かれる。
下記は典型的なサンプル。必要に応じて&lt;code&gt;!import&lt;/code&gt;の利用は認められる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.ip-SubHeader_Wrapper {
    @mixin Headline;
    align-items: center;
    /* We want the subheader hidden by default on mobile */
    display: none;
    font-size: $text12;
    background-color: $color-grey-54;
    border-bottom: 1px solid color($color-grey-54 a(.5));
    min-height: $size-fine-quadruple;
    @include MQ(Mplus) {
        display: flex;
        background-color: $color-grey-a7;
        color: $color-grey-54;
        font-size: $text13;
        min-height: 1.5rem;
        border-bottom: 1px solid $color-grey-54;
        border-top: 1px solid $color-grey-33;
    }
    /* However, even on mobile, if the SubHeader Wrapper is in section 1, we want to see it */
    .ip-Classification_Header-1 &amp;amp; {
        display: flex;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ポジティブな点:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;冗長で何にも依存していない&lt;/li&gt;
&lt;li&gt;一般的にとらわれないコンテキスト（それが置かれている場所のサイズのコンテキストに保存）であるが、このコンポーネントに影響を与える任意のメディアクエリーは、中括弧のこの単一のセット内で定義されている。&lt;/li&gt;
&lt;li&gt;名前空間のモジュールは一度しか書かれていない。変更したければそこを見ればいい。&lt;/li&gt;
&lt;li&gt;ネスト内でオーバーライドを行えば、優先度が正しく動いて適切にふるまう。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ディレクトリ構造&#34;&gt;■ ディレクトリ構造&lt;/h3&gt;

&lt;p&gt;こうよりも、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;html/
- shopping-cart-template.html
- callouts-template.html
- products-template.html

js/
- shopping-cart-template.js
- callouts-template.js
- products-template.js

css/
- shopping-cart-template.css
- callouts-template.css
- products-template.css
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こうがいい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;shopping-cart-template/
- shopping-cart.html
- shopping-cart.css
- shopping-cart.js

callouts-template/
- callouts.html
- callouts.js
- callouts.css

products-template/
- products.html
- products.js
- products.css
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;グローバルCSSだけは例外。&lt;/p&gt;

&lt;h3 id=&#34;ecssでのね-m-ing&#34;&gt;ECSSでのね～m，ing&lt;/h3&gt;

&lt;p&gt;BEMの恩恵を感じたうえで、名前空間を使えばより確かに、他への影響の可能性を減らせる。&lt;/p&gt;

&lt;p&gt;&amp;ldquo;mini cart&amp;rdquo;ビューの&amp;rdquo;ShoppingCart&amp;rdquo;ファイルならば、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mc-ShoppingCart_Title&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mc-ShoppingCart_RemoveBtn&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などとなる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;namespace: すべてのセレクタに必要。小文字。&lt;/li&gt;
&lt;li&gt;ModuleOrComponent: アッパーキャメル。ハイフンでつなぐ。&lt;/li&gt;
&lt;li&gt;ChildNode: 任意。アッパーキャメル。アンダースコアでつなぐ。&lt;/li&gt;
&lt;li&gt;varient: 任意。小文字のトレインケース&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ステートについて&#34;&gt;■ ステートについて&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.w3.org/TR/wai-aria/&#34;&gt;WAI-ARIA&lt;/a&gt;を用いる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.co-Button {
    background-color: $color-button-passive;
    &amp;amp;[aria-selected=&amp;quot;true&amp;quot;] {
        background-color: $color-button-selected;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;10個の戒律&#34;&gt;■ 10個の戒律&lt;/h3&gt;

&lt;p&gt;詳細は&lt;a href=&#34;http://ecss.io/chapter8.html&#34;&gt;こちら&lt;/a&gt;。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;single source of truthであること&lt;/li&gt;
&lt;li&gt;ネストしてはならない&lt;/li&gt;
&lt;li&gt;IDセレクタを使ってはならない&lt;/li&gt;
&lt;li&gt;ベンダープレフィックスを使ってはならない&lt;/li&gt;
&lt;li&gt;サイズ/色/z-indexには変数を用いること&lt;/li&gt;
&lt;li&gt;常にモバイルファースで書くこと&lt;/li&gt;
&lt;li&gt;(@extend)を避け、mixinを使うこと&lt;/li&gt;
&lt;li&gt;マジックナンバーやブラウザハックに対してコメントを書くこと&lt;/li&gt;
&lt;li&gt;画像をinlineにしないこと&lt;/li&gt;
&lt;li&gt;複雑なCSSを書かないこと&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;感想。思想はすごくいいんだけど制限が多すぎるように感じた。&lt;br /&gt;
BEMをリスペクトしながらモディファイヤの部分に共感できないようだった。
そこはすごく理解できたんだけど、その他の成約を加えすぎていると思う。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【CSS】Android標準ブラウザにおけるPlaceholderのズレ</title>
      <link>http://kotazi.github.io/blog/post/2016/0727_placeholder_android/</link>
      <pubDate>Wed, 27 Jul 2016 11:57:40 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0727_placeholder_android/</guid>
      <description>&lt;p&gt;iOS/SafariやAndroid/Chromeなどでは再現しなかったが、Androidの標準ブラウザでPlaceholderの位置がずれてしまった。&lt;br /&gt;
調べてみると似たような記事がいくつか見つかった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mmt45.net/2015/02/20/placeholder%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%9F%E3%81%A8%E3%81%8D%E3%81%ABandroid%E3%81%A7%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E8%A1%A8%E7%A4%BA%E4%BD%8D%E7%BD%AE%E3%82%92%E4%B8%AD%E5%A4%AE/&#34;&gt;placeholderを指定したときにAndroidでテキスト表示位置を中央にしたい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/topcoat/topcoat/issues/453&#34;&gt;Placeholders inputs not centered with Android 4.1.2 #453&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不具合の再現と修正のものを用意した。&lt;/p&gt;

&lt;p&gt;&lt;p data-height=&#34;300&#34; data-theme-id=&#34;15717&#34; data-slug-hash=&#34;akKBaa&#34; data-default-tab=&#34;html,result&#34; data-user=&#34;kotazi&#34; data-embed-version=&#34;2&#34; class=&#34;codepen&#34;&gt;See the Pen &lt;a href=&#34;http://codepen.io/kotazi/pen/akKBaa/&#34;&gt;akKBaa&lt;/a&gt; by Kohei  Saeki (&lt;a href=&#34;http://codepen.io/kotazi&#34;&gt;@kotazi&lt;/a&gt;) on &lt;a href=&#34;http://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async src=&#34;//assets.codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;結局&lt;code&gt;body&lt;/code&gt;で当てていた&lt;code&gt;line-height&lt;/code&gt;が良くなかったらしい。
&lt;code&gt;placeholder&lt;/code&gt;の&lt;code&gt;height&lt;/code&gt;に合わせて&lt;code&gt;72px&lt;/code&gt;を当てたら直った。&lt;/p&gt;

&lt;p&gt;ちなみに&lt;code&gt;line-height&lt;/code&gt;の初期値は&lt;code&gt;normal&lt;/code&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【Shell】ちょっとした覚書</title>
      <link>http://kotazi.github.io/blog/post/2016/0726_shell/</link>
      <pubDate>Tue, 26 Jul 2016 11:57:40 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0726_shell/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/JamieMason/ImageOptim-CLI&#34;&gt;JamieMason/ImageOptim-CLI&lt;/a&gt;のサンプルにあるシェルが読めなかったので調べた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;images=$(git diff --exit-code --cached --name-only --diff-filter=ACM -- &#39;*.png&#39; &#39;*.jpg&#39;)
$(exit $?) || (echo &amp;quot;$images&amp;quot; | imageoptim &amp;amp;&amp;amp; git add $images)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;↑ これ。&lt;/p&gt;

&lt;hr&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/mashumashu/items/bbc3a79bc779fe8c4f99&#34;&gt;bash Tips - コマンド置換と算術式展開、パラメータ展開&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;$()&lt;/code&gt;で囲むとコマンド実行できる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://linux.die.net/man/1/git-diff&#34;&gt;git-diff(1) - Linux man page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;-exit-code&lt;/code&gt;は差分があれば&lt;code&gt;1&lt;/code&gt;を返すし、なければ&lt;code&gt;0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--cached&lt;/code&gt;はステージしたファイルの差分を確認する。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--name-only&lt;/code&gt;は差分のあるファイル名のみ出力する。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--diff-filter&lt;/code&gt;は&lt;code&gt;ACDMRTUXB*&lt;/code&gt;から選べる。
今回の&lt;code&gt;ACM&lt;/code&gt;はAdded (A), Copied &amp;copy;, Deleted (D), Modified (M), Renamed &amp;reg;, changed (T), are Unmerged (U), are Unknown (X), Broken (B)である。
今回はAdded/Copied/Modified。&lt;/p&gt;

&lt;p&gt;2行目の&lt;code&gt;$?&lt;/code&gt;。これは直前に実行された処理の終了コード値を表す。&lt;br /&gt;
参考: &lt;a href=&#34;http://kajitiluna.hatenablog.com/entry/20111023/1319381392&#34;&gt;Linuxのシェルスクリプト変数の記号あれこれ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;0&lt;/code&gt;もしくは&lt;code&gt;1&lt;/code&gt;が渡るはず。&lt;br /&gt;
&lt;code&gt;exit 0&lt;/code&gt;(差分がなかった場合)はそのまま正常終了。&lt;br /&gt;
&lt;code&gt;exit 1&lt;/code&gt;(差分があった場合)は次の処理へ進む。&lt;/p&gt;

&lt;p&gt;つまり、&lt;code&gt;(echo &amp;quot;$images&amp;quot; | imageoptim &amp;amp;&amp;amp; git add $images)&lt;/code&gt;を実行する。&lt;br /&gt;
&lt;code&gt;$images&lt;/code&gt;は1行目の変数を表していて、つまり差分のあるファイル名。&lt;code&gt;|&lt;/code&gt;(パイプ)を使ってる。&lt;/p&gt;

&lt;p&gt;参考: &lt;a href=&#34;http://webkaru.net/linux/commands-pipeline/&#34;&gt;パイプ「|」を使って 複数のコマンドを組み合わせる&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【読書】自分のアタマで考えよう</title>
      <link>http://kotazi.github.io/blog/post/2016/0710_chiki/</link>
      <pubDate>Sun, 10 Jul 2016 11:57:40 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0710_chiki/</guid>
      <description>&lt;p&gt;38冊目。
&lt;a  href=&#34;http://www.amazon.co.jp/gp/product/4478017034/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4478017034&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;自分のアタマで考えよう&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=kotazi-22&amp;l=as2&amp;o=9&amp;a=4478017034&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;を読みました。&lt;/p&gt;

&lt;hr&gt;

&lt;ul&gt;
&lt;li&gt;はじめに&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;序　章   「知っていること」と「考えること」はまったく別モノ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;第一章　最初に考えるべき「決めるプロセス」&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;第二章  「なぜ？」と「だからなんなの？」と問うこと&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;第三章　あらゆる可能性を検討しよう&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;第四章　縦と横に比べてみよう&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;第五章　判断基準はシンプルが一番&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;第六章　レベルを揃えて考えよう&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;第七章　情報ではなく「フィルター」が大事&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;第八章　データはトコトン追い詰めよう&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;第九章　グラフの使い方が「思考の生産性」を左右する&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;終　章　 知識は「思考の棚」に整理しよう&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;おわりに&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;なかでも思考は知識に騙されるという話が面白かった。
自分の頭で考えているようでも、前から持ち合わせていた知識を引っ張りだしているだけの人がいると。
もちろんそれ自体が悪いことではないのだけれど、やはり「思考する」とそれは別ものだ。&lt;/p&gt;

&lt;p&gt;また、何かを決めるためには「情報」だけではなく、「意思決定のプロセス」が必要。
さまざまな情報がある中で、その情報が重要かどうかは「今、求められている意思決定プロセスに必要かどうか」によって決まるべき。
そもそも&lt;strong&gt;考える&lt;/strong&gt;とは、あるインプットを元に結論を出したということ。それは仮の結論でもいいし、最初の段階では間違っているかも知れない。
それでもそれが考えるということ。&lt;/p&gt;

&lt;p&gt;情報を見た時には「なぜ？」と「だからなんなの？」を考える。
考えるためにもっとも役に立つ分析手法は「比較すること」&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;個人的には「マーケット感覚を身につけよう」のほうが面白かった。
けれども、こうやってブログを書いていることのひとつの理由に、
1冊の本からどれだけのことを学ぼう、学べるだろうということがある。&lt;/p&gt;

&lt;p&gt;もともと自分の中に疑問に思っていたことで、
本にはたくさんの文字が書かれているけど、
それを一字一句全て覚えたらその本に書かれていることを理解したことになるのだろうか
などと考えていたのだ。&lt;/p&gt;

&lt;p&gt;それはもちろんできないのだけれど、
きっとできたとしても理解するというのはそういうことではない。
例えば友人にほんの内容を聞かれたときに自分の言葉で伝えられることが、
本の内容を理解したということなんじゃないだろうかということでブログに書いている。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【読書】机に向かってすぐに集中する技術</title>
      <link>http://kotazi.github.io/blog/post/2016/0704_focus/</link>
      <pubDate>Mon, 04 Jul 2016 18:05:34 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0704_focus/</guid>
      <description>

&lt;p&gt;&lt;a  href=&#34;http://www.amazon.co.jp/gp/product/4894517019/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4894517019&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;机に向かってすぐに集中する技術&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=kotazi-22&amp;l=as2&amp;o=9&amp;a=4894517019&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;株式会社ミズノに勤め、サメ肌水着を開発した方の書いた本。&lt;br /&gt;
どちらかといえばデスクワークの人向けに書かれた集中力の本だけれど、
著者のバックグラウンドもあってかかなりスポーツ寄りな考え方で書かれている。&lt;/p&gt;

&lt;p&gt;「モチベーション」に依存した集中の方法ではなく、
まずは行動を起こすというところから改善をする。&lt;/p&gt;

&lt;p&gt;はっきり言ってめちゃめちゃよかった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;目線を一点に集中させる&lt;/li&gt;
&lt;li&gt;雨の音を集中力のカーテンにする&lt;/li&gt;
&lt;li&gt;目線が泳がない訓練をする&lt;/li&gt;
&lt;li&gt;椅子には浅く座る&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;集中カードの使い方&#34;&gt;集中カードの使い方&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;5, 3, 8の深呼吸を3回行う&lt;/li&gt;
&lt;li&gt;カードの中心にある点に焦点を合わせ、20病患見つめる&lt;/li&gt;
&lt;li&gt;ゆっくり目を閉じる&lt;/li&gt;
&lt;li&gt;残像が消えたら、ゆっくりと目を開ける&lt;/li&gt;
&lt;li&gt;「今からやるべきこと」を開始する&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>【読書】疲れない脳をつくる生活習慣</title>
      <link>http://kotazi.github.io/blog/post/2016/0703_focus/</link>
      <pubDate>Sun, 03 Jul 2016 18:05:34 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0703_focus/</guid>
      <description>&lt;p&gt;&lt;a  href=&#34;http://www.amazon.co.jp/gp/product/4833421607/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4833421607&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;疲れない脳をつくる生活習慣―働く人のためのマインドフルネス講座&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=kotazi-22&amp;l=as2&amp;o=9&amp;a=4833421607&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;を読みました。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;第１章◆1日5分の瞑想が人生を変える&lt;br /&gt;
第２章◆時間管理の肝は睡眠にあり&lt;br /&gt;
第３章◆仕事のパフォーマンスを劇的に高める姿勢術&lt;br /&gt;
第４章◆血糖値を制する者は仕事を制す&lt;br /&gt;
第５章◆疲れない脳をつくるための1日の過ごし方&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;瞑想、時間管理、姿勢、血糖値。&lt;br /&gt;
精神論みたいなのが展開されていなくてすごくいいと思った。&lt;/p&gt;

&lt;p&gt;内容もすごく難しいことは書いていないので実践しやすい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【読書】集中力</title>
      <link>http://kotazi.github.io/blog/post/2016/0702_focus/</link>
      <pubDate>Fri, 01 Jul 2016 18:05:30 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0702_focus/</guid>
      <description>&lt;p&gt;&lt;a  href=&#34;http://www.amazon.co.jp/gp/product/B008BCCLQU/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B008BCCLQU&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;集中力&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=kotazi-22&amp;l=as2&amp;o=9&amp;a=B008BCCLQU&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;
を読みました。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;1．集中力があれば道は開ける&lt;br /&gt;
2．集中力で身につけるセルフコントロール術&lt;br /&gt;
3．望むものを手に入れる方法&lt;br /&gt;
4．どんなビジネスでも成果を生み出す力&lt;br /&gt;
5．環境はあなたの思いどおり&lt;br /&gt;
6．意志を育てるトレーニング&lt;br /&gt;
7．無限の精神力を引き出すために&lt;br /&gt;
8．平静な精神状態が集中力の鍵&lt;br /&gt;
9．悪習感を断ち切る&lt;br /&gt;
10．ビジネスの達人になる&lt;br /&gt;
11．勇気のある人間&lt;br /&gt;
12．裕福になるということ&lt;br /&gt;
13．できるかできないかは、あなたしだい&lt;br /&gt;
14．エクササイズで身につける技術&lt;br /&gt;
15．忘れないための記憶力&lt;br /&gt;
16．集中力で願望を達成する&lt;br /&gt;
17．理念の育て方&lt;br /&gt;
18．メンタルパワーの力&lt;br /&gt;
19．集中力で伸ばす強い意志&lt;br /&gt;
20．最後にもう一度、集中力の大切さについて&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;すごく昔に書かれた本らしく精神論が多いように感じた。&lt;br /&gt;
中身の割にはすごく分厚い。&lt;/p&gt;

&lt;p&gt;集中力やタイムマネジメントに関する本というよりも、
自己啓発本といったほうがちかい。&lt;/p&gt;

&lt;p&gt;だから目次を見てもらえばわかるけれども、
勇気の話とか精神力といった言葉が出てくる。&lt;/p&gt;

&lt;p&gt;集中力を高めるために人間を磨くというか、
修行の本だ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【読書】マーケット感覚を身につけよう</title>
      <link>http://kotazi.github.io/blog/post/2016/0630_market_feeling/</link>
      <pubDate>Wed, 29 Jun 2016 12:41:20 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0630_market_feeling/</guid>
      <description>

&lt;p&gt;&lt;a  href=&#34;http://www.amazon.co.jp/gp/product/4478064784/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4478064784&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;マーケット感覚を身につけよう&amp;mdash;「これから何が売れるのか?」わかる人になる5つの方法&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=kotazi-22&amp;l=as2&amp;o=9&amp;a=4478064784&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;を読みました。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;本書の目的は「&lt;strong&gt;マーケット感覚とは何かを説明し、なぜそれが大事なのかを理解していただき、マーケット感覚を身につけるための具体的な方法論をていじすること&lt;/strong&gt;」と冒頭に書いてあり、その後の進め方も非常に分かりやすい良書だった。著者は&lt;a href=&#34;http://d.hatena.ne.jp/Chikirin/&#34;&gt;Chikirinの日記&lt;/a&gt;などでも有名なちきりん氏。&lt;/p&gt;

&lt;p&gt;足元に金塊が落ちていたらどんな大人でも驚いてしまうだろうが、&amp;rdquo;金塊には価値がある&amp;rdquo;ことを知らない幼児が見つけても、それは単にキレイな石にしか過ぎない。このように自分の身の回りにある価値に気がつくことができない大人は多い。本書ではこの、「売れるものに気がつく能力」「価値を認識する能力」のことを&lt;strong&gt;マーケット感覚&lt;/strong&gt;と呼ぶ。&lt;/p&gt;

&lt;hr&gt;

&lt;ul&gt;
&lt;li&gt;序 もうひとつの能力&lt;/li&gt;
&lt;li&gt;１ 市場と価値とマーケット感覚&lt;/li&gt;
&lt;li&gt;2 市場化する社会&lt;/li&gt;
&lt;li&gt;3 マーケット感覚で変わる世の中の見え方&lt;/li&gt;
&lt;li&gt;4 すべては「価値」から始まる&lt;/li&gt;
&lt;li&gt;5 マーケット感覚を鍛える5つの方法&lt;/li&gt;
&lt;li&gt;終 変わらなければ替えられる&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;マーケット感覚が何かを知るためには、そもそもマーケットとは何かということを知らなければならない。&lt;br /&gt;
&lt;strong&gt;不特定多数の買い手(需要者)と不特定多数の売り手(供給者)がお互いのニーズを満たしてくれる相手とマッチングされ、価値を交換する場所&lt;/strong&gt; をマーケット(市場)と呼んでいる。この条件を満たすのであれば貨幣の介在は必須ではなく、物々交換であっても市場と呼ぶことができる。就職活動も婚活もすべて市場である。&lt;/p&gt;

&lt;p&gt;① 取引される価値&lt;br /&gt;
② 買い手=需要者&lt;br /&gt;
③ 売り手=供給者&lt;br /&gt;
④ 取引条件&lt;/p&gt;

&lt;p&gt;市場は上記4つの要素によって成り立っており、&lt;/p&gt;

&lt;p&gt;⑤ 買い手と売り手が取引する動機&lt;br /&gt;
⑥ それぞれの要素に起こりうる今後の変化&lt;br /&gt;
⑦ 市場の中で選ばれるための方法&lt;/p&gt;

&lt;p&gt;動きを予測し市場を活用するためには上記のような点について考えていく必要がある。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;また今後の社会の変化を知るために&lt;strong&gt;社会の市場化&lt;/strong&gt;がキーワードになる。
昔は就職も結婚も知人の紹介などを使ってマッチングされる&lt;strong&gt;相対取引&lt;/strong&gt;がメインだった。
けれどもインターネットが現れ、「全学生が全企業を相手に就職活動を行う」ということが可能になった。
そしてこれが社会の市場化である、今後もこのようなことがさまざまな分野で起こる。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;市場には入れ子構造が存在する。例えば「消費市場」と「貯蓄市場」が存在する。
メーカーやサービス業は消費市場の中で競い合う。けれども上位レイヤーには保険や銀行といった貯蓄し譲渡の競争があり、
この競争が重要。(ちなみに自分は最近プルデンシャルの営業を受けているけれど、事前に保険の重要性を示すことや、そのあとは様々なプランを提示することで他社ではなく、プルデンシャルのプランの中から選ばせるようにするのも、入れ子の奥に入れていくような感覚だろう。)&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;マーケット感覚を身につける方法&lt;/p&gt;

&lt;h5 id=&#34;1-プライシング能力を身につける&#34;&gt;1. プライシング能力を身につける&lt;/h5&gt;

&lt;p&gt;日本で生活していると既に価格が付けられたものを購入する機械が多い。
けれども自分でいくらが妥当か、いくらまで出せるかを考える力は重要。
良くない例として、値段の高い刺し身を見てそっちのほうが多いと思うようではいけない。&lt;/p&gt;

&lt;h5 id=&#34;2-インセンティブシステムを理解する&#34;&gt;2. インセンティブシステムを理解する&lt;/h5&gt;

&lt;p&gt;人がなにか特定の言動をとったとき、その背景にある要因や、その要因が言動につながるまでの仕組みである「インセンティブシステム」を理解しよう。
マーケットとは生身の人間が取引をする場所。人間の行動が何に動機づけられているか、そのことに対する洞察がなければマーケット感覚を身につけることはできない。(行動経済学？)&lt;/p&gt;

&lt;p&gt;そしてこれを身につけるためには自分の欲に対して素直になること。生き方としても大切だと思う。&lt;/p&gt;

&lt;h5 id=&#34;3-市場に評価される方法を学ぶ&#34;&gt;3. 市場に評価される方法を学ぶ&lt;/h5&gt;

&lt;p&gt;昔は企画はJASやJISなど、公的な組織や業界団体が定めるものであったが、現在はデファクトスタンダードが残る。&lt;br /&gt;
組織に選ばれる人間ではなく、市場に評価される人間を選ぼう。&lt;/p&gt;

&lt;h5 id=&#34;4-失敗と成功の関係を理解する&#34;&gt;4. 失敗と成功の関係を理解する&lt;/h5&gt;

&lt;p&gt;失敗してもいいからどんどん市場に出してどんどん学ぶこと&lt;/p&gt;

&lt;h5 id=&#34;5-市場性の高い環境に身を置く&#34;&gt;5. 市場性の高い環境に身を置く&lt;/h5&gt;

&lt;p&gt;市場性の高い場所とは、需要者と供給者が価値を交換する現場や、人間のインセンティブシステムが直接的に働く場所、組織的な意思決定ではなく、委譲的な意思決定方法が採用されている環境のこと。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;事例と挿絵が豊富でとても読みやすい本だった。買って読むべき。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【読書】ストレスフリーの整理術</title>
      <link>http://kotazi.github.io/blog/post/2016/0619_gtd/</link>
      <pubDate>Sun, 19 Jun 2016 20:53:15 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0619_gtd/</guid>
      <description>&lt;p&gt;&lt;a  href=&#34;http://www.amazon.co.jp/gp/product/4576082116/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4576082116&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;はじめてのGTD ストレスフリーの整理術&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=kotazi-22&amp;l=as2&amp;o=9&amp;a=4576082116&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;を読みました。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;本書の内容について触れる前に、
まずは簡単にGTDをおさらいしたい。&lt;/p&gt;

&lt;hr&gt;

&lt;ul&gt;
&lt;li&gt;第1章 イントロダクション&lt;/li&gt;
&lt;li&gt;第2章 GTD現象&lt;/li&gt;
&lt;li&gt;第3章 すべてを機能させる&lt;/li&gt;
&lt;li&gt;第4章 自己管理の基礎&lt;/li&gt;
&lt;li&gt;第5章 状況のコントロール 収集&lt;/li&gt;
&lt;li&gt;第6章 状況のコントロール 見極め&lt;/li&gt;
&lt;li&gt;第7章 状況のコントロール 整理&lt;/li&gt;
&lt;li&gt;第8章 状況のコントロール 見直し&lt;/li&gt;
&lt;li&gt;第9章 状況のコントロール 取り組み/行動&lt;/li&gt;
&lt;li&gt;第10章 状況のコントロール 人生と仕事に活用していく方法&lt;/li&gt;
&lt;li&gt;第11章 将来への見通し&lt;/li&gt;
&lt;li&gt;第12章 将来への見通し 次に取るべき行動&lt;/li&gt;
&lt;li&gt;第13章 将来への見通し プロジェクト&lt;/li&gt;
&lt;li&gt;第14章 将来への見通し 注意を向けるべき分野や責任を負っている分野&lt;/li&gt;
&lt;li&gt;第15章 将来への見通し 目標とゴール&lt;/li&gt;
&lt;li&gt;第16章 将来への見通し 構想&lt;/li&gt;
&lt;li&gt;第17章 将来への見通し 目的/価値観&lt;/li&gt;
&lt;li&gt;第18章 将来への見通し グレイシスガーデン再訪&lt;/li&gt;
&lt;li&gt;第19章 GTDを総合で機に活用する&lt;/li&gt;
&lt;li&gt;第20章 最後に&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;現在GTDは社会現象のように多くの人に利用されているが、
考案者であるデビットアレンはその要因を以下の3つのように考えている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;誰にでも理解できる論理的なプロセスとして機能している&lt;/li&gt;
&lt;li&gt;誰もが持っている日常的な道具を用いて、誰もが思い立ったときに気軽に導入できる&lt;/li&gt;
&lt;li&gt;GTDが解決しようとしている問題が世界的な規模で広がりつつある&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;解決しなければならない真の問題とは、意味が明らかになっていない物事が大量に押し寄せてきているというじょうきょうである。&lt;/strong&gt;&lt;br /&gt;
これがGTDが解決しようとする現代の問題。&lt;/p&gt;

&lt;p&gt;GTDはシステムそのものではなく、システマチックな「うまくいく考え方」である。&lt;/p&gt;

&lt;p&gt;やり方については調べてください。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;GTDは&amp;rdquo;Getting Things Done&amp;rdquo;の頭文字。&lt;br /&gt;
タスク管理や整理術のフレームワークのうちのひとつだ。&lt;/p&gt;

&lt;p&gt;先に感想を述べていくと決してGTDは最強のフレームワークでなどではない。&lt;br /&gt;
特徴のひとつに、 &lt;strong&gt;あなたの集中力を妨げるという意味においては、すべてが同じように重要で平等なのだ。&lt;/strong&gt; という一文にあるように、
基本的に全てのタスクの重要度を同じものと見做す。&lt;/p&gt;

&lt;p&gt;GTDの根本的な目的なひとつに、近代の複合的で複雑なタスクの解消というものがある。&lt;br /&gt;
絡まりあったタスクに多忙な毎日を送ることになっている現代人のためのフレームワークである。&lt;br /&gt;
いつも何かをしながらなにか別のことを考えなければならなくなってしまっている人たちの頭の中を空っぽにするために作られている。&lt;/p&gt;

&lt;p&gt;そういう意味ですごく、誰にでも簡単にできて成果が望めると言う点で非常に素晴らしいが、&lt;br /&gt;
7つの習慣のスティーブン・コヴィーが「簡単すぎる」といったように、「重要だが緊急ではない」といった部分へのアプローチが弱い。&lt;/p&gt;

&lt;p&gt;また、ポモドーロのように人間の生産性や集中力について考えられているわけでもない。
そういうことを知った上でGTDを使うのが良いと思う。&lt;/p&gt;

&lt;p&gt;ただプロジェクトという考え方は本当に秀逸。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>