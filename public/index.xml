<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kotazi.com</title>
    <link>http://kotazi.github.io/blog/</link>
    <description>Recent content on kotazi.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 14 Jan 2017 18:31:41 +0900</lastBuildDate>
    <atom:link href="http://kotazi.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>人と企業が信頼で結ばれる新しい雇用 - ALLIANCE</title>
      <link>http://kotazi.github.io/blog/post/2017/0114_alliance/</link>
      <pubDate>Sat, 14 Jan 2017 18:31:41 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2017/0114_alliance/</guid>
      <description>

&lt;p&gt;昨年はスタートアップやマーケティング周りの本を一通り読み、今年は技術系か、もしくはあまり仕事には関係ないものを読みたいと思いながら昨年の積み残しを消化中。
ということで、&lt;a href=&#34;https://www.amazon.co.jp/gp/product/4478062579/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4478062579&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;ALLIANCE ― 人と企業が信頼で結ばれる新しい雇用&lt;/a&gt;を読みました。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;「人と企業が信頼で結ばれる新しい雇用」という副題の通り、終身雇用の時代が終わった今こそ求められている、
新しい雇用を提唱する。そんな本だった。&lt;/p&gt;

&lt;p&gt;著者のリード・ホフマンといえばPaypal出身でLinkedinの共同創業者という印象程度。
Linkedinに対しては、MSの買収には大きく驚かされたし、海外でかなり流行っているらしいとは聞いていたものの、
1ユーザーとしてそれほど使っているわけではない。久しぶりに開いてもプロダクトが改善されているようなこともなく、
使っていないのに通知が多くて困るといった感じだった。&lt;/p&gt;

&lt;p&gt;だからリード・ホフマンが雇用の未来について、これだけのビジョンを描いていると知って少し驚いた。
と同時に、あくまで「Linkedin」というプロダクトは、ビジョンを実現するためのツールだったのかもしれないと思った。&lt;/p&gt;

&lt;p&gt;そしてリード・ホフマンが描くこの新しい雇用を「アライアンス」とこの本では呼んでいる。
会社も個人を定年まで雇うつもりはなく、個人も一生同じ会社に勤めるつもりはない。
そんな時代に雇用を「取引」ではなく「関係」と捉え直し、雇用が終わっても会社と個人の間に築くべき、フラットで信頼に基づいた「パートナーシップ」の関係
と、その築き方を提案するのが本書だ。&lt;/p&gt;

&lt;p&gt;度々、「コミットメント期間」という言葉が登場する。
これは「ミッションを期限内に成し遂げることに専念し、そこに個人の信用をかけている」という考え方であり、
Linkedinでも実際に取り入れられているらしい。OKRに似ている部分もあると思う。&lt;/p&gt;

&lt;p&gt;会社の利害と社員の利害の間で整合性の取れたコミットメント目標を設定する。
整合性の取れたものを設定するためには、会社は核となるミッションと価値観を打ち立て、社内広める。
そして社員は大切にしている価値観とありたい姿を伝える。&lt;/p&gt;

&lt;p&gt;コミットメント期間が終了すれば、再び新しいコミットメント目標を設定する場合もあるし、転職を選ぶ社員もいる。
転職後もその社員と会社は良好な関係を維持できるよう、引き継ぎなども含めて移行期間を用意する。
転職後も続く関係のために、会社は「卒業生」ネットワークを作ることを本書では進めている。&lt;/p&gt;

&lt;p&gt;会社が卒業生ネットワークに投資すべき理由としては、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;優れた人材の獲得に役立つ&lt;/li&gt;
&lt;li&gt;有力な情報が得られる&lt;/li&gt;
&lt;li&gt;顧客を紹介してくれる&lt;/li&gt;
&lt;li&gt;卒業生はブランド・アンバサダーである&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などだった。&lt;/p&gt;

&lt;p&gt;社員としての目線で言えば、僕は既に3社目。どの会社も好きだったから懐かしく思うこともあるし、働いていた頃にもっとこの人と親しくなっておけばよかったと思うこともある。
そして今後もいくつかの会社で働くだろうと考えると、このような働き方には強く共感できるものがあった。&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;目次紹介&#34;&gt;目次紹介&lt;/h3&gt;

&lt;p&gt;１. ネットワーク時代の新しい雇用: 職場に信頼と忠誠を取り戻す「アライアンス」とは&lt;br&gt;
２. コミットメント期間を設定しよう: アライアンスは仕事の内容と期間を定める&lt;br&gt;
３. コミット期間で大切なもの: 社員と会社の目標および価値観をそろえる&lt;br&gt;
４. 変革型コミットメント期間を導入する: うまく活用する四つのステップ&lt;br&gt;
５. 社員にネットワーク情報収集力を求める: 社員を通して世界を自社内に取り込む&lt;br&gt;
６. ネットワーク情報収集力を育てるには: 社員の人脈を伸ばすコツと戦術&lt;br&gt;
７. 会社は「卒業生」ネットワークをつくろう: 生涯続く個人と会社のアライアンス関係&lt;br&gt;
８. 「卒業生」ネットワークを活かすには: 効果的に導入するためのコツとテクニック&lt;br&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Inspired: 顧客の心を捉える製品の創り方</title>
      <link>http://kotazi.github.io/blog/post/2017/0105_inspired/</link>
      <pubDate>Thu, 05 Jan 2017 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2017/0105_inspired/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://www.amazon.co.jp/gp/product/B00TCM8TB4/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00TCM8TB4&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;Inspired: 顧客の心を捉える製品の創り方&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=kotazi-22&amp;l=as2&amp;o=9&amp;a=B00TCM8TB4&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;
を読みました。&lt;/p&gt;

&lt;h4 id=&#34;第1部-ソフトウェア製品の開発に関わる人たち&#34;&gt;第1部: ソフトウェア製品の開発に関わる人たち&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;第1章: 製品開発のカギを握る担当者とその役割&lt;/li&gt;
&lt;li&gt;第2章: プロダクトマネジメントとプロダクトマーケティング&lt;/li&gt;
&lt;li&gt;第3章: プロダクトマネジメントとプロジェクトマネジメント&lt;/li&gt;
&lt;li&gt;第4章: プロダクトマネジメントとデザイン(設計)&lt;/li&gt;
&lt;li&gt;第5章: プロダクトマネジメントとエンジニアリング(実装)&lt;/li&gt;
&lt;li&gt;第6章: プロダクトマネージャーの条件&lt;/li&gt;
&lt;li&gt;第7章: プロダクトマネージャーを管理する&lt;/li&gt;
&lt;li&gt;第8章: パットン将軍の教え(プロダクトマネージャーへのアドバイス)&lt;/li&gt;
&lt;li&gt;第9章: プロダクトマネージャーを支えるブレインたち&lt;/li&gt;
&lt;li&gt;第10章: 上から降ってくるものをうまくさばく&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;第2部-ソフトウェアを開発するプロセス&#34;&gt;第2部: ソフトウェアを開発するプロセス&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;第11章: 製品市場製の評価&lt;/li&gt;
&lt;li&gt;第12章: 製品を見つけ出す&lt;/li&gt;
&lt;li&gt;第13章: 製品理念&lt;/li&gt;
&lt;li&gt;第14章: 製品委員会&lt;/li&gt;
&lt;li&gt;第15章: ユーザーモニター制度&lt;/li&gt;
&lt;li&gt;第16章: 市場調査&lt;/li&gt;
&lt;li&gt;第17章: プロダクトマネジメントのためのペルソナ&lt;/li&gt;
&lt;li&gt;第18章: 製品仕様はどうあるべきかを考える&lt;/li&gt;
&lt;li&gt;第19章: 設計と実装&lt;/li&gt;
&lt;li&gt;第20章: 必要最小限まで削ぎ落とされた製品2&lt;/li&gt;
&lt;li&gt;第21章: 製品仕様の検証&lt;/li&gt;
&lt;li&gt;第22章: 製品プロトタイプの検証&lt;/li&gt;
&lt;li&gt;第23章: 現在の製品を改善する&lt;/li&gt;
&lt;li&gt;第24章: ユーザーにやさしい緩やかなバージョン移行&lt;/li&gt;
&lt;li&gt;第25章: 迅速な対応&lt;/li&gt;
&lt;li&gt;第26章: アジャイル手法を使いこなす&lt;/li&gt;
&lt;li&gt;第27章: ウォーターフォールプロセスを使いこなす&lt;/li&gt;
&lt;li&gt;第28章: ベンチャー企業のプロダクトマネジメント&lt;/li&gt;
&lt;li&gt;第29章: 大きい会社でもイノベーションは不可能ではない&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第30章: 大きい会社で賢く立ち回るには
3&lt;/p&gt;

&lt;h4 id=&#34;第3部-さまざまなソフトウェア製品-サービス&#34;&gt;第3部: さまざまなソフトウェア製品・サービス&lt;/h4&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第31章: アップルに学ぶ&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第32章: 特別仕様には要注意&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第33章: 古くて新しいもの&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第34章: 不安、金銭欲、そして精神的な欲望から人はモノを買う&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第35章: エモーショナルアダプションカーブ(購買層の感情に注目する)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第36章: 使いやすさと見た目&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第37章: 個人向けインターネットサービス製品で大切なこと&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第38章: 企業向け製品で大切なこと&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第39章: プラットフォーム製品で大切なこと&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;まとめ&#34;&gt;まとめ&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;第40章: ベストプラクティスのまとめ&lt;/li&gt;
&lt;li&gt;第41章: プロダクトマネージャーの懸案事項リスト&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;長年製品開発に携わってきたマーティ・ケーガンのベスト・プラクティスが非常によくまとまっている。
プロダクトマネージャーの主な役割は、「製品の市場性を評価すること」と「開発すべき製品を定義すること」の2つであると述べたうえで、
さまざまなTipsが散りばめられている。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>〈インターネット〉の次に来るもの</title>
      <link>http://kotazi.github.io/blog/post/2017/0104_internet/</link>
      <pubDate>Wed, 04 Jan 2017 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2017/0104_internet/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.amazon.co.jp/gp/product/B01HQJ5DY0/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B01HQJ5DY0&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;〈インターネット〉の次に来るもの　未来を決める１２の法則&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=kotazi-22&amp;l=as2&amp;o=9&amp;a=B01HQJ5DY0&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;を読みました。&lt;/p&gt;

&lt;hr&gt;

&lt;ol&gt;
&lt;li&gt;BECOMING&lt;/li&gt;
&lt;li&gt;COGNIFYING&lt;/li&gt;
&lt;li&gt;FLOWING&lt;/li&gt;
&lt;li&gt;SCREENING&lt;/li&gt;
&lt;li&gt;ACCESSING&lt;/li&gt;
&lt;li&gt;SHARING&lt;/li&gt;
&lt;li&gt;FILTERING&lt;/li&gt;
&lt;li&gt;REMIXING&lt;/li&gt;
&lt;li&gt;INTERACTING&lt;/li&gt;
&lt;li&gt;TRACKING&lt;/li&gt;
&lt;li&gt;QUESTIONING&lt;/li&gt;
&lt;li&gt;BEGINNING&lt;/li&gt;
&lt;/ol&gt;

&lt;hr&gt;

&lt;p&gt;まず本書は決して、インターネットの終わりなどについて書かれたようなものではない。
そうではなく変化し続けるテクノロジーを前にした時、「不可避」的に向かう未来について考察する。&lt;/p&gt;

&lt;p&gt;未来というよりも既に「現在」になりつつあるようなことが多いようにも感じたが、
途中「未来はすでにここにある。まだ均等に分配されていないだけだ。」と書かれてあるように、まあそうなんだろう。&lt;/p&gt;

&lt;p&gt;個人的にはそこまで刺さらなかったけれど、
テクノロジー業界ではないけれど興味を持っているみたいな人にはオススメしたいかも。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>起業のファイナンス</title>
      <link>http://kotazi.github.io/blog/post/2016/0817_finance/</link>
      <pubDate>Thu, 03 Nov 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0817_finance/</guid>
      <description>&lt;p&gt;&lt;a  href=&#34;https://www.amazon.co.jp/gp/product/4534052456/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4534052456&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;起業のファイナンス 増補改訂版 ベンチャーにとって一番大切なこと&lt;/a&gt;
を読みました。&lt;/p&gt;

&lt;hr&gt;

&lt;ul&gt;
&lt;li&gt;序章 ■ なぜ今「ベンチャー」なのか？&lt;/li&gt;
&lt;li&gt;第1章 ■ ベンチャーファイナンスの全体像&lt;/li&gt;
&lt;li&gt;第2章 ■ 会社の始め方&lt;/li&gt;
&lt;li&gt;第3章 ■ 事業計画の作り方&lt;/li&gt;
&lt;li&gt;第4章 ■ 企業価値とは何か？&lt;/li&gt;
&lt;li&gt;第5章 ■ ストックオプションを有効に活用する&lt;/li&gt;
&lt;li&gt;第6章 ■ 資本政策の作り方&lt;/li&gt;
&lt;li&gt;第7章 ■ 投資契約と投資家との交渉&lt;/li&gt;
&lt;li&gt;第8章 ■ 優先株式のすすめ&lt;/li&gt;
&lt;li&gt;第9章 ■ ベンチャーのコーポレートガバナンス&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;投資サイドからベンチャーについて描いた一冊。
経営者の自伝を読むのもいいが、本書のように投資家視点書かれた本を読んでみるのも面白い。
楽しく読みながらファイナンスについて幅広く知識を得られる一冊。&lt;/p&gt;

&lt;p&gt;ベンチャーやスタートアップの立ち上げがどのようにして行われているかというのは、
やはり経営に関わってみないと理解できない部分が多い。
「起業のイメージを持ってもらうこと」を目的として書かれた本書は起業経験のない
僕にとっていくつか不透明だった部分の疑問に答えてくれた。&lt;/p&gt;

&lt;p&gt;また、ルール地味た話ばかりではなく、
「例外を無視してあえてシンプルに言えば、ベンチャーはお金を借りるべきではありません。」
といった具合に投資家としての意見をはっきりと述べてくれている。&lt;/p&gt;

&lt;p&gt;その上で、銀行からの借入金には「期限の利益喪失」という条項が付いているので、元利の支払いができなければ基本的には全額を即時返済しなければならないことや、収入や不安定な状況で毎月の返済は非常にきついこと。個人保証の危なさなど、わかりやすく解説してくれている。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;以下に勉強になったことを簡単にまとめる。&lt;/p&gt;

&lt;p&gt;ベンチャーで投資されるリターンは、基本的にはキャピタルゲインである。金融を考える際の最重要事項は「どうやってお金を取り戻すか」ということ。ベンチャー投資の場合はこれが「EXIT」と呼ばれている。EXITによってキャピタルゲインを得る方法は、上場orM&amp;amp;Aと考えておいていい。(第三は株式の売却)&lt;/p&gt;

&lt;p&gt;2013年度のVCが日本で投資する額は718億円に対し、米国で約425億ドル。
この数字を聞くと日本はベンチャーに投資される資金が少ないと感じてしまうが、
イケてる起業には十分な資金は集まる。どちらかと言えば投資したく成るようなイケてる企業が足りていないと考えるべき。&lt;/p&gt;

&lt;p&gt;個人でやってきた事業を法人化し増資を受けるのであれば、その半年ぐらい前に会社にしておいたほうが余裕のあるスケジュールを組める。そもそも株式というのは「会社の権利を小分けしたもの」であるから、株式で資金調達をするということは、会社を小口化して販売するのと同じこと。
これまでやってきた事業を法人化する場合は、創業者個人から法人への事業譲渡または現物出資といった取引を行う。上場を目指すとなるとシードでもVCから数億円の評価はしてもらいたい。創業時に数十万しかかけていない事業であれば事前に法人化してVCに当たる前にプロトタイプなどを作るようにする。(つまり、自身への事業譲渡とVC評価時で事業が成長していることが明確な状態を作りたい)&lt;/p&gt;

&lt;p&gt;エンジェル投資家で注意点を上げるならば、本来創業者とその投資家が同じ普通株式で同時に出資するとしたら、同業者と出資者の株価は同じでないとおかしい。場合によっては持ち株比率がおかしくなる。生まれた瞬間に資本政策で失敗しているということが起こりうる。事業では失敗をしてもいいが、資本政策で失敗すると取り返しがつかない。&lt;/p&gt;

&lt;p&gt;VCから出資を受けるには事業計画を用意する必要があるが、未だ誰もやったことのないことに取り組むベンチャーが計画通りにことが進むはずがない。ここで重要と成るのが「状況に合わせて臨機応変に対応する能力」。ざっくりいえば、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;EXECUTIVE SUMMARY&lt;/li&gt;
&lt;li&gt;会社の概要&lt;/li&gt;
&lt;li&gt;外部環境&lt;/li&gt;
&lt;li&gt;数値計画&lt;/li&gt;
&lt;li&gt;検討している資金調達の概要や資本政策&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などがオーソドックス。&lt;/p&gt;

&lt;p&gt;企業価値について。
企業価値によって株価が決まるため、ベンチャーにとって企業価値は重要。
株式とは起業の経済的価値やコントロール権(議決権)を小口化したもの。&lt;/p&gt;

&lt;p&gt;純資産方式で企業価値を見る場合、会社の過去に着目して企業価値評価を行うことになる。
これからことを成すベンチャー向きの考え方ではない。ベンチャーの価値は過去の財務的な実績ではなく、
未来の可能性で見るべき。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/DCF%E6%B3%95&#34;&gt;DCF法&lt;/a&gt;(Disconuted Cash Flow)は、その起業に入ってくるキャッシュフローを現在の価値に割り引いたものが、その企業の企業価値だと考える方法。EXITから逆算して考えること。(ちなみに、本書には1回の増資で会うべき投資家の数は、数十は普通と書いてある。)&lt;/p&gt;

&lt;p&gt;その他にも、
- ストックオプション
- 資本政策
- コーポレート・ガバナンス&lt;/p&gt;

&lt;p&gt;などについても、しっかりと書かれている。
またしばらくしたらもう一度読もう。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>git rebaseについて</title>
      <link>http://kotazi.github.io/blog/post/2016/1007_rebase/</link>
      <pubDate>Fri, 07 Oct 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/1007_rebase/</guid>
      <description>

&lt;h2 id=&#34;リモートブランチとリモート追跡ブランチ&#34;&gt;リモートブランチとリモート追跡ブランチ&lt;/h2&gt;

&lt;p&gt;ちょっと洗いざらいしているうえで、けっこう根本的な部分で理解の浅い箇所があるなということに気がついた。&lt;/p&gt;

&lt;p&gt;それがリモートブランチとリモート追跡ブランチ違い。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kray.jp/blog/git-pull-rebase/&#34;&gt;git pull と git pull –rebase の違いって？図を交えて説明します！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Docbaseを開発しているKrayのブログ。&lt;br&gt;
図が最高に分かりやすい。fetch理解する前にリモートブランチとローカルブランチの違いを理解する必要があるということに気づくことができた。&lt;/p&gt;

&lt;p&gt;完全にリンク先を読むのが一番なので、改めて説明はしないけれども、下記のようなことを学べた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;リモート追跡ブランチはローカルにある&lt;/li&gt;
&lt;li&gt;ユーザー自身がリモート追跡ブランチの内容を変更することはできないこと&lt;/li&gt;
&lt;li&gt;&lt;code&gt;origin/ブランチ名&lt;/code&gt; ってやつはリモート追跡ブランチを指している&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rebase&lt;/code&gt; はコミットを作り直す(ここがリモートに上げたものに&lt;code&gt;rebase&lt;/code&gt; すべきでないと言われる理由)&lt;/li&gt;
&lt;li&gt;そして故に、&lt;code&gt;rebase&lt;/code&gt; 後はコミットのハッシュが変わるため、pushがリジェクトされる (これが &lt;code&gt;rebase&lt;/code&gt; 後に &lt;code&gt;force push&lt;/code&gt; が必要になる理由)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ということがわかった上で、最後は運用ルール次第なのかなと思った。&lt;br&gt;
コミット履歴を汚さないために &lt;code&gt;rebase&lt;/code&gt; を推奨する場合もある。(以前一緒に働いていたロシア人もそうだった。)&lt;br&gt;&lt;/p&gt;

&lt;p&gt;そんな中で腑に落ちたのがこれ。&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yakst.com/ja/posts/18&#34;&gt;git rebaseを使うときのルール&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;簡単にまとめると、gitの履歴は綺麗であるべき。だから個人のリポジトリでは&lt;code&gt;rebase&lt;/code&gt; も好きに使えば良い。&lt;br&gt;
ただチーム開発においてはなにより、他人のコミットに&lt;code&gt;rebase&lt;/code&gt; してはいけない。それは他人のコミットを消すということだから(多分ハッシュ値が書き換わるという意味で)。「自分の履歴をきれいに」と 「他人 の履歴をいじるな」。&lt;/p&gt;

&lt;h2 id=&#34;その他参考リンク&#34;&gt;その他参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kaeruspoon.net/articles/1078&#34;&gt;Gitのリモートブランチと追跡ブランチは違うよ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/uasi/items/69368c17c79e99aaddbf&#34;&gt;Git で「追跡ブランチ」って言うのやめましょう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kernel.org/pub/software/scm/git/docs/gitglossary.html&#34;&gt;gitglossary(7) Manual Page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>起業家はどこで選択を誤るのか</title>
      <link>http://kotazi.github.io/blog/post/2016/1006_kigyouka/</link>
      <pubDate>Thu, 06 Oct 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/1006_kigyouka/</guid>
      <description>&lt;p&gt;スマホをAndroidに変えてから読書の量が大幅に減ったためか、ブログの更新が一ヶ月ぶりになってしまった。&lt;br&gt;
iPhoneではVoiceOverの読み上げ機能を使って基本耳で聞きながら読書している。AndroidにもTalkBackという読み上げ機能はあるのだが、
どうやら肌に合わなかったらしい。iPhone7を購入したので最近は読書量が再び増えてきた。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a  href=&#34;https://www.amazon.co.jp/gp/product/4862761682/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4862761682&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;起業家はどこで選択を誤るのか――スタートアップが必ず陥る9つのジレンマ&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=kotazi-22&amp;l=as2&amp;o=9&amp;a=4862761682&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;
◯ 第Ⅰ部 創業前夜&lt;br&gt;
第１章 イントロダクション&lt;br&gt;
第２章 キャリアのジレンマ&lt;br&gt;&lt;/p&gt;

&lt;p&gt;◯ 第Ⅱ部 創業チームのジレンマ&lt;br&gt;
第３章 ソロかチームかのジレンマ&lt;br&gt;
第４章 人間関係のジレンマ&lt;br&gt;
第５章 役割のジレンマ&lt;br&gt;
第６章 報酬のジレンマ&lt;br&gt;
第７章 ３Rシステム&lt;br&gt;&lt;/p&gt;

&lt;p&gt;◯ 第Ⅲ部 創業チームを超えて&lt;br&gt;
第８章 雇用のジレンマ&lt;br&gt;
第９章 投資家のジレンマ&lt;br&gt;
第１０章 ファウンダーCEO交代のジレンマ&lt;br&gt;&lt;/p&gt;

&lt;p&gt;◯ 第Ⅳ部 総論&lt;br&gt;
第１１章 富かコントロールかのジレンマ&lt;br&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;ハーバード・ビジネススクール教授のノーム・ワッサーマンが10年分の研究をまとめたという本作。
調査データを元に、企業における様々なジレンマに対してどのようなアプローチをとるべきかを示唆している。&lt;/p&gt;

&lt;p&gt;Amazonや他ブログでは比較的高い評価を得ていたが、個人的には現実が伴っていないように感じてあまり面白く感じなかった。
Kindleで「私の調査データ」と検索をかけると43件マッチする。けれども彼の言う調査データが何なのかよく分からない。
あと基本的に冗長で同じことを何回も書いているので1/3の量にまとめてくれれば&amp;hellip;。笑&lt;/p&gt;

&lt;p&gt;ただ自分も起業家ではないのであまりこういった本を批判するのもどうかと思うので、自分なりに感じた部分について書きたい。&lt;/p&gt;

&lt;p&gt;本書のなかでもいくつかのジレンマについて触れられているが、そのほとんどは「人」がいるから生まれるものだ。
起業をしてEXITを目指すとなると、本当にさまざまな人が関わってくる。さまざまな想いを持った、さまざまな立場の人々。
そういう人たちがさまざまな量の時間なり金なりを一つの会社に投資するわけだから、そりゃしがらみも生まれる。&lt;/p&gt;

&lt;p&gt;そうしたしがらみ、そのための意思決定の場面は幾度とあるのだろうが、やはり最初が肝心なのだろう。
最初の仲間。彼の役割、エクイティの分配。最後まで一緒に走りきりたいのであれば、高い比率で分配してもいいかもしれないし、場合によっては優先株やSOを使えばコントロールを渡さずに富による報酬を用意することもできる。後に続く仲間は最初の人と少なからず比較することになるので、最初は間違えてはいけない。&lt;/p&gt;

&lt;p&gt;投資家選びも最初が肝心というのはきっと同じ。自分に足りていないリソースを見極めて、お金が必要なだけでコントロールは渡したくないとか、もしくは経験豊富な人にアドバイスも貰いたいのかとか、お互い納得できる人と出会えればいいと思う。(きっとそれが難しくて多くの人に会うんだろうな)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【Webpack】devtoolのこと</title>
      <link>http://kotazi.github.io/blog/post/2016/0906_webpack_debug/</link>
      <pubDate>Tue, 06 Sep 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0906_webpack_debug/</guid>
      <description>&lt;p&gt;Webpackでビルドしたファイルのデバッグ方法が気になっていたので少し調べてみた。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;結論からいうと&lt;code&gt;webpack.config.js&lt;/code&gt;の&lt;code&gt;devtool&lt;/code&gt;オプションから設定できる。
さらに言えば開発環境では&lt;code&gt;cheap-module-eval-source-map&lt;/code&gt;、本番環境では&lt;code&gt;cheap-module-source-map&lt;/code&gt;を設定するのが良い。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://webpack.github.io/docs/configuration.html#devtool&#34;&gt;configuration | Webpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cheng.logdown.com/posts/2016/03/25/679045&#34;&gt;Webpack devtool source map « Cheng&amp;rsquo;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本番環境をサポートしているものとしていないものがあるのでその点は注意すること。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Missing .map resource?</title>
      <link>http://kotazi.github.io/blog/post/2016/0824_missing_sourcemap/</link>
      <pubDate>Tue, 23 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0824_missing_sourcemap/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/18499930/missing-map-resource&#34;&gt;Missing .map resource? [duplicate]&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Failed to load resource: the server responded with a status of 404 (HTTP/2.0 404)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Safariでbootstrap.css.mapがないというエラーが出ていたから調べてみたけど、
特に問題はないらしい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【読書】不格好経営</title>
      <link>http://kotazi.github.io/blog/post/2016/0816_nanba/</link>
      <pubDate>Tue, 16 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0816_nanba/</guid>
      <description>&lt;p&gt;&lt;a  href=&#34;https://www.amazon.co.jp/gp/product/4532318955/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4532318955&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;不格好経営―チームDeNAの挑戦&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=kotazi-22&amp;l=as2&amp;o=9&amp;a=4532318955&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;を読みました。&lt;/p&gt;

&lt;hr&gt;

&lt;ul&gt;
&lt;li&gt;第1章 立ち上げ&lt;/li&gt;
&lt;li&gt;第2章 生い立ち&lt;/li&gt;
&lt;li&gt;第3章 金策&lt;/li&gt;
&lt;li&gt;第4章 モバイルシフト&lt;/li&gt;
&lt;li&gt;第5章 ソーシャルゲーム&lt;/li&gt;
&lt;li&gt;第6章 退任&lt;/li&gt;
&lt;li&gt;第7章 人と組織&lt;/li&gt;
&lt;li&gt;第8章 これから&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;DeNA創業者の南場社長の著書。&lt;br /&gt;
本書は一字一句南場社長自身によって綴られている。
多少日記調の部分もあるが、やはり本人が書いているとリアリティがある。&lt;/p&gt;

&lt;p&gt;新卒説明会でDeNAの話を聞きに行った時、少しだけ南場社長に質問させてもらったことがある。
何を聞いたか今では忘れてしまったが、すごくエネルギッシュな人だと思った。&lt;/p&gt;

&lt;p&gt;そんな南場社長がDeNAの社長退任をすると聞いた時はとても驚いた。
本書の中に夫がガン宣告をされた時の考えが記されているので引用する。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;子どもに恵まれなかったふたちは、あまり家庭らしさのない夫婦で、
互いに仕事を最優先にそれぞれ勝手にやってきた。ふたりとも深夜遅くに帰宅するやいなや爆睡するというパターンが多く、生存確認はするが話をする時間はない。マッキンゼーの同窓会で久しぶり！と挨拶をすることもあった。掃除もしない、漁師もしない、仕事ばかりする妻を、面白がって放っておいてくれた。&lt;br /&gt;
今を起点にベストを尽くす。10年以上経営者をやり、そういう訓練だけはしてきたはずだ。過去を悔いても仕方がない。これからだ。告知されてからずっと暗い不安の淵に行ってしまったような夫の目を思い出す。今行くから。助けに行くから。これまでの人生は全部この時のためにあったんじゃないだろうか。そんなふうに思った。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;現在は復帰しているのでこれからも頑張ってほしい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【読書】営業の「聴く技術」 SPIN</title>
      <link>http://kotazi.github.io/blog/post/2016/0803_spin/</link>
      <pubDate>Sat, 13 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0803_spin/</guid>
      <description>&lt;p&gt;&lt;a  href=&#34;https://www.amazon.co.jp/gp/product/447808260X/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=447808260X&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;営業の「聴く技術」 新版―SPIN「4つの質問」「3つの説明」&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=kotazi-22&amp;l=as2&amp;o=9&amp;a=447808260X&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;
を読みました。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Cp1. 営業を成功へと導く質問技法&lt;br /&gt;
Cp2. ホンモノの営業スキルとは&amp;hellip;&lt;br /&gt;
Cp3. クロージング神話の崩壊とSPINの誕生&lt;br /&gt;
Cp4. 顧客の心理をハートフルに動かす「4つの質問」&lt;br /&gt;
Cp5. 「3つの説明」商談成功のクライマックス&lt;br /&gt;
Cp6. 変革・改革・激動の世紀を生き抜くスキル&lt;br /&gt;
Cp7. サクセス企業のリポート 4社の事例&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;非常に文章力に欠けた本だったので感想を簡略に記す。&lt;/p&gt;

&lt;p&gt;SPINの真髄は&amp;rdquo;しゃべるな、しゃべらせろ&amp;rdquo;。&lt;br /&gt;
従来「営業はしゃべるもの」を前提に本書はSPINについて解説している。&lt;/p&gt;

&lt;p&gt;オールドスタイルのセールス技法として、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;推定承諾法: 買い手が買う気前提に、詰めていく(「いつ届けましょうか？」など)&lt;/li&gt;
&lt;li&gt;二者択一法: 「AとB、どちらにしますか？」&lt;/li&gt;
&lt;li&gt;立見席法: 「すごい人気。今日ならまだ買えますよ。」不動産などで使われる。&lt;/li&gt;
&lt;li&gt;導入時期強調法: 「システム開発に4ヶ月はかかるから、早めに決断しないと」&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などは、顧客の気持ちに立てていない。&lt;/p&gt;

&lt;p&gt;そこでSPIN。
SPINは「2つのニーズ、4つの質問、3つの説明」によって構成される。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;潜在ニーズ&lt;/li&gt;

&lt;li&gt;&lt;p&gt;顕在ニーズ&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;状況質問(SituationQ)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;問題質問(ProblemQ)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;示唆質問(ImplicationQ)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;解決質問(Need-PayoffQ)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;特徴(Features)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;利点(Advantages)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;利益(Benefits)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2008年に書かれたという割には目新しいことが何も書かれていなかった。&lt;/p&gt;

&lt;p&gt;けれども著者が1940年生まれということだったので、仕方ないかなあとも思った。&lt;/p&gt;

&lt;p&gt;昔はそうだったのかも。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【読書】社長失格</title>
      <link>http://kotazi.github.io/blog/post/2016/0802_syacho_shikkaku/</link>
      <pubDate>Fri, 12 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0802_syacho_shikkaku/</guid>
      <description>&lt;p&gt;&lt;a  href=&#34;https://www.amazon.co.jp/gp/product/4822241300/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4822241300&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;社長失格&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=kotazi-22&amp;l=as2&amp;o=9&amp;a=4822241300&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;
を読みました。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;うまくまとまっている本ではないが、ハイパーネットの板倉社長の半生がかなり赤裸々に書かれている。「ここまで書いて平気なのだろうか？」と思うぐらい登場人物の名前や取引会社などのことが書かれているので、ある意味他の本では決して読めないことが書いてあるし、一読の価値がある一冊だ。&lt;/p&gt;

&lt;p&gt;会社が成長し、衰退し倒産していくまで。
その間で関わってくる人たち、そしてその態度の変化がしっかりと描かれていた。&lt;/p&gt;

&lt;p&gt;また、事業を急成長させていくうえで出資なり融資なりの協力はとても大きい。
大きいからこそしっかりと知り、適切な関係を築いていかなくてはならない。&lt;/p&gt;

&lt;p&gt;その上で、人が最大の資産だということを忘れない。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【Go】Deploying a Go App</title>
      <link>http://kotazi.github.io/blog/post/2016/0810_goapp_deploy/</link>
      <pubDate>Wed, 10 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0810_goapp_deploy/</guid>
      <description>&lt;p&gt;GCP/Goアプリケーションのデプロイ周りについて学んでいたところ。&lt;br /&gt;
&lt;code&gt;goapp deploy&lt;/code&gt;だったり、GoogleAppEngineLauncherだったり、
&lt;code&gt;appcfg.py&lt;/code&gt;だったり、&lt;code&gt;dev_appserver.py&lt;/code&gt;だったりと少しややこしくなった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/appengine/docs/go/tools/uploadinganapp#top_of_page&#34;&gt;Deploying a Go App&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まず、&lt;code&gt;goapp&lt;/code&gt;は&lt;a href=&#34;https://cloud.google.com/appengine/downloads#Google_App_Engine_SDK_for_Go&#34;&gt;App Engine Go SDK&lt;/a&gt;
に含まれているものだ。&lt;code&gt;appcfg.py&lt;/code&gt;もここに含まれている。&lt;/p&gt;

&lt;p&gt;デプロイ後、アプリケーションは&lt;code&gt;https://&amp;lt;YOUR-PROJECT-ID&amp;gt;.appspot.com&lt;/code&gt;で動作する。&lt;/p&gt;

&lt;p&gt;ファイルをアップロードするには、&lt;code&gt;goapp deploy&lt;/code&gt;をアプリケーションのルートディレクトリから実行しよう。この時ルートディレクトリには
&lt;code&gt;app.yaml&lt;/code&gt;が用意されていなければならない。
引数を使ってルートの位置を示すこともできるけれども、細かいことは&lt;code&gt;goapp help deploy&lt;/code&gt;で見てほしい。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app.yaml&lt;/code&gt;にあるアプリケーションIDを自動的に使う。けれども多くのサンプルアプリケーションでは&lt;code&gt;app.yaml&lt;/code&gt;から&lt;code&gt;application:&lt;/code&gt;や
&lt;code&gt;version:&lt;/code&gt;を除外している。そういう場合はコンソールからバージョンやアプリケーションIDを指定する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;goapp deploy -application &amp;lt;YOUR_PROJECT_ID&amp;gt; -V v1 myapp/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;アプリケーションが複数の&lt;a href=&#34;https://cloud.google.com/appengine/docs/go/configuration-files&#34;&gt;サービス&lt;/a&gt;から成る場合、
更新するサービスを指定することができる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;デフォルトのサービスを更新する場合、リストの最初ものが更新される&lt;/li&gt;
&lt;li&gt;初めて更新する場合、デフォルトのサービスは必ず含まれる&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>【Go】Go Bookshelf App: PubSub</title>
      <link>http://kotazi.github.io/blog/post/2016/0809_go_pub_sub/</link>
      <pubDate>Tue, 09 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0809_go_pub_sub/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/go/getting-started/using-pub-sub&#34;&gt;Using Cloud Pub/Sub with Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.google.com/books/&#34;&gt;Google Book API&lt;/a&gt;を使ってバックグラウンドワーカーに処理をさせる。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;前回同様、&lt;code&gt;config.go&lt;/code&gt;から下記部分のコメントを削除し、ProjectIDを書き換える。&lt;/p&gt;

&lt;p&gt;ローカルホストを立ち上げた状態で下記のコマンドでバックグラウンドワーカーが動く。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd $GOPATH/src/github.com/GoogleCloudPlatform/golang-samples/getting-started/bookshelf
cd pubsub_worker
PORT=8081 go run worker.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;http://localhost:8081/&lt;/code&gt;でワーカーインスタンスに立直できる。
処理した本の数についてのステータスが確認できる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.evernote.com/l/Aj24JXT3jO1BGJQHmgGX0QAoHCxcg56AdDIB/image.png&#34; alt=&#34;Pasted%20Image%208/3/16,%2011:14&#34; /&gt;&lt;/p&gt;

&lt;p&gt;↑ 「イノベーションのジレンマ」とタイトルをいれると勝手に入る&lt;/p&gt;

&lt;h3 id=&#34;デプロイする&#34;&gt;デプロイする&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ cd $GOPATH/src/github.com/GoogleCloudPlatform/golang-samples/getting-started/bookshelf

# Deploy the worker
cd pubsub_worker
aedeploy gcloud app deploy

# Deploy the main app
cd ../app
aedeploy gcloud app deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下記がアクセス先になる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://[YOUR_PROJECT_ID].appspot.com
https://worker-dot-[YOUR_PROJECT_ID].appspot.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/go/images/go-pub-sub.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;データベース内で本が更新されるとCloud Pub/Subが走る。
ワーカーは分離して稼働していて、これらのイベントをリッスンしている。
イベントを受け取るとワーカーkはBooksAPIにリクエストを作成し、データベースの本の記録を更新する。&lt;/p&gt;

&lt;p&gt;以上。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【Go】Go Bookshelf App: Logging</title>
      <link>http://kotazi.github.io/blog/post/2016/0808_go_logging/</link>
      <pubDate>Mon, 08 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0808_go_logging/</guid>
      <description>&lt;p&gt;どのようにして詳細なログ情報を残していくか。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/go/getting-started/logging-application-events&#34;&gt;Logging Application Events with Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cloud Platformの提供するログやモニタリングツールがあるので、Cloud Platform Consoleから簡単に確認することができる。&lt;/p&gt;

&lt;p&gt;このサンプルでは標準の&lt;code&gt;log&lt;/code&gt;パッケージとGorillaの&lt;code&gt;CombinedLoggingHandler&lt;/code&gt;を利用している。&lt;/p&gt;

&lt;p&gt;標準のエラー:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type appHandler func(http.ResponseWriter, *http.Request) *appError

type appError struct {
        Error   error
        Message string
        Code    int
}

func (fn appHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
        if e := fn(w, r); e != nil { // e is *appError, not os.Error.
                log.Printf(&amp;quot;Handler error: status code: %d, message: %s, underlying err: %#v&amp;quot;,
                        e.Code, e.Message, e.Error)

                http.Error(w, e.Message, e.Code)
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;HTTPリクエストのログ:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Delegate all of the HTTP routing and serving to the gorilla/mux router.
// Log all requests using the standard Apache format.
http.Handle(&amp;quot;/&amp;quot;, handlers.CombinedLoggingHandler(os.Stderr, r))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ログは&lt;a href=&#34;https://console.cloud.google.com/logs/viewer&#34;&gt;ここ&lt;/a&gt;から見れる。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【Go】Go Bookshelf App: Authenticating Users</title>
      <link>http://kotazi.github.io/blog/post/2016/0805_go_authenticating_users/</link>
      <pubDate>Fri, 05 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0805_go_authenticating_users/</guid>
      <description>

&lt;p&gt;OAuth2.0を使ったユーザー認証。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/go/getting-started/authenticate-users&#34;&gt;Authenticating Users with Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h3 id=&#34;web-application-client-idの作成&#34;&gt;Web application client IDの作成&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://console.cloud.google.com/apis/credentials&#34;&gt;credentials&lt;/a&gt;へアクセスし、&lt;code&gt;OAuth consent screen&lt;/code&gt;をクリック。
プロダクト名のところに&lt;code&gt;Go Bookshelf App&lt;/code&gt;と入力し、その他も任意で記入する。&lt;/p&gt;

&lt;p&gt;保存後、&lt;code&gt;Create credentials &amp;gt; OAuth client ID&lt;/code&gt;と移動し、&lt;code&gt;Application type&lt;/code&gt;では&lt;code&gt;Web application&lt;/code&gt;を選択。
&lt;code&gt;Name&lt;/code&gt;は&lt;code&gt;Go Bookshelf Client&lt;/code&gt;。&lt;code&gt;Authorized redirect URIs&lt;/code&gt;にProjectIDに置き換えた値を入れる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://localhost:8080/oauth2callback
http://[YOUR_PROJECT_ID].appspot.com/oauth2callback
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;作成すると、IDとclient secretが表示されるので保存しておくこと。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;前回同様、下記へ移動して&lt;code&gt;config.go&lt;/code&gt;を開く。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd $GOPATH/src/github.com/GoogleCloudPlatform/golang-samples/getting-started/bookshelf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下記のコメントを削除し、clientidとclientsecretを先ほどの値に置き換える。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// oauthConfig = configureOAuthClient(&amp;quot;clientid&amp;quot;, &amp;quot;clientsecret&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;app/app.yaml&lt;/code&gt;を開き、&lt;code&gt;OAUTH2_CALLBACK&lt;/code&gt;のProjectIDを自分のものに置き換える。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;ローカルの立ち上げやデプロイは前回同様。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/go/images/go-auth.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;セッションを扱うために&lt;a href=&#34;http://www.gorillatoolkit.org/&#34;&gt;Gorilla web toolkit&lt;/a&gt;を使っている。
Gorillaはいくつかの&lt;code&gt;Store&lt;/code&gt;インターフェイスを持っているが、今回は&lt;code&gt;CookieStore&lt;/code&gt;を利用。&lt;/p&gt;

&lt;p&gt;認証の仕組みはまず、Googleの認証画面にリダイレクトさせ、そのレスポンスを、ユーザーがアプリケーションに戻る際に処理させるというものである。&lt;/p&gt;

&lt;p&gt;アプリケーションはClientIDとOAuthスコープを使ってURLを生成する。スコープには、アプリケーションがアクセスしようとするユーザー情報が何かということを含む。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;config.go&lt;/code&gt;のこの部分がそれにあたる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func configureOAuthClient(clientID, clientSecret string) *oauth2.Config {
        redirectURL := os.Getenv(&amp;quot;OAUTH2_CALLBACK&amp;quot;)
        if redirectURL == &amp;quot;&amp;quot; {
                redirectURL = &amp;quot;http://localhost:8080/oauth2callback&amp;quot;
        }
        return &amp;amp;oauth2.Config{
                ClientID:     clientID,
                ClientSecret: clientSecret,
                RedirectURL:  redirectURL,
                Scopes:       []string{&amp;quot;email&amp;quot;, &amp;quot;profile&amp;quot;},
                Endpoint:     google.Endpoint,
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;認証が完了するとGoogle認証サービスは&lt;code&gt;/oauth2callback&lt;/code&gt;を通してユーザーをアプリケーションへ戻す。&lt;/p&gt;

&lt;p&gt;認証後はGoogle+ APIが利用できるため&lt;code&gt;plusService.People.Get(&amp;quot;me&amp;quot;)&lt;/code&gt;を使うと認証済みのユーザーの情報が取得できる。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>