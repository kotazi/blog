<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kotazi.com</title>
    <link>http://kotazi.github.io/blog/</link>
    <description>Recent content on kotazi.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 06 Sep 2016 13:38:10 +0900</lastBuildDate>
    <atom:link href="http://kotazi.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>【Webpack】devtoolのこと</title>
      <link>http://kotazi.github.io/blog/post/2016/0906_webpack_debug/</link>
      <pubDate>Tue, 06 Sep 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0906_webpack_debug/</guid>
      <description>&lt;p&gt;Webpackでビルドしたファイルのデバッグ方法が気になっていたので少し調べてみた。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;結論からいうと&lt;code&gt;webpack.config.js&lt;/code&gt;の&lt;code&gt;devtool&lt;/code&gt;オプションから設定できる。
さらに言えば開発環境では&lt;code&gt;cheap-module-eval-source-map&lt;/code&gt;、本番環境では&lt;code&gt;cheap-module-source-map&lt;/code&gt;を設定するのが良い。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://webpack.github.io/docs/configuration.html#devtool&#34;&gt;configuration | Webpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cheng.logdown.com/posts/2016/03/25/679045&#34;&gt;Webpack devtool source map « Cheng&amp;rsquo;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本番環境をサポートしているものとしていないものがあるのでその点は注意すること。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Missing .map resource?</title>
      <link>http://kotazi.github.io/blog/post/2016/0824_missing_sourcemap/</link>
      <pubDate>Tue, 23 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0824_missing_sourcemap/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/18499930/missing-map-resource&#34;&gt;Missing .map resource? [duplicate]&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Failed to load resource: the server responded with a status of 404 (HTTP/2.0 404)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Safariでbootstrap.css.mapがないというエラーが出ていたから調べてみたけど、
特に問題はないらしい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【読書】不格好経営</title>
      <link>http://kotazi.github.io/blog/post/2016/0816_nanba/</link>
      <pubDate>Tue, 16 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0816_nanba/</guid>
      <description>&lt;p&gt;&lt;a  href=&#34;https://www.amazon.co.jp/gp/product/4532318955/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4532318955&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;不格好経営―チームDeNAの挑戦&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=kotazi-22&amp;l=as2&amp;o=9&amp;a=4532318955&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;を読みました。&lt;/p&gt;

&lt;hr&gt;

&lt;ul&gt;
&lt;li&gt;第1章 立ち上げ&lt;/li&gt;
&lt;li&gt;第2章 生い立ち&lt;/li&gt;
&lt;li&gt;第3章 金策&lt;/li&gt;
&lt;li&gt;第4章 モバイルシフト&lt;/li&gt;
&lt;li&gt;第5章 ソーシャルゲーム&lt;/li&gt;
&lt;li&gt;第6章 退任&lt;/li&gt;
&lt;li&gt;第7章 人と組織&lt;/li&gt;
&lt;li&gt;第8章 これから&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;DeNA創業者の南場社長の著書。&lt;br /&gt;
本書は一字一句南場社長自身によって綴られている。
多少日記調の部分もあるが、やはり本人が書いているとリアリティがある。&lt;/p&gt;

&lt;p&gt;新卒説明会でDeNAの話を聞きに行った時、少しだけ南場社長に質問させてもらったことがある。
何を聞いたか今では忘れてしまったが、すごくエネルギッシュな人だと思った。&lt;/p&gt;

&lt;p&gt;そんな南場社長がDeNAの社長退任をすると聞いた時はとても驚いた。
本書の中に夫がガン宣告をされた時の考えが記されているので引用する。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;子どもに恵まれなかったふたちは、あまり家庭らしさのない夫婦で、
互いに仕事を最優先にそれぞれ勝手にやってきた。ふたりとも深夜遅くに帰宅するやいなや爆睡するというパターンが多く、生存確認はするが話をする時間はない。マッキンゼーの同窓会で久しぶり！と挨拶をすることもあった。掃除もしない、漁師もしない、仕事ばかりする妻を、面白がって放っておいてくれた。&lt;br /&gt;
今を起点にベストを尽くす。10年以上経営者をやり、そういう訓練だけはしてきたはずだ。過去を悔いても仕方がない。これからだ。告知されてからずっと暗い不安の淵に行ってしまったような夫の目を思い出す。今行くから。助けに行くから。これまでの人生は全部この時のためにあったんじゃないだろうか。そんなふうに思った。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;現在は復帰しているのでこれからも頑張ってほしい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【読書】営業の「聴く技術」 SPIN</title>
      <link>http://kotazi.github.io/blog/post/2016/0803_spin/</link>
      <pubDate>Sat, 13 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0803_spin/</guid>
      <description>&lt;p&gt;&lt;a  href=&#34;https://www.amazon.co.jp/gp/product/447808260X/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=447808260X&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;営業の「聴く技術」 新版―SPIN「4つの質問」「3つの説明」&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=kotazi-22&amp;l=as2&amp;o=9&amp;a=447808260X&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;
を読みました。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Cp1. 営業を成功へと導く質問技法&lt;br /&gt;
Cp2. ホンモノの営業スキルとは&amp;hellip;&lt;br /&gt;
Cp3. クロージング神話の崩壊とSPINの誕生&lt;br /&gt;
Cp4. 顧客の心理をハートフルに動かす「4つの質問」&lt;br /&gt;
Cp5. 「3つの説明」商談成功のクライマックス&lt;br /&gt;
Cp6. 変革・改革・激動の世紀を生き抜くスキル&lt;br /&gt;
Cp7. サクセス企業のリポート 4社の事例&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;非常に文章力に欠けた本だったので感想を簡略に記す。&lt;/p&gt;

&lt;p&gt;SPINの真髄は&amp;rdquo;しゃべるな、しゃべらせろ&amp;rdquo;。&lt;br /&gt;
従来「営業はしゃべるもの」を前提に本書はSPINについて解説している。&lt;/p&gt;

&lt;p&gt;オールドスタイルのセールス技法として、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;推定承諾法: 買い手が買う気前提に、詰めていく(「いつ届けましょうか？」など)&lt;/li&gt;
&lt;li&gt;二者択一法: 「AとB、どちらにしますか？」&lt;/li&gt;
&lt;li&gt;立見席法: 「すごい人気。今日ならまだ買えますよ。」不動産などで使われる。&lt;/li&gt;
&lt;li&gt;導入時期強調法: 「システム開発に4ヶ月はかかるから、早めに決断しないと」&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などは、顧客の気持ちに立てていない。&lt;/p&gt;

&lt;p&gt;そこでSPIN。
SPINは「2つのニーズ、4つの質問、3つの説明」によって構成される。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;潜在ニーズ&lt;/li&gt;

&lt;li&gt;&lt;p&gt;顕在ニーズ&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;状況質問(SituationQ)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;問題質問(ProblemQ)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;示唆質問(ImplicationQ)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;解決質問(Need-PayoffQ)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;特徴(Features)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;利点(Advantages)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;利益(Benefits)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2008年に書かれたという割には目新しいことが何も書かれていなかった。&lt;/p&gt;

&lt;p&gt;けれども著者が1940年生まれということだったので、仕方ないかなあとも思った。&lt;/p&gt;

&lt;p&gt;昔はそうだったのかも。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【読書】社長失格</title>
      <link>http://kotazi.github.io/blog/post/2016/0802_syacho_shikkaku/</link>
      <pubDate>Fri, 12 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0802_syacho_shikkaku/</guid>
      <description>&lt;p&gt;&lt;a  href=&#34;https://www.amazon.co.jp/gp/product/4822241300/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4822241300&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;社長失格&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=kotazi-22&amp;l=as2&amp;o=9&amp;a=4822241300&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;
を読みました。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;うまくまとまっている本ではないが、ハイパーネットの板倉社長の半生がかなり赤裸々に書かれている。「ここまで書いて平気なのだろうか？」と思うぐらい登場人物の名前や取引会社などのことが書かれているので、ある意味他の本では決して読めないことが書いてあるし、一読の価値がある一冊だ。&lt;/p&gt;

&lt;p&gt;会社が成長し、衰退し倒産していくまで。
その間で関わってくる人たち、そしてその態度の変化がしっかりと描かれていた。&lt;/p&gt;

&lt;p&gt;また、事業を急成長させていくうえで出資なり融資なりの協力はとても大きい。
大きいからこそしっかりと知り、適切な関係を築いていかなくてはならない。&lt;/p&gt;

&lt;p&gt;その上で、人が最大の資産だということを忘れない。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【Go】Deploying a Go App</title>
      <link>http://kotazi.github.io/blog/post/2016/0810_goapp_deploy/</link>
      <pubDate>Wed, 10 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0810_goapp_deploy/</guid>
      <description>&lt;p&gt;GCP/Goアプリケーションのデプロイ周りについて学んでいたところ。&lt;br /&gt;
&lt;code&gt;goapp deploy&lt;/code&gt;だったり、GoogleAppEngineLauncherだったり、
&lt;code&gt;appcfg.py&lt;/code&gt;だったり、&lt;code&gt;dev_appserver.py&lt;/code&gt;だったりと少しややこしくなった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/appengine/docs/go/tools/uploadinganapp#top_of_page&#34;&gt;Deploying a Go App&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まず、&lt;code&gt;goapp&lt;/code&gt;は&lt;a href=&#34;https://cloud.google.com/appengine/downloads#Google_App_Engine_SDK_for_Go&#34;&gt;App Engine Go SDK&lt;/a&gt;
に含まれているものだ。&lt;code&gt;appcfg.py&lt;/code&gt;もここに含まれている。&lt;/p&gt;

&lt;p&gt;デプロイ後、アプリケーションは&lt;code&gt;https://&amp;lt;YOUR-PROJECT-ID&amp;gt;.appspot.com&lt;/code&gt;で動作する。&lt;/p&gt;

&lt;p&gt;ファイルをアップロードするには、&lt;code&gt;goapp deploy&lt;/code&gt;をアプリケーションのルートディレクトリから実行しよう。この時ルートディレクトリには
&lt;code&gt;app.yaml&lt;/code&gt;が用意されていなければならない。
引数を使ってルートの位置を示すこともできるけれども、細かいことは&lt;code&gt;goapp help deploy&lt;/code&gt;で見てほしい。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app.yaml&lt;/code&gt;にあるアプリケーションIDを自動的に使う。けれども多くのサンプルアプリケーションでは&lt;code&gt;app.yaml&lt;/code&gt;から&lt;code&gt;application:&lt;/code&gt;や
&lt;code&gt;version:&lt;/code&gt;を除外している。そういう場合はコンソールからバージョンやアプリケーションIDを指定する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;goapp deploy -application &amp;lt;YOUR_PROJECT_ID&amp;gt; -V v1 myapp/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;アプリケーションが複数の&lt;a href=&#34;https://cloud.google.com/appengine/docs/go/configuration-files&#34;&gt;サービス&lt;/a&gt;から成る場合、
更新するサービスを指定することができる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;デフォルトのサービスを更新する場合、リストの最初ものが更新される&lt;/li&gt;
&lt;li&gt;初めて更新する場合、デフォルトのサービスは必ず含まれる&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>【Go】Go Bookshelf App: PubSub</title>
      <link>http://kotazi.github.io/blog/post/2016/0809_go_pub_sub/</link>
      <pubDate>Tue, 09 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0809_go_pub_sub/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/go/getting-started/using-pub-sub&#34;&gt;Using Cloud Pub/Sub with Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.google.com/books/&#34;&gt;Google Book API&lt;/a&gt;を使ってバックグラウンドワーカーに処理をさせる。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;前回同様、&lt;code&gt;config.go&lt;/code&gt;から下記部分のコメントを削除し、ProjectIDを書き換える。&lt;/p&gt;

&lt;p&gt;ローカルホストを立ち上げた状態で下記のコマンドでバックグラウンドワーカーが動く。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd $GOPATH/src/github.com/GoogleCloudPlatform/golang-samples/getting-started/bookshelf
cd pubsub_worker
PORT=8081 go run worker.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;http://localhost:8081/&lt;/code&gt;でワーカーインスタンスに立直できる。
処理した本の数についてのステータスが確認できる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.evernote.com/l/Aj24JXT3jO1BGJQHmgGX0QAoHCxcg56AdDIB/image.png&#34; alt=&#34;Pasted%20Image%208/3/16,%2011:14&#34; /&gt;&lt;/p&gt;

&lt;p&gt;↑ 「イノベーションのジレンマ」とタイトルをいれると勝手に入る&lt;/p&gt;

&lt;h3 id=&#34;デプロイする&#34;&gt;デプロイする&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ cd $GOPATH/src/github.com/GoogleCloudPlatform/golang-samples/getting-started/bookshelf

# Deploy the worker
cd pubsub_worker
aedeploy gcloud app deploy

# Deploy the main app
cd ../app
aedeploy gcloud app deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下記がアクセス先になる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://[YOUR_PROJECT_ID].appspot.com
https://worker-dot-[YOUR_PROJECT_ID].appspot.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/go/images/go-pub-sub.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;データベース内で本が更新されるとCloud Pub/Subが走る。
ワーカーは分離して稼働していて、これらのイベントをリッスンしている。
イベントを受け取るとワーカーkはBooksAPIにリクエストを作成し、データベースの本の記録を更新する。&lt;/p&gt;

&lt;p&gt;以上。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【Go】Go Bookshelf App: Logging</title>
      <link>http://kotazi.github.io/blog/post/2016/0808_go_logging/</link>
      <pubDate>Mon, 08 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0808_go_logging/</guid>
      <description>&lt;p&gt;どのようにして詳細なログ情報を残していくか。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/go/getting-started/logging-application-events&#34;&gt;Logging Application Events with Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cloud Platformの提供するログやモニタリングツールがあるので、Cloud Platform Consoleから簡単に確認することができる。&lt;/p&gt;

&lt;p&gt;このサンプルでは標準の&lt;code&gt;log&lt;/code&gt;パッケージとGorillaの&lt;code&gt;CombinedLoggingHandler&lt;/code&gt;を利用している。&lt;/p&gt;

&lt;p&gt;標準のエラー:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type appHandler func(http.ResponseWriter, *http.Request) *appError

type appError struct {
        Error   error
        Message string
        Code    int
}

func (fn appHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
        if e := fn(w, r); e != nil { // e is *appError, not os.Error.
                log.Printf(&amp;quot;Handler error: status code: %d, message: %s, underlying err: %#v&amp;quot;,
                        e.Code, e.Message, e.Error)

                http.Error(w, e.Message, e.Code)
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;HTTPリクエストのログ:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Delegate all of the HTTP routing and serving to the gorilla/mux router.
// Log all requests using the standard Apache format.
http.Handle(&amp;quot;/&amp;quot;, handlers.CombinedLoggingHandler(os.Stderr, r))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ログは&lt;a href=&#34;https://console.cloud.google.com/logs/viewer&#34;&gt;ここ&lt;/a&gt;から見れる。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【Go】Go Bookshelf App: Authenticating Users</title>
      <link>http://kotazi.github.io/blog/post/2016/0805_go_authenticating_users/</link>
      <pubDate>Fri, 05 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0805_go_authenticating_users/</guid>
      <description>

&lt;p&gt;OAuth2.0を使ったユーザー認証。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/go/getting-started/authenticate-users&#34;&gt;Authenticating Users with Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h3 id=&#34;web-application-client-idの作成&#34;&gt;Web application client IDの作成&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://console.cloud.google.com/apis/credentials&#34;&gt;credentials&lt;/a&gt;へアクセスし、&lt;code&gt;OAuth consent screen&lt;/code&gt;をクリック。
プロダクト名のところに&lt;code&gt;Go Bookshelf App&lt;/code&gt;と入力し、その他も任意で記入する。&lt;/p&gt;

&lt;p&gt;保存後、&lt;code&gt;Create credentials &amp;gt; OAuth client ID&lt;/code&gt;と移動し、&lt;code&gt;Application type&lt;/code&gt;では&lt;code&gt;Web application&lt;/code&gt;を選択。
&lt;code&gt;Name&lt;/code&gt;は&lt;code&gt;Go Bookshelf Client&lt;/code&gt;。&lt;code&gt;Authorized redirect URIs&lt;/code&gt;にProjectIDに置き換えた値を入れる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://localhost:8080/oauth2callback
http://[YOUR_PROJECT_ID].appspot.com/oauth2callback
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;作成すると、IDとclient secretが表示されるので保存しておくこと。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;前回同様、下記へ移動して&lt;code&gt;config.go&lt;/code&gt;を開く。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd $GOPATH/src/github.com/GoogleCloudPlatform/golang-samples/getting-started/bookshelf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下記のコメントを削除し、clientidとclientsecretを先ほどの値に置き換える。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// oauthConfig = configureOAuthClient(&amp;quot;clientid&amp;quot;, &amp;quot;clientsecret&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;app/app.yaml&lt;/code&gt;を開き、&lt;code&gt;OAUTH2_CALLBACK&lt;/code&gt;のProjectIDを自分のものに置き換える。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;ローカルの立ち上げやデプロイは前回同様。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/go/images/go-auth.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;セッションを扱うために&lt;a href=&#34;http://www.gorillatoolkit.org/&#34;&gt;Gorilla web toolkit&lt;/a&gt;を使っている。
Gorillaはいくつかの&lt;code&gt;Store&lt;/code&gt;インターフェイスを持っているが、今回は&lt;code&gt;CookieStore&lt;/code&gt;を利用。&lt;/p&gt;

&lt;p&gt;認証の仕組みはまず、Googleの認証画面にリダイレクトさせ、そのレスポンスを、ユーザーがアプリケーションに戻る際に処理させるというものである。&lt;/p&gt;

&lt;p&gt;アプリケーションはClientIDとOAuthスコープを使ってURLを生成する。スコープには、アプリケーションがアクセスしようとするユーザー情報が何かということを含む。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;config.go&lt;/code&gt;のこの部分がそれにあたる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func configureOAuthClient(clientID, clientSecret string) *oauth2.Config {
        redirectURL := os.Getenv(&amp;quot;OAUTH2_CALLBACK&amp;quot;)
        if redirectURL == &amp;quot;&amp;quot; {
                redirectURL = &amp;quot;http://localhost:8080/oauth2callback&amp;quot;
        }
        return &amp;amp;oauth2.Config{
                ClientID:     clientID,
                ClientSecret: clientSecret,
                RedirectURL:  redirectURL,
                Scopes:       []string{&amp;quot;email&amp;quot;, &amp;quot;profile&amp;quot;},
                Endpoint:     google.Endpoint,
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;認証が完了するとGoogle認証サービスは&lt;code&gt;/oauth2callback&lt;/code&gt;を通してユーザーをアプリケーションへ戻す。&lt;/p&gt;

&lt;p&gt;認証後はGoogle+ APIが利用できるため&lt;code&gt;plusService.People.Get(&amp;quot;me&amp;quot;)&lt;/code&gt;を使うと認証済みのユーザーの情報が取得できる。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【Go】Go Bookshelf App: Cloud Storage</title>
      <link>http://kotazi.github.io/blog/post/2016/0804_go_cloud_strage/</link>
      <pubDate>Thu, 04 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0804_go_cloud_strage/</guid>
      <description>

&lt;p&gt;続いて、&lt;a href=&#34;https://cloud.google.com/go/getting-started/using-cloud-storage&#34;&gt;&amp;ldquo;Using Cloud Storage with Go&amp;rdquo;&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&#34;cloud-storageの作成&#34;&gt;Cloud Storageの作成&lt;/h3&gt;

&lt;p&gt;下記コマンドでCloud Storageを作成する。&lt;br /&gt;
実はどんな名前でもいいんだけど、ProjectIDに合わせておくのがよい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;❯❯❯ gsutil mb gs://*****-***-kotazi                                            
Creating gs://*****-***-kotazi/...
~/R/blog ❯❯❯ gsutil defacl set public-read gs://*****-***-kotazi
Setting default object ACL on gs://*****-***-kotazi/...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;configuring-settings&#34;&gt;Configuring settings&lt;/h3&gt;

&lt;p&gt;プロジェクトルートへ移動して&lt;code&gt;config.go&lt;/code&gt;を開く。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd $GOPATH/src/github.com/GoogleCloudPlatform/golang-samples/getting-started/bookshelf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下記部分のコメントを消して、バケット名に書き換える。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// StorageBucket, err = configureStorage(&amp;quot;&amp;lt;your-storage-bucket&amp;gt;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ローカル立ち上げやデプロイの方法はさっきと同じ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/go/images/go-binary-data.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;今回で言うと本棚の画像をCloud Storage側におけるようになる。そのためのコードが下記。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;getting-started/bookshelf/app/app.go&lt;/code&gt;の&lt;code&gt;uploadFileFromForm&lt;/code&gt;関数。
この関数の中で画像があるかないかをチェックした折、あればCloud Storageにアップロードする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// uploadFileFromForm uploads a file if it&#39;s present in the &amp;quot;image&amp;quot; form field.
func uploadFileFromForm(r *http.Request) (url string, err error) {
        f, fh, err := r.FormFile(&amp;quot;image&amp;quot;)
        if err == http.ErrMissingFile {
                return &amp;quot;&amp;quot;, nil
        }
        if err != nil {
                return &amp;quot;&amp;quot;, err
        }

        if bookshelf.StorageBucket == nil {
                return &amp;quot;&amp;quot;, errors.New(&amp;quot;storage bucket is missing - check config.go&amp;quot;)
        }

        // random filename, retaining existing extension.
        name := uuid.NewV4().String() + path.Ext(fh.Filename)

        ctx := context.Background()
        w := bookshelf.StorageBucket.Object(name).NewWriter(ctx)
        w.ACL = []storage.ACLRule{{Entity: storage.AllUsers, Role: storage.RoleReader}}
        w.ContentType = fh.Header.Get(&amp;quot;Content-Type&amp;quot;)

        // Entries are immutable, be aggressive about caching (1 day).
        w.CacheControl = &amp;quot;public, max-age=86400&amp;quot;

        if _, err := io.Copy(w, f); err != nil {
                return &amp;quot;&amp;quot;, err
        }
        if err := w.Close(); err != nil {
                return &amp;quot;&amp;quot;, err
        }

        const publicURL = &amp;quot;https://storage.googleapis.com/%s/%s&amp;quot;
        return fmt.Sprintf(publicURL, bookshelf.StorageBucketName, name), nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;uploadFileFromForm&lt;/code&gt;の呼び出しは&lt;code&gt;app.go&lt;/code&gt;の&lt;code&gt;bookFromForm&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// bookFromForm populates the fields of a Book from form values
// (see templates/edit.html).
func bookFromForm(r *http.Request) (*bookshelf.Book, error) {
        imageURL, err := uploadFileFromForm(r)
        if err != nil {
                return nil, fmt.Errorf(&amp;quot;could not upload file: %v&amp;quot;, err)
        }
        if imageURL == &amp;quot;&amp;quot; {
                imageURL = r.FormValue(&amp;quot;imageURL&amp;quot;)
        }

        book := &amp;amp;bookshelf.Book{
                Title:         r.FormValue(&amp;quot;title&amp;quot;),
                Author:        r.FormValue(&amp;quot;author&amp;quot;),
                PublishedDate: r.FormValue(&amp;quot;publishedDate&amp;quot;),
                ImageURL:      imageURL,
                Description:   r.FormValue(&amp;quot;description&amp;quot;),
                CreatedBy:     r.FormValue(&amp;quot;createdBy&amp;quot;),
                CreatedByID:   r.FormValue(&amp;quot;createdByID&amp;quot;),
        }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>【Go】Go Bookshelf App: Datastore</title>
      <link>http://kotazi.github.io/blog/post/2016/0803_go_nosql/</link>
      <pubDate>Wed, 03 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0803_go_nosql/</guid>
      <description>

&lt;p&gt;GCPのGoのチュートリアルの概要。&lt;br /&gt;
とりあえずDatastoreでやってみることに。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/go/getting-started/using-structured-data&#34;&gt;Using Structured Data with Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;先ほどクローンしたコードの編集を加える。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd $GOPATH/src/github.com/GoogleCloudPlatform/golang-samples/getting-started/bookshelf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;config.go&lt;/code&gt;を開き、下記部分のコメントを消して、自分のプロジェクトIDに置き換える。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// DB, err = configureDatastoreDB(&amp;quot;projectid&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ローカルマシンで起動&#34;&gt;ローカルマシンで起動&lt;/h3&gt;

&lt;p&gt;下記コマンドでローカルマシンを立ち上げる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;cd app
go run app.go auth.go template.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;アプリケーションの動作を確認できる。&lt;/p&gt;

&lt;h3 id=&#34;デプロイする&#34;&gt;デプロイする&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;app&lt;/code&gt;ディレクトリ内で下記のコマンド。&lt;code&gt;https://[YOUR_PROJECT_ID].appspot.com&lt;/code&gt;でアクセス可能。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aedeploy gcloud app deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;アプリを更新する場合、同じコマンドをを使えばバージョンを更新できる。
新しくデプロイすると新しいバージョンが作られる。&lt;/p&gt;

&lt;p&gt;古いバージョンも残り続けるので課金対象にしたくなければ削除するのがいい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://console.cloud.google.com/appengine/versions&#34;&gt;バージョンページ&lt;/a&gt;から削除できる。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/go/images/go-datastore.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;getting-started/bookshelf/db_datastore.go&lt;/code&gt;の&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// AddBook saves a given book, assigning it a new ID.
func (db *datastoreDB) AddBook(b *Book) (id int64, err error) {
        ctx := context.Background()
        k := datastore.NewIncompleteKey(ctx, &amp;quot;Book&amp;quot;, nil)
        k, err = db.client.Put(ctx, k, b)
        if err != nil {
                return 0, fmt.Errorf(&amp;quot;datastoredb: could not put Book: %v&amp;quot;, err)
        }
        return k.ID(), nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この辺りがDatastoreに保存する処理。&lt;/p&gt;

&lt;p&gt;ちなみに&lt;code&gt;:=&lt;/code&gt;は変数宣言と代入を行っている。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【Go】Go Bookshelf App: 概要</title>
      <link>http://kotazi.github.io/blog/post/2016/0802_go_bookshelf/</link>
      <pubDate>Tue, 02 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0802_go_bookshelf/</guid>
      <description>

&lt;p&gt;GCPのGoのチュートリアルの概要。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/go/getting-started/tutorial-app&#34;&gt;Go Bookshelf App&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h5 id=&#34;機能&#34;&gt;機能:&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;リストの閲覧、追加、削除&lt;/li&gt;
&lt;li&gt;詳細の編集&lt;/li&gt;
&lt;li&gt;カバー画像のアップロード&lt;/li&gt;
&lt;li&gt;Googleアカウントでのログインと、追加した本の確認&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;目標&#34;&gt;目標:&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;サンプルアプリケーションのクローン&lt;/li&gt;
&lt;li&gt;ローカルでの起動&lt;/li&gt;
&lt;li&gt;GAE環境へのデプロイ&lt;/li&gt;
&lt;li&gt;サンプルコードを読む&lt;/li&gt;
&lt;li&gt;データ構造のストアについて&lt;/li&gt;
&lt;li&gt;Google Cloud Storeでのバイナリデータのストアについて&lt;/li&gt;
&lt;li&gt;ユーザー認証について&lt;/li&gt;
&lt;li&gt;GCP Consoleで確認するイベントログについて&lt;/li&gt;
&lt;li&gt;バックグラウンドワーカーにタスクを送るGoogle Cloud Pub/Subの使い方&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;手順&#34;&gt;手順:&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;https://console.cloud.google.com/project?_ga=1.189765870.459013261.1468980200&#34;&gt;ここ&lt;/a&gt;からGCP Console Projectを選択/生成する。
&lt;a href=&#34;https://support.google.com/cloud/answer/6293499#enable-billing&#34;&gt;ここ&lt;/a&gt;を見て課金を有効にする。
さらに、&lt;a href=&#34;https://cloud.google.com/sdk/docs/&#34;&gt;Cloud SDK&lt;/a&gt;のインストール。&lt;/p&gt;

&lt;p&gt;それができたら、下記コマンドで&lt;code&gt;gcloud&lt;/code&gt;認証&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gcloud init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;成功すると&lt;a href=&#34;https://cloud.google.com/sdk/auth_success&#34;&gt;ここ&lt;/a&gt;へ飛ぶ。(gcloudのチュートリアルあるから読んでみてみいいかも。)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://console.cloud.google.com/flows/enableapi?apiid=datastore.googleapis.com,datastore,pubsub,storage_api,logging,plus&amp;amp;_ga=1.180912098.459013261.1468980200&#34;&gt;ここ&lt;/a&gt;からDatastore、Cloud Pub/Sub, Cloud Storage JSON, Cloud Logging, Google+ APIsを利用できるようにする&lt;/p&gt;

&lt;p&gt;続いて、アカウントを確認&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/R/s/gcp ❯❯❯ gcloud config list
Your active configuration is: [default]

[core]
account = kotazi@*****.com
disable_usage_reporting = False
project = ********
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;必要に応じて、自分で設定もできる&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gcloud config set project [YOUR_PROJECT_ID]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;サンプルリポジトリのクローンします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get -u -d github.com/GoogleCloudPlatform/golang-samples/getting-started/bookshelf/app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;aedeploy&lt;/code&gt;コマンドをインストールする&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get -u google.golang.org/appengine/cmd/aedeploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上で準備が完了。&lt;/p&gt;

&lt;p&gt;ここからGoogle Cloud Platformのさまざまな機能を試していく。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Atomic Design覚書</title>
      <link>http://kotazi.github.io/blog/post/2016/0801_atomic_design/</link>
      <pubDate>Mon, 01 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0801_atomic_design/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://atomicdesign.bradfrost.com/&#34;&gt;Atomic Design&lt;/a&gt;について少し学んだので覚えているうちにメモにまとめよう。&lt;/p&gt;

&lt;h2 id=&#34;atomic-design&#34;&gt;Atomic Design&lt;/h2&gt;

&lt;p&gt;Atomic Designは性質の異なる5つのステージによって構成される方法論である。
これらのステージはよく考えられたインターフェイスデザインシステムを作り出す。&lt;/p&gt;

&lt;h3 id=&#34;atoms-原子&#34;&gt;Atoms(原子)&lt;/h3&gt;

&lt;p&gt;原子が物質の基本的な構成要素であるならば、ユーザーインターフェイスを構成する基本的な要素である。
それゆえラベルやインプット、ボタンなどのそれ以上分解できない基本的なHTMLタグなどが含まれる。&lt;/p&gt;

&lt;p&gt;それに加えて、フォントスタックやカラーパレット、またはアニメーションなどの抽象的な要素も含まれる。&lt;/p&gt;

&lt;h3 id=&#34;molecules-分子&#34;&gt;Molecules(分子)&lt;/h3&gt;

&lt;p&gt;比較的シンプルな単一機能のUI要素。
例えば、フォーム用のラベルと、検索用インプットと、それようのサーチボタンなど。&lt;/p&gt;

&lt;h3 id=&#34;organisms-有機体&#34;&gt;Organisms(有機体)&lt;/h3&gt;

&lt;p&gt;比較的複雑なUIコンポーネントであり、分子や原子などが合わさったり合わさらなかったりして構成される。&lt;/p&gt;

&lt;h3 id=&#34;templates&#34;&gt;Templates&lt;/h3&gt;

&lt;p&gt;ページレベルのオブジェクトであり、コンポーネントをレイアウトに配置し、設計の基礎となるコンテンツの構造を明確にする。&lt;br /&gt;
ワイヤーフレームのような印象。&lt;/p&gt;

&lt;h3 id=&#34;pages&#34;&gt;Pages&lt;/h3&gt;

&lt;p&gt;ページは特有のテンプレートのインスタンスであり、リアルなコンテンツでプレースホルダーを置き換える。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;良いけどうまくまとめられん。&lt;/p&gt;

&lt;p&gt;思想は良いけど、実際のワークフローにどのように組み込むかが大切で、
しっかりそれについても書いてくれているんだけれども、
今のチームの既存のデザインワークフローを知らないのでなんとも言えない。&lt;/p&gt;

&lt;p&gt;また機が来たら向き合おう。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【読書】イノベーションへの解</title>
      <link>http://kotazi.github.io/blog/post/2016/0701_innovation/</link>
      <pubDate>Sat, 30 Jul 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0701_innovation/</guid>
      <description>

&lt;p&gt;&lt;a  href=&#34;https://www.amazon.co.jp/gp/product/4798104930/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4798104930&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;イノベーションへの解 利益ある成長に向けて (Harvard business school press)&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=kotazi-22&amp;l=as2&amp;o=9&amp;a=4798104930&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;を読みました。&lt;/p&gt;

&lt;hr&gt;

&lt;ul&gt;
&lt;li&gt;第一章 成長という至上命令&lt;/li&gt;
&lt;li&gt;第二章 最強の競合企業を打ち負かす方法&lt;/li&gt;
&lt;li&gt;第三章 顧客が求める製品とは&lt;/li&gt;
&lt;li&gt;第四章 自社製品にとって最高の顧客とは&lt;/li&gt;
&lt;li&gt;第五章 事業範囲を適切に定める&lt;/li&gt;
&lt;li&gt;第六章 コモディティ化をいかにして回避するか&lt;/li&gt;
&lt;li&gt;第七章 破壊的成長能力を持つ組織とは&lt;/li&gt;
&lt;li&gt;第八章 戦略策定プロセスのマネジメント&lt;/li&gt;
&lt;li&gt;第九章 良い金もあれば悪い金もある&lt;/li&gt;
&lt;li&gt;第十章 新成長の創出における上級役員の役割&lt;/li&gt;
&lt;li&gt;終章 バトンタッチ&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;前作の「イノベーションのジレンマ」が超良書だとすると、こちらの本は良書といった印象。&lt;br /&gt;
というか、対象とする企業が大きくなりすぎて少し遠く感じてしまったかもしれない。&lt;/p&gt;

&lt;h5 id=&#34;第一章-成長という至上命令&#34;&gt;第一章 成長という至上命令&lt;/h5&gt;

&lt;p&gt;本書のテーマはビジネスにおける新たな成長を生み出す方法である。どんな企業も成長という至上命令からは免れない。
投資家は「企業の&lt;strong&gt;予測&lt;/strong&gt;成長率を株式の&lt;strong&gt;現在&lt;/strong&gt;価値に織り込む」という性向を持つ。そのため、株価を動かすのは成長の方向性ではなく、予想外の変化である。株価を引き上げるためには市場予測を上回る早さで成長する必要があり、これは株主価値の増大に気を配る経営者にとっては重圧となる。&lt;/p&gt;

&lt;h5 id=&#34;第二章-最強の競合企業を打ち負かす方法&#34;&gt;第二章 最強の競合企業を打ち負かす方法&lt;/h5&gt;

&lt;p&gt;どうすれば最強の競合企業を打ち負かすことができるのか。&lt;br /&gt;
前作でもイノベーションの状況を、持続的イノベーションと破壊的イノベーションに区別した。
持続的イノベーションにおいては既存企業がほぼ必ず勝つため、新興企業が実績のある競合を打ち負かすための最良の手段は、破壊的戦略をとること。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.evernote.com/l/Aj0M-nf2PMFFv6asgzy9bEYOkhvRnyKg5PsB/image.png&#34; alt=&#34;Pasted%20Image%207/19/16,%2010:05&#34; /&gt;&lt;/p&gt;

&lt;p&gt;また、上図のように第三次元に新しいバリューネットワークを生み出す破壊を&lt;strong&gt;新市場型破壊&lt;/strong&gt;、本来のバリューネットワークのローエンドにいる顧客を攻略する破壊を&lt;strong&gt;ローエンド型破壊&lt;/strong&gt;と呼ぶ。&lt;/p&gt;

&lt;p&gt;破壊とは理論であり、競争の帰結が状況に応じてどのように変化するかを、高い精度で予測できる、因果関係を示す概念モデル。&lt;/p&gt;

&lt;p&gt;(章末にある各企業や製品の破壊的戦略の概要がすごくいい。)&lt;/p&gt;

&lt;h5 id=&#34;第三章-顧客が求める製品とは&#34;&gt;第三章 顧客が求める製品とは&lt;/h5&gt;

&lt;p&gt;破壊的戦略を実行するためにどのような製品を開発すべきか。ターゲットとすべき市場は？&lt;/p&gt;

&lt;p&gt;あらゆる企業が製品の企画や開発に取り組むが、総計すると資金の3/4が商業的に成り立たない製品を生み出す結果に終わっている。市場細分化のプロセスには&lt;strong&gt;状況&lt;/strong&gt;に即した市場分野の定義が欠かせない。&lt;/p&gt;

&lt;p&gt;以下引用。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;本書ではまず、一般的なアプローチとは若干異なる、市場細分化の考え方について説明する。顧客が特定の「用事」を片付けるために製品を「雇う」、という考えに基づくこの手法を用いれば、顧客が現実に生活を送る様子を正確に映し出すような形で、市場の細分化をすることができる。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;持続的向上を進める間も特定の用事に結びついたままでいること、そして顧客を雇うべき製品に誘導する目的ブランドを構築することが、破壊的製品を成長軌跡上に留める唯一の方法。(マーケティングを考えると、データが入手可能な区分によって市場を細分化してしまいがちだが、そのために真のニーズを見失ってはいけない。顧客が片付けようとしている用事を考えよう。)&lt;/p&gt;

&lt;h5 id=&#34;第四章-自社製品にとって最高の顧客とは&#34;&gt;第四章 自社製品にとって最高の顧客とは&lt;/h5&gt;

&lt;p&gt;最も発展性のある基盤となるのはどのような顧客か。&lt;/p&gt;

&lt;p&gt;破壊的イノベーションにとって理想的な顧客や用途市場を探すためのテンプレートを下記に引用する。&lt;/p&gt;

&lt;p&gt;１．標的顧客はある用事を片付けようとしているが、金やスキルをもたないため、解決策を手に入れられずにいる。&lt;br /&gt;
２．このような顧客は、破壊的製品をまったく何も持たない状態と比較する。そのため、本来のバリューネットワークのなかで、高いスキルを持つ人々に高い価格で販売されている製品ほど性能が良くなくても、喜んで購入する。こうした新市場顧客を喜ばせるための性能ハードルは、かなり低い。&lt;br /&gt;
３．破壊を実現する技術の中には、非常に高度なものもある。だが、破壊者はその技術を利用して、誰でも購入し利用できる、シンプルで便利な製品をつくる。製品が新たな成長を生み出すのは、「誰でも使える」からこそだ。金やスキルをそれほど持たない人々でも消費を始められるのだ。&lt;br /&gt;
４．破壊的イノベーションは、まったく新しいバリューネットワークを生み出す。新しい顧客は新しいチャネル経由で製品を購入し、それまでと違った場で利用することが多い。&lt;/p&gt;

&lt;p&gt;あなたの会社にとって理想の顧客とは、あなたのバリューネットワークに属するすべての存在にとって魅力的で、彼らに力を合わせてこの機会を追求する意欲を与えるような顧客。理想顧客に的を絞るためにこのプロセスを注意深くマネジメントすれば、新成長ベンチャーは将来の成長のための確固たる基盤を手に入れられる。&lt;/p&gt;

&lt;h5 id=&#34;第五章-事業範囲を適切に定める&#34;&gt;第五章 事業範囲を適切に定める&lt;/h5&gt;

&lt;p&gt;製品の設計、生産、販売、流通。どれを社内で行い、どれを社外に任せるべきか。
一般的にはコアコンピタンス(中核的な能力)は社内に残し、コアコンピタンスに結びつかない業務は外部の専門業者に委託すべきだという。&lt;/p&gt;

&lt;p&gt;製品の機能性と信頼性が顧客ニーズを満たすほど十分でない状況では、独自のアーキテクチャを持ち、統合されている企業が有利。
だが機能性と信頼性が十分以上になるとスピードとレスポンスが求められるようになり、その段階では特化型の専門企業、つまり
相互作用の方式がモジュール型のアーキテクチャと業界標準によって定義されている企業が優位に立つ。&lt;/p&gt;

&lt;h5 id=&#34;第六章-コモディティ化をいかにして回避するか&#34;&gt;第六章 コモディティ化をいかにして回避するか&lt;/h5&gt;

&lt;p&gt;どうすれば競争優位を確実に維持できるか。魅力ある利益を維持するためには何をすればいいか。&lt;/p&gt;

&lt;p&gt;どれほどの驚異的なイノベーションも、いつかは必ずコモディティ化される運命にあると観念している経営者は多い。
世界初の3.5インチディスクドライブは1992年、メーカーに60%の粗利率をもたらす価格で販売された。
だが、最近では60倍も優れたものが15%の粗利を出すことに苦心している。&lt;/p&gt;

&lt;p&gt;そもそもコモディティ化は悪鬼のステップによって起こる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;新しい市場が生まれ、ある企業が顧客にニーズに近い独自製品を開発し魅力的な利益を得る。&lt;/li&gt;
&lt;li&gt;競争相手より優位に立とうとし、顧客の求める機能性と信頼性を追い抜いてしまう&lt;/li&gt;
&lt;li&gt;その結果、その階層の競争基盤の変化が促され&amp;hellip;&lt;/li&gt;
&lt;li&gt;モジュール型アーキテクチャへの変化が促され&amp;hellip;&lt;/li&gt;
&lt;li&gt;産業の非統合化が進み&amp;hellip;&lt;/li&gt;
&lt;li&gt;製品の性能やコスト面で競合企業との差別化を図ることが困難になる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;コモディティ化と脱コモディティ化のプロセスは、どちらもコアではなく周辺部で始まる。&lt;/p&gt;

&lt;h5 id=&#34;第七章-破壊的成長能力を持つ組織とは&#34;&gt;第七章 破壊的成長能力を持つ組織とは&lt;/h5&gt;

&lt;p&gt;新事業にとって最適な組織構造とは何か。
新成長事業の運営は誰に任せるべきか。&lt;/p&gt;

&lt;p&gt;組織の能力について考えるとき、「資源、プロセス、価値基準」と考えると理解しやすい。&lt;/p&gt;

&lt;p&gt;資源が最も具体的。人材や設備、技術、ブランドに資金や顧客関係などが含まれる。&lt;/p&gt;

&lt;p&gt;資源のインプットを価値の高い製品やサービスに変換するとき、組織は価値を生み出す。
このような変換を実現する、相互作用や連携、意思伝達、意思決定などのパターンが組織のもつ「プロセス」である。&lt;/p&gt;

&lt;p&gt;組織の能力と無能力に影響を与える価値基準。従業員が仕事の優先順位を決定する際に用いる判断基準を指す。&lt;/p&gt;

&lt;p&gt;成長機会に取り組む経営者は、成功に必要な人材や資源があるかどうかを判断しなければならない。
「組織で習慣的に用いられているプロセスは、この新しい課題にふさわしいのか？」「組織の価値基準は、
この実行計画に必要な優先順位を与えるのか？」。この質問に答えなければならない。
課題にあったプロセスや価値基準を持つ組織に有能な人材を配置するよう心を砕くことが、経営者の力点。&lt;/p&gt;

&lt;h5 id=&#34;第八章-戦略策定プロセスのマネジメント&#34;&gt;第八章 戦略策定プロセスのマネジメント&lt;/h5&gt;

&lt;p&gt;必勝戦略の細部を正しく詰めるにはそうすればいいか。&lt;/p&gt;

&lt;p&gt;起業家が最初から正しい戦略を持っていることはめったにない。
当初の戦略に決kがんがあることが判明した場合に備えて、再試行するための資金を残しておくべき。&lt;/p&gt;

&lt;p&gt;つまり、正しい戦略を求めるのではなく、戦略が生み出されるプロセスをマネジメントすることが重要。
資源配分プロセスは意図的戦略と創発的戦略がある。
戦略策定における経営陣の力点は3つあり、第一は組織のコスト構造、つまり価値基準をマネジメントし、理想顧客からの破壊的製品に対する
注文が優先されるように図ること。第二は発見志向計画法、つまり何が有効で何がそうでないかについての学習を加速させる、徹底したプロセスを用いること。
第三は意図的、創発的プロセスが各事業の状況に応じて用いられるよう、油断なく気を配ることである。&lt;/p&gt;

&lt;h5 id=&#34;第九章-良い金もあれば悪い金もある&#34;&gt;第九章 良い金もあれば悪い金もある&lt;/h5&gt;

&lt;p&gt;誰の投資金が成功を促し、誰の資金が命取りになるか。&lt;/p&gt;

&lt;p&gt;「成長を気長に待て、だが利益を待ってはいけない。」&lt;br /&gt;
これは投資を行う人々にも、その資金を受ける人々にも送るメッセージである。&lt;/p&gt;

&lt;h5 id=&#34;第十章-新成長の創出における上級役員の役割&#34;&gt;第十章 新成長の創出における上級役員の役割&lt;/h5&gt;

&lt;p&gt;事業の成長を持続させるために、上級役員はどのような役割を果たさなくてはならないか。&lt;/p&gt;

&lt;p&gt;上級役員がイノベーションのマネジメントにおいて果たすべき役割は4つある。&lt;br /&gt;
第一に、適切な連携プロセスが存在しない場合には、様々な行動や決定を、自ら進んで連携させ無くてはならない。
第二に、部下が新しいコミュニケーション、連携、意思決定のパターンを必要とする新しい課題に直面した時には、
既存プロセスの支配力を崩さなくてはならない。第三に、同じような行動や決定が組織内で繰り返し行われるとき、
経営幹部はこれに関わる従業員の活動を確実に導き連携させるためのプロセスを創りださなくてはならない。
そして第四に、新たな破壊的成長事業を続けざまに立ち上げ育むためには、同時進行する複数のプロセスやビジネスモデルを構築し維持する必要があるため、
上級役員はさまざまな組織の橋渡しを行って、新成長事業での有益な学習を主流部門に還流させ、適切な資源、プロセス、価値基準が適切な状況で用いられる
よう、心を砕かなくてはならない。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;イノベーションのジレンマのあとに読むとよい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【CSS】ECSSまとめ</title>
      <link>http://kotazi.github.io/blog/post/2016/0729_ECSS/</link>
      <pubDate>Thu, 28 Jul 2016 11:57:40 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0729_ECSS/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://ecss.io/&#34;&gt;Enduring CSS&lt;/a&gt;(以下ECSS)についてまとめる。&lt;/p&gt;

&lt;p&gt;ECSSは大規模プロジェクトのためのCSS設計手法だ。考案者は&lt;a href=&#34;https://benfrain.com/&#34;&gt;Ben Frain&lt;/a&gt;。
大規模WebアプリケーションにおけるCSSの記述について根本的なアプローチを定義したいという彼の個人的な要望から生まれている。&lt;/p&gt;

&lt;h3 id=&#34;ecssの要望&#34;&gt;■ ECSSの要望&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;長期にわたって肥大なCSSのメンテナンスを容易にすること&lt;/li&gt;
&lt;li&gt;他に影響を与えずに、コードベースから一部のCSSを取り除けるようにすること&lt;/li&gt;
&lt;li&gt;どんな新しいデザインでも高速に開発することを可能とすること&lt;/li&gt;
&lt;li&gt;ある要素へのプロパティや値の変更が他に意図しない影響を与えないこと&lt;/li&gt;
&lt;li&gt;実装の変更には最小限のツールやワークフローしか必要としないこと&lt;/li&gt;
&lt;li&gt;可能な限り、ユーザーインターフェイス内でのステートの変更を伝達する際などARIAのようなW3C標準をもちいること&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;スケールする際の問題点&#34;&gt;■ スケールする際の問題点&lt;/h3&gt;

&lt;p&gt;プロジェクトの成長に伴いCSSの記述量は増大する。
多くの開発者が加わり、特殊なケースやブラウザ挙動に対応するうちに手に負えなくなってしまう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The CSS Specificity(詳細度)&lt;/li&gt;
&lt;li&gt;セレクタをマークアップで縛ること&lt;/li&gt;
&lt;li&gt;カスケード&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;どれも便利なものであるが、大規模プロジェクトにおいては既存ルールを取り除いたり、
修正したりすることが難しく、新しいルールを適用してしまう。このやり方に頼っていると
コードは不要なルールで溢れかえることになる。&lt;/p&gt;

&lt;h3 id=&#34;その他のcss設計&#34;&gt;■ その他のCSS設計&lt;/h3&gt;

&lt;h4 id=&#34;oocss&#34;&gt;▼ OOCSS&lt;/h4&gt;

&lt;p&gt;これはOOCSSのみならず、Atomic CSSやその他のSRPについても言えることだ。&lt;br /&gt;
OOCSSの最たる主張はコードの重複を取り除くことにあり、その結果CSSがメンテナブルになるというものだ。
本質的にはレゴのピースを組み立てるようなもので、可能な限り再利用し、必要であれば拡張する。&lt;/p&gt;

&lt;p&gt;これはレスポンシブデザインにおいて急所を抱えている。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;blk m-10 fr&amp;quot;&amp;gt;Here I am&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記のように、OOCSS/Atomic CSSでは再利用可能なクラスに分割する。
しかしながら、ビューポートが変更された場合はどうするべきだろう。
例えば別のクラスをつけることもできるが(&lt;code&gt;Mplus-cc2&lt;/code&gt;のような)面倒なことになるし、HTMLが複雑になる。&lt;/p&gt;

&lt;p&gt;さらにはメンテナンスにも問題があり、大規模プロジェクトではメンテナンスは必ず必要になるが、
その段階ではCSSルールの見直しも必要となる。その場合マークアップについているクラスも書き換えが大きく発生する。&lt;/p&gt;

&lt;h4 id=&#34;smaccs&#34;&gt;▼ SMACCS&lt;/h4&gt;

&lt;p&gt;SMACSSはCSSのスケーラブルモジュールアーキテクチャとして標準的なもの。
SMACSSではヴィジュアル面の用語や概念を明確に定義する。
それゆえBase/Layout/Module/State/Themeなどを定義していく。&lt;/p&gt;

&lt;p&gt;よく考えて構成する必要があり、もっと緩いものが欲しかった。&lt;/p&gt;

&lt;h4 id=&#34;bem&#34;&gt;▼ BEM&lt;/h4&gt;

&lt;p&gt;BEM(Block Element Modifier)はネーミングの方法論。&lt;br /&gt;
既存のものからならBEMを選ぶ。BEMの良い点は下記。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;すべての要素に同様の特殊性があること。ある1つのクラスがすべてのエレメントに与えられる。&lt;/li&gt;
&lt;li&gt;HTML構造が結合されていないため、スタイルにセレクタを使わないこと。&lt;/li&gt;
&lt;li&gt;開発ツールやコードエディタ上で、要素の親が何であるかを推論しやすいこと。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;けれどもModifierが適さなかった。&lt;/p&gt;

&lt;h3 id=&#34;ecssのハイライト&#34;&gt;■ ECSSのハイライト&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ビジュアルを分離してよりメンテナブルに&lt;/li&gt;
&lt;li&gt;ファイルサイズを長期にわたって小さく保てる&lt;/li&gt;
&lt;li&gt;ルールは「自身隔離(&amp;lsquo;self-quarantining&amp;rsquo;)」&lt;/li&gt;
&lt;li&gt;クラス名は文脈を伝え、ロジックを持ち変化する&lt;/li&gt;
&lt;li&gt;モジュール作成したすべてのファイルは共通フォルダに含まれる&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;用語定義&#34;&gt;■ 用語定義&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;モジュール&lt;/strong&gt;: 大きいもの。個々の機能性をもつもの&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;コンポーネント&lt;/strong&gt;： モジュール内にネストしたパール&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;子ノード&lt;/strong&gt;: コンポーネントを構成する個々のパーツ&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ecssが解決するもの&#34;&gt;■ ECSSが解決するもの&lt;/h3&gt;

&lt;p&gt;ECSSのゴールは抽象的なスタイルを個々に分離すること。&lt;/p&gt;

&lt;p&gt;たいていの場合は、抽象的に機能を共通にするクラスを作ることは理にかなっている。さまざまな要素に対して再利用することができるからだ。
原理的には聞こえが良い。問題は大規模で複雑なインターフェイスを扱うとき。予期せぬ影響を与えずに修正することが難しくなってしまう。
だからECSSは分離したスタイルを目指す。&lt;/p&gt;

&lt;p&gt;「見て見ぬふり」に対処することが大切。
ECSSではすべてのモジュールやコンポーネントは他と分離するためにマイクロネームスペースを付けて書かれる。
下記は典型的なサンプル。必要に応じて&lt;code&gt;!import&lt;/code&gt;の利用は認められる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.ip-SubHeader_Wrapper {
    @mixin Headline;
    align-items: center;
    /* We want the subheader hidden by default on mobile */
    display: none;
    font-size: $text12;
    background-color: $color-grey-54;
    border-bottom: 1px solid color($color-grey-54 a(.5));
    min-height: $size-fine-quadruple;
    @include MQ(Mplus) {
        display: flex;
        background-color: $color-grey-a7;
        color: $color-grey-54;
        font-size: $text13;
        min-height: 1.5rem;
        border-bottom: 1px solid $color-grey-54;
        border-top: 1px solid $color-grey-33;
    }
    /* However, even on mobile, if the SubHeader Wrapper is in section 1, we want to see it */
    .ip-Classification_Header-1 &amp;amp; {
        display: flex;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ポジティブな点:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;冗長で何にも依存していない&lt;/li&gt;
&lt;li&gt;一般的にとらわれないコンテキスト（それが置かれている場所のサイズのコンテキストに保存）であるが、このコンポーネントに影響を与える任意のメディアクエリーは、中括弧のこの単一のセット内で定義されている。&lt;/li&gt;
&lt;li&gt;名前空間のモジュールは一度しか書かれていない。変更したければそこを見ればいい。&lt;/li&gt;
&lt;li&gt;ネスト内でオーバーライドを行えば、優先度が正しく動いて適切にふるまう。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ディレクトリ構造&#34;&gt;■ ディレクトリ構造&lt;/h3&gt;

&lt;p&gt;こうよりも、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;html/
- shopping-cart-template.html
- callouts-template.html
- products-template.html

js/
- shopping-cart-template.js
- callouts-template.js
- products-template.js

css/
- shopping-cart-template.css
- callouts-template.css
- products-template.css
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こうがいい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;shopping-cart-template/
- shopping-cart.html
- shopping-cart.css
- shopping-cart.js

callouts-template/
- callouts.html
- callouts.js
- callouts.css

products-template/
- products.html
- products.js
- products.css
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;グローバルCSSだけは例外。&lt;/p&gt;

&lt;h3 id=&#34;ecssでのね-m-ing&#34;&gt;ECSSでのね～m，ing&lt;/h3&gt;

&lt;p&gt;BEMの恩恵を感じたうえで、名前空間を使えばより確かに、他への影響の可能性を減らせる。&lt;/p&gt;

&lt;p&gt;&amp;ldquo;mini cart&amp;rdquo;ビューの&amp;rdquo;ShoppingCart&amp;rdquo;ファイルならば、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mc-ShoppingCart_Title&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mc-ShoppingCart_RemoveBtn&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などとなる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;namespace: すべてのセレクタに必要。小文字。&lt;/li&gt;
&lt;li&gt;ModuleOrComponent: アッパーキャメル。ハイフンでつなぐ。&lt;/li&gt;
&lt;li&gt;ChildNode: 任意。アッパーキャメル。アンダースコアでつなぐ。&lt;/li&gt;
&lt;li&gt;varient: 任意。小文字のトレインケース&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ステートについて&#34;&gt;■ ステートについて&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.w3.org/TR/wai-aria/&#34;&gt;WAI-ARIA&lt;/a&gt;を用いる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.co-Button {
    background-color: $color-button-passive;
    &amp;amp;[aria-selected=&amp;quot;true&amp;quot;] {
        background-color: $color-button-selected;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;10個の戒律&#34;&gt;■ 10個の戒律&lt;/h3&gt;

&lt;p&gt;詳細は&lt;a href=&#34;http://ecss.io/chapter8.html&#34;&gt;こちら&lt;/a&gt;。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;single source of truthであること&lt;/li&gt;
&lt;li&gt;ネストしてはならない&lt;/li&gt;
&lt;li&gt;IDセレクタを使ってはならない&lt;/li&gt;
&lt;li&gt;ベンダープレフィックスを使ってはならない&lt;/li&gt;
&lt;li&gt;サイズ/色/z-indexには変数を用いること&lt;/li&gt;
&lt;li&gt;常にモバイルファースで書くこと&lt;/li&gt;
&lt;li&gt;(@extend)を避け、mixinを使うこと&lt;/li&gt;
&lt;li&gt;マジックナンバーやブラウザハックに対してコメントを書くこと&lt;/li&gt;
&lt;li&gt;画像をinlineにしないこと&lt;/li&gt;
&lt;li&gt;複雑なCSSを書かないこと&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;感想。思想はすごくいいんだけど制限が多すぎるように感じた。&lt;br /&gt;
BEMをリスペクトしながらモディファイヤの部分に共感できないようだった。
そこはすごく理解できたんだけど、その他の成約を加えすぎていると思う。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>