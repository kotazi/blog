<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kotazi.com</title>
    <link>http://kotazi.github.io/blog/</link>
    <description>Recent content on kotazi.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 May 2017 21:40:19 +0900</lastBuildDate>
    
	<atom:link href="http://kotazi.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>人はズルなしで生きられるのか</title>
      <link>http://kotazi.github.io/blog/post/2017/0514_survival/</link>
      <pubDate>Sun, 14 May 2017 21:40:19 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2017/0514_survival/</guid>
      <description> 人はズルなしで生きられるのか。
 もっとも過ごしやすい季節に10日ほど山に入って、私は自分で生き残ったといえるのだろうか。
 そんなことを考える登山家がいる。サバイバル登山家、服部文祥。
 サバイバル! 人はズルなしで生きられるのか (ちくま文庫)  サバイバル登山とは サバイバル登山とは、「食料や装備をできるだけ持たずに道なき道を歩く長期登山」のことをいう。
 持ち込む食料は調味料を少々の米だけ ライトや時計、テントも燃料も持ち込まない 渓の水を飲み、泳いでいる岩魚を捕まえる 生えている山菜を採って、焚き火のそばで眠る  上記はルールではなく、説明のためのものであり、 ひらたく言えば、サバイバル登山とは「自分の力で山に登る」ことを突き詰めた登山である。
植物採取が禁止されている保護地区でギョウジャニンニクを採ろうとしたした場面からの抜粋。 人間ではなく一生物として入山しているため、人間のルールに納得がいかない。
 もし自分で食料を調達してはいけないなら、やっぱり私は人間をやめるしかない。サルやカモシカは山のものを食べてもいいのに、おなじ生物の私は人間だからという理由で自分が食べるものを自分で調達することができない。
 生き残る努力をする  すべての生物は生き残る努力をする許可を環境から与えられているようにみえる
 環境とは自然環境だけなく、自分の体や頭、命も含まれるのだろう。
要は文明に与えられた力を使うのか、持って生まれた力を使うのかという話である。
 正直なところ、岩魚を殺すことに私は罪の意識を感じていない。私は私の生を精一杯生きるだけだ。それ以外にこの世に敬意を表す方法はない。
 そして生き残るための行為であれば、罪の意識を感じる必要はない。
それは環境に与えられた権利であるのだから。
 生物は自分勝手に行動する。生物の欲をコントロールするのは本来、環境というプレッシャーだ。これが自然の法則だと思う。自ら自然の中に入ってく登山者も身勝手でいい。だがそこには「登山者が一生物であるならば」という制約がつく。生まれたままの姿で振る舞うとき、登山者には自由が許される。生まれたままの姿だからこそ自由ともいえる。
 フェアプレーは忘れない。ズルはしない。
たしかに、上記のような制約(登山者が一生物であるならば)の中で自然に入った場合、必要以上の殺生をすることはないだろうなと思った。
生命体としてまっとうでありたい 本全体を通して死生観に共感できた。
 生命体としてまっとうでありたい。そのためにできることはただひとつ。私は私の生を精一杯生きること、それだけだ。
 僕も生きることは、手段ではなく(根源的な)目的だと思っている。
ただ彼のほうが命を懸けた生活をしているため、言葉に重みがある。
 現代人の平均的な死生観には、本来、人が受け入れるべき自然のリスクと命のありようを受け入れる覚悟が欠けている。命は生と死でできていて、生きることには常に死のリスクがともない、いつか必ず終わりがくる。
 現代人の平均的な死生観についても言及している。
山へ行く 僕も時々、山へ行く。日帰り登山。
来週末は千頭星山と甘利山へ行く予定。
生き残るぞ。(小並感)
目次紹介  登山からサバイバルへ サバイバル実践 サバイバルの方法論 サバイバル思想  </description>
    </item>
    
    <item>
      <title>筋トレが最強のソリューションである</title>
      <link>http://kotazi.github.io/blog/post/2017/0210_kintore/</link>
      <pubDate>Sat, 11 Feb 2017 10:51:53 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2017/0210_kintore/</guid>
      <description> 昨年タバコをやめた僕は、今年から少し真面目に筋トレと向き合っている。 今は減量期なので体脂肪を落とすことに集中していて、1月は2.4kgほど体脂肪を落とすことに成功した。
そして最近、筋トレが最強のソリューションである マッチョ社長が教える究極の悩み解決法を読んだ。
ツイートをまとめたような簡単で読みやすい本だったが、僕はマッチョが好きになった。
この本はトレーニング本の域を超えている。マッチョの語る自己啓発だ。 松下幸之助の「道をひらく」をマッチョの言葉に訳したって感じだった。 マッチョのテンポを伝えるために以下に一部抜粋する。
 仕事もプライベートもダメで八方塞がり。死にてえって思ったら３か月だけ筋トレしてみてくれ。テストステロンという支配欲を司るホルモンが分泌されてネガティブな気持ちを打ち消してくれる。それに加えて筋肉がつき良い身体になれば気分は最高だ。見た目が良くなれば気分も良くなる。非常に単純な事だ。
 辛い時は筋トレ。
 心を清く保つには人に親切にする事。心を強く保つには筋トレ。親切と筋トレは心を浄化する。ボランティア活動しろとか団体に所属しろとかは言わない。自分の視界に入った困ってる人に手を差し伸べてやればいい。偽善がどうとか深く考え過ぎるな。相手もハッピー自分もハッピーぐらいの考えでちょうどよい。
 筋トレして人に優しくなる。
 誰も見てない時にどれだけ自分で自分を追い込めるか。この一点だよ。切磋琢磨できる相手がいないだとかモチベーションが保てない事を環境のせいにしてる時点でダメだ。自分の手綱を他人に握らせるなんておかしいだろ？自分の伸び代は自分で決めて覚悟を決めて何でもやり切れ。「敵は己の中にあり」だ。
 筋トレの本質。
 ダイエットの最大の敵である停滞期の打破として最も効果的なのが高タンパクな食生活と筋トレの組み合わせです。困ったらとりあえず筋トレしてプロテイン飲んでおけばいいのです。筋トレとプロテインでこの世の99％の問題は解決します。本当です。
 筋トレで問題解決。
 ケガも病気もなくジムで筋トレできる時は感謝しかない。「怠い／疲れたから今日はジム行かない」とか言ってる場合じゃねえ。筋トレできる事に対する感謝が足りん。感謝があるとないとでは集中度も満足度もまるで違う。感謝があれば自然と丁寧かつ熱心に取り組むようになる。筋トレに限らず感謝大事。
 筋トレに感謝の大切さを学ぶ。
 挑戦なしに人間は成長しない。日々挑戦して自分の限界を探れ。自分の限界の大幅に上だと潰れる、少し下だと成長はない。自分の限界のほんの少し上を日々突破する。これが安定した成長への鍵だ。厚い胸板がほしいからといっていきなりベンチプレス２００㎏やればいい訳じゃない。人生も筋トレと同じ。
 成長のカギは筋トレの中に。
 何か物足りないと感じているそこの君！断言しよう。足りていないのは筋肉だ。筋肉を手に入れる過程で自信、健康、知識、仲間、成功、根性、品格、社交性、彼女っぽいもの(ダンベル)、自制心、タフなメンタル、趣味、親友っぽいもの(バーベル)、すべてが手に入る。探せ！この世のすべてをジムに置いてきた！
 この世のすべてをジムに置いてきた。
マッチョのことを好きになれるような一冊だった。 筋トレや糖質制限が続くと、時には辛くなって投げ出したくなることもあるだろう。 そういう時は、もう一度この本と手にとって盲目的にマッチョ社長を信じたい。こんなマッチョになりたい。
目次紹介  メンタルがボロボロになった人へ 何度ダイエットしても痩せないあなたへ いつも自分に負けてしまうあなたへ どうしても仕事で成功したいあなたへ 異性との接し方が分からないあなたへ そろそろ筋トレしたくなってきたあなた  </description>
    </item>
    
    <item>
      <title>Alfredの有料版を購入して覚えたこと・知ったこと</title>
      <link>http://kotazi.github.io/blog/post/2017/0118_alfred/</link>
      <pubDate>Wed, 18 Jan 2017 21:40:19 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2017/0118_alfred/</guid>
      <description>Alfredの有料版を購入して覚えたこと・知ったこと 今更ながらAlfredの有料版を購入。 せっかくなので使い方を調べて知らなかった便利そうなものをまとめました。
ファイル検索  先頭に&#39;を入れてファイル検索   ディレクトリ検索  先頭に&amp;rsquo;~&amp;lsquo;を入れてユーザーディレクトリから検索   ファイルのバッファ  ⌥↑でバッファに追加 ⌥←で最後のアイテムをバッファから除く ⌥→で全てのバッファアイテムに対してアクションを実行 ⌥backspaceで全て削除 細かい設定は&amp;rdquo;Preferences&amp;rdquo; =&amp;gt; &amp;ldquo;Features&amp;rdquo; =&amp;gt; &amp;ldquo;File Search&amp;rdquo; から可能  その他  ↑で履歴を表示 →でアクションの一覧 ⌘Yでクイックルック  辞書  辞書の設定が可能 デフォルトではdefineで検索する  クリップボード履歴  細かい設定は&amp;rdquo;Preferences&amp;rdquo; =&amp;gt; &amp;ldquo;Features&amp;rdquo; =&amp;gt; &amp;ldquo;Clipboard&amp;rdquo; から  スニペットの登録  スニペットも登録できる   &amp;ldquo;Automaically expand snippets by keyword&amp;rdquo;をオンにすれば、キーワードを入力すると自動でトリガーしてくれる   Workflows ワークフローもすごく便利。使い方やおすすめのワークフローは下記のリンクでだいたい十分。
 開発におすすめの Alfred Workflows ○○選  入れたもの貼っておく。
その他参考リンク AlfredのWorkflowsやThemeをさがしたければこちらへ。</description>
    </item>
    
    <item>
      <title>人と企業が信頼で結ばれる新しい雇用 - ALLIANCE</title>
      <link>http://kotazi.github.io/blog/post/2017/0114_alliance/</link>
      <pubDate>Sat, 14 Jan 2017 18:31:41 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2017/0114_alliance/</guid>
      <description>昨年はスタートアップやマーケティング周りの本を一通り読み、今年は技術系か、もしくはあまり仕事には関係ないものを読みたいと思いながら昨年の積み残しを消化中。 ということで、ALLIANCE ― 人と企業が信頼で結ばれる新しい雇用を読みました。
 「人と企業が信頼で結ばれる新しい雇用」という副題の通り、終身雇用の時代が終わった今こそ求められている、 新しい雇用を提唱する。そんな本だった。
著者のリード・ホフマンといえばPaypal出身でLinkedinの共同創業者という印象程度。 Linkedinに対しては、MSの買収には大きく驚かされたし、海外でかなり流行っているらしいとは聞いていたものの、 1ユーザーとしてそれほど使っているわけではない。久しぶりに開いてもプロダクトが改善されているようなこともなく、 使っていないのに通知が多くて困るといった感じだった。
だからリード・ホフマンが雇用の未来について、これだけのビジョンを描いていると知って少し驚いた。 と同時に、あくまで「Linkedin」というプロダクトは、ビジョンを実現するためのツールだったのかもしれないと思った。
そしてリード・ホフマンが描くこの新しい雇用を「アライアンス」とこの本では呼んでいる。 会社も個人を定年まで雇うつもりはなく、個人も一生同じ会社に勤めるつもりはない。 そんな時代に雇用を「取引」ではなく「関係」と捉え直し、雇用が終わっても会社と個人の間に築くべき、フラットで信頼に基づいた「パートナーシップ」の関係 と、その築き方を提案するのが本書だ。
度々、「コミットメント期間」という言葉が登場する。 これは「ミッションを期限内に成し遂げることに専念し、そこに個人の信用をかけている」という考え方であり、 Linkedinでも実際に取り入れられているらしい。OKRに似ている部分もあると思う。
会社の利害と社員の利害の間で整合性の取れたコミットメント目標を設定する。 整合性の取れたものを設定するためには、会社は核となるミッションと価値観を打ち立て、社内広める。 そして社員は大切にしている価値観とありたい姿を伝える。
コミットメント期間が終了すれば、再び新しいコミットメント目標を設定する場合もあるし、転職を選ぶ社員もいる。 転職後もその社員と会社は良好な関係を維持できるよう、引き継ぎなども含めて移行期間を用意する。 転職後も続く関係のために、会社は「卒業生」ネットワークを作ることを本書では進めている。
会社が卒業生ネットワークに投資すべき理由としては、
 優れた人材の獲得に役立つ 有力な情報が得られる 顧客を紹介してくれる 卒業生はブランド・アンバサダーである  などだった。
社員としての目線で言えば、僕は既に3社目。どの会社も好きだったから懐かしく思うこともあるし、働いていた頃にもっとこの人と親しくなっておけばよかったと思うこともある。 そして今後もいくつかの会社で働くだろうと考えると、このような働き方には強く共感できるものがあった。
 目次紹介 １. ネットワーク時代の新しい雇用: 職場に信頼と忠誠を取り戻す「アライアンス」とは
２. コミットメント期間を設定しよう: アライアンスは仕事の内容と期間を定める
３. コミット期間で大切なもの: 社員と会社の目標および価値観をそろえる
４. 変革型コミットメント期間を導入する: うまく活用する四つのステップ
５. 社員にネットワーク情報収集力を求める: 社員を通して世界を自社内に取り込む
６. ネットワーク情報収集力を育てるには: 社員の人脈を伸ばすコツと戦術
７. 会社は「卒業生」ネットワークをつくろう: 生涯続く個人と会社のアライアンス関係
８. 「卒業生」ネットワークを活かすには: 効果的に導入するためのコツとテクニック</description>
    </item>
    
    <item>
      <title>Inspired: 顧客の心を捉える製品の創り方</title>
      <link>http://kotazi.github.io/blog/post/2017/0105_inspired/</link>
      <pubDate>Thu, 05 Jan 2017 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2017/0105_inspired/</guid>
      <description>Inspired: 顧客の心を捉える製品の創り方を読みました。
第1部: ソフトウェア製品の開発に関わる人たち  第1章: 製品開発のカギを握る担当者とその役割 第2章: プロダクトマネジメントとプロダクトマーケティング 第3章: プロダクトマネジメントとプロジェクトマネジメント 第4章: プロダクトマネジメントとデザイン(設計) 第5章: プロダクトマネジメントとエンジニアリング(実装) 第6章: プロダクトマネージャーの条件 第7章: プロダクトマネージャーを管理する 第8章: パットン将軍の教え(プロダクトマネージャーへのアドバイス) 第9章: プロダクトマネージャーを支えるブレインたち 第10章: 上から降ってくるものをうまくさばく  第2部: ソフトウェアを開発するプロセス  第11章: 製品市場製の評価 第12章: 製品を見つけ出す 第13章: 製品理念 第14章: 製品委員会 第15章: ユーザーモニター制度 第16章: 市場調査 第17章: プロダクトマネジメントのためのペルソナ 第18章: 製品仕様はどうあるべきかを考える 第19章: 設計と実装 第20章: 必要最小限まで削ぎ落とされた製品2 第21章: 製品仕様の検証 第22章: 製品プロトタイプの検証 第23章: 現在の製品を改善する 第24章: ユーザーにやさしい緩やかなバージョン移行 第25章: 迅速な対応 第26章: アジャイル手法を使いこなす 第27章: ウォーターフォールプロセスを使いこなす 第28章: ベンチャー企業のプロダクトマネジメント 第29章: 大きい会社でもイノベーションは不可能ではない 第30章: 大きい会社で賢く立ち回るには 3</description>
    </item>
    
    <item>
      <title>〈インターネット〉の次に来るもの</title>
      <link>http://kotazi.github.io/blog/post/2017/0104_internet/</link>
      <pubDate>Wed, 04 Jan 2017 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2017/0104_internet/</guid>
      <description>〈インターネット〉の次に来るもの　未来を決める１２の法則を読みました。
  BECOMING COGNIFYING FLOWING SCREENING ACCESSING SHARING FILTERING REMIXING INTERACTING TRACKING QUESTIONING BEGINNING   まず本書は決して、インターネットの終わりなどについて書かれたようなものではない。 そうではなく変化し続けるテクノロジーを前にした時、「不可避」的に向かう未来について考察する。
未来というよりも既に「現在」になりつつあるようなことが多いようにも感じたが、 途中「未来はすでにここにある。まだ均等に分配されていないだけだ。」と書かれてあるように、まあそうなんだろう。
個人的にはそこまで刺さらなかったけれど、 テクノロジー業界ではないけれど興味を持っているみたいな人にはオススメしたいかも。</description>
    </item>
    
    <item>
      <title>起業のファイナンス</title>
      <link>http://kotazi.github.io/blog/post/2016/0817_finance/</link>
      <pubDate>Thu, 03 Nov 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0817_finance/</guid>
      <description>起業のファイナンス 増補改訂版 ベンチャーにとって一番大切なこと を読みました。
  序章 ■ なぜ今「ベンチャー」なのか？ 第1章 ■ ベンチャーファイナンスの全体像 第2章 ■ 会社の始め方 第3章 ■ 事業計画の作り方 第4章 ■ 企業価値とは何か？ 第5章 ■ ストックオプションを有効に活用する 第6章 ■ 資本政策の作り方 第7章 ■ 投資契約と投資家との交渉 第8章 ■ 優先株式のすすめ 第9章 ■ ベンチャーのコーポレートガバナンス   投資サイドからベンチャーについて描いた一冊。 経営者の自伝を読むのもいいが、本書のように投資家視点書かれた本を読んでみるのも面白い。 楽しく読みながらファイナンスについて幅広く知識を得られる一冊。
ベンチャーやスタートアップの立ち上げがどのようにして行われているかというのは、 やはり経営に関わってみないと理解できない部分が多い。 「起業のイメージを持ってもらうこと」を目的として書かれた本書は起業経験のない 僕にとっていくつか不透明だった部分の疑問に答えてくれた。
また、ルール地味た話ばかりではなく、 「例外を無視してあえてシンプルに言えば、ベンチャーはお金を借りるべきではありません。」 といった具合に投資家としての意見をはっきりと述べてくれている。
その上で、銀行からの借入金には「期限の利益喪失」という条項が付いているので、元利の支払いができなければ基本的には全額を即時返済しなければならないことや、収入や不安定な状況で毎月の返済は非常にきついこと。個人保証の危なさなど、わかりやすく解説してくれている。
 以下に勉強になったことを簡単にまとめる。
ベンチャーで投資されるリターンは、基本的にはキャピタルゲインである。金融を考える際の最重要事項は「どうやってお金を取り戻すか」ということ。ベンチャー投資の場合はこれが「EXIT」と呼ばれている。EXITによってキャピタルゲインを得る方法は、上場orM&amp;amp;Aと考えておいていい。(第三は株式の売却)
2013年度のVCが日本で投資する額は718億円に対し、米国で約425億ドル。 この数字を聞くと日本はベンチャーに投資される資金が少ないと感じてしまうが、 イケてる起業には十分な資金は集まる。どちらかと言えば投資したく成るようなイケてる企業が足りていないと考えるべき。
個人でやってきた事業を法人化し増資を受けるのであれば、その半年ぐらい前に会社にしておいたほうが余裕のあるスケジュールを組める。そもそも株式というのは「会社の権利を小分けしたもの」であるから、株式で資金調達をするということは、会社を小口化して販売するのと同じこと。 これまでやってきた事業を法人化する場合は、創業者個人から法人への事業譲渡または現物出資といった取引を行う。上場を目指すとなるとシードでもVCから数億円の評価はしてもらいたい。創業時に数十万しかかけていない事業であれば事前に法人化してVCに当たる前にプロトタイプなどを作るようにする。(つまり、自身への事業譲渡とVC評価時で事業が成長していることが明確な状態を作りたい)
エンジェル投資家で注意点を上げるならば、本来創業者とその投資家が同じ普通株式で同時に出資するとしたら、同業者と出資者の株価は同じでないとおかしい。場合によっては持ち株比率がおかしくなる。生まれた瞬間に資本政策で失敗しているということが起こりうる。事業では失敗をしてもいいが、資本政策で失敗すると取り返しがつかない。
VCから出資を受けるには事業計画を用意する必要があるが、未だ誰もやったことのないことに取り組むベンチャーが計画通りにことが進むはずがない。ここで重要と成るのが「状況に合わせて臨機応変に対応する能力」。ざっくりいえば、
 EXECUTIVE SUMMARY 会社の概要 外部環境 数値計画 検討している資金調達の概要や資本政策  などがオーソドックス。
企業価値について。 企業価値によって株価が決まるため、ベンチャーにとって企業価値は重要。 株式とは起業の経済的価値やコントロール権(議決権)を小口化したもの。</description>
    </item>
    
    <item>
      <title>git rebaseについて</title>
      <link>http://kotazi.github.io/blog/post/2016/1007_rebase/</link>
      <pubDate>Fri, 07 Oct 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/1007_rebase/</guid>
      <description> リモートブランチとリモート追跡ブランチ ちょっと洗いざらいしているうえで、けっこう根本的な部分で理解の浅い箇所があるなということに気がついた。
それがリモートブランチとリモート追跡ブランチ違い。
 git pull と git pull –rebase の違いって？図を交えて説明します！  Docbaseを開発しているKrayのブログ。
図が最高に分かりやすい。fetch理解する前にリモートブランチとローカルブランチの違いを理解する必要があるということに気づくことができた。
完全にリンク先を読むのが一番なので、改めて説明はしないけれども、下記のようなことを学べた。
 リモート追跡ブランチはローカルにある ユーザー自身がリモート追跡ブランチの内容を変更することはできないこと origin/ブランチ名 ってやつはリモート追跡ブランチを指している rebase はコミットを作り直す(ここがリモートに上げたものにrebase すべきでないと言われる理由) そして故に、rebase 後はコミットのハッシュが変わるため、pushがリジェクトされる (これが rebase 後に force push が必要になる理由)  ということがわかった上で、最後は運用ルール次第なのかなと思った。
コミット履歴を汚さないために rebase を推奨する場合もある。(以前一緒に働いていたロシア人もそうだった。)
そんな中で腑に落ちたのがこれ。
 git rebaseを使うときのルール  簡単にまとめると、gitの履歴は綺麗であるべき。だから個人のリポジトリではrebase も好きに使えば良い。
ただチーム開発においてはなにより、他人のコミットにrebase してはいけない。それは他人のコミットを消すということだから(多分ハッシュ値が書き換わるという意味で)。「自分の履歴をきれいに」と 「他人 の履歴をいじるな」。
その他参考リンク  Gitのリモートブランチと追跡ブランチは違うよ Git で「追跡ブランチ」って言うのやめましょう gitglossary(7) Manual Page  </description>
    </item>
    
    <item>
      <title>起業家はどこで選択を誤るのか</title>
      <link>http://kotazi.github.io/blog/post/2016/1006_kigyouka/</link>
      <pubDate>Thu, 06 Oct 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/1006_kigyouka/</guid>
      <description>スマホをAndroidに変えてから読書の量が大幅に減ったためか、ブログの更新が一ヶ月ぶりになってしまった。
iPhoneではVoiceOverの読み上げ機能を使って基本耳で聞きながら読書している。AndroidにもTalkBackという読み上げ機能はあるのだが、 どうやら肌に合わなかったらしい。iPhone7を購入したので最近は読書量が再び増えてきた。
 起業家はどこで選択を誤るのか――スタートアップが必ず陥る9つのジレンマ◯ 第Ⅰ部 創業前夜
第１章 イントロダクション
第２章 キャリアのジレンマ
◯ 第Ⅱ部 創業チームのジレンマ
第３章 ソロかチームかのジレンマ
第４章 人間関係のジレンマ
第５章 役割のジレンマ
第６章 報酬のジレンマ
第７章 ３Rシステム
◯ 第Ⅲ部 創業チームを超えて
第８章 雇用のジレンマ
第９章 投資家のジレンマ
第１０章 ファウンダーCEO交代のジレンマ
◯ 第Ⅳ部 総論
第１１章 富かコントロールかのジレンマ
 ハーバード・ビジネススクール教授のノーム・ワッサーマンが10年分の研究をまとめたという本作。 調査データを元に、企業における様々なジレンマに対してどのようなアプローチをとるべきかを示唆している。
Amazonや他ブログでは比較的高い評価を得ていたが、個人的には現実が伴っていないように感じてあまり面白く感じなかった。 Kindleで「私の調査データ」と検索をかけると43件マッチする。けれども彼の言う調査データが何なのかよく分からない。 あと基本的に冗長で同じことを何回も書いているので1/3の量にまとめてくれれば&amp;hellip;。笑
ただ自分も起業家ではないのであまりこういった本を批判するのもどうかと思うので、自分なりに感じた部分について書きたい。
本書のなかでもいくつかのジレンマについて触れられているが、そのほとんどは「人」がいるから生まれるものだ。 起業をしてEXITを目指すとなると、本当にさまざまな人が関わってくる。さまざまな想いを持った、さまざまな立場の人々。 そういう人たちがさまざまな量の時間なり金なりを一つの会社に投資するわけだから、そりゃしがらみも生まれる。
そうしたしがらみ、そのための意思決定の場面は幾度とあるのだろうが、やはり最初が肝心なのだろう。 最初の仲間。彼の役割、エクイティの分配。最後まで一緒に走りきりたいのであれば、高い比率で分配してもいいかもしれないし、場合によっては優先株やSOを使えばコントロールを渡さずに富による報酬を用意することもできる。後に続く仲間は最初の人と少なからず比較することになるので、最初は間違えてはいけない。
投資家選びも最初が肝心というのはきっと同じ。自分に足りていないリソースを見極めて、お金が必要なだけでコントロールは渡したくないとか、もしくは経験豊富な人にアドバイスも貰いたいのかとか、お互い納得できる人と出会えればいいと思う。(きっとそれが難しくて多くの人に会うんだろうな)</description>
    </item>
    
    <item>
      <title>【Webpack】devtoolのこと</title>
      <link>http://kotazi.github.io/blog/post/2016/0906_webpack_debug/</link>
      <pubDate>Tue, 06 Sep 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0906_webpack_debug/</guid>
      <description>Webpackでビルドしたファイルのデバッグ方法が気になっていたので少し調べてみた。
 結論からいうとwebpack.config.jsのdevtoolオプションから設定できる。 さらに言えば開発環境ではcheap-module-eval-source-map、本番環境ではcheap-module-source-mapを設定するのが良い。
 configuration | Webpack Webpack devtool source map « Cheng&amp;rsquo;s Blog  本番環境をサポートしているものとしていないものがあるのでその点は注意すること。</description>
    </item>
    
    <item>
      <title>Missing .map resource?</title>
      <link>http://kotazi.github.io/blog/post/2016/0824_missing_sourcemap/</link>
      <pubDate>Tue, 23 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0824_missing_sourcemap/</guid>
      <description>Missing .map resource? [duplicate]
Failed to load resource: the server responded with a status of 404 (HTTP/2.0 404)  Safariでbootstrap.css.mapがないというエラーが出ていたから調べてみたけど、 特に問題はないらしい。</description>
    </item>
    
    <item>
      <title>【読書】不格好経営</title>
      <link>http://kotazi.github.io/blog/post/2016/0816_nanba/</link>
      <pubDate>Tue, 16 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0816_nanba/</guid>
      <description>不格好経営―チームDeNAの挑戦を読みました。
  第1章 立ち上げ 第2章 生い立ち 第3章 金策 第4章 モバイルシフト 第5章 ソーシャルゲーム 第6章 退任 第7章 人と組織 第8章 これから   DeNA創業者の南場社長の著書。
本書は一字一句南場社長自身によって綴られている。 多少日記調の部分もあるが、やはり本人が書いているとリアリティがある。
新卒説明会でDeNAの話を聞きに行った時、少しだけ南場社長に質問させてもらったことがある。 何を聞いたか今では忘れてしまったが、すごくエネルギッシュな人だと思った。
そんな南場社長がDeNAの社長退任をすると聞いた時はとても驚いた。 本書の中に夫がガン宣告をされた時の考えが記されているので引用する。
 子どもに恵まれなかったふたちは、あまり家庭らしさのない夫婦で、 互いに仕事を最優先にそれぞれ勝手にやってきた。ふたりとも深夜遅くに帰宅するやいなや爆睡するというパターンが多く、生存確認はするが話をする時間はない。マッキンゼーの同窓会で久しぶり！と挨拶をすることもあった。掃除もしない、漁師もしない、仕事ばかりする妻を、面白がって放っておいてくれた。
今を起点にベストを尽くす。10年以上経営者をやり、そういう訓練だけはしてきたはずだ。過去を悔いても仕方がない。これからだ。告知されてからずっと暗い不安の淵に行ってしまったような夫の目を思い出す。今行くから。助けに行くから。これまでの人生は全部この時のためにあったんじゃないだろうか。そんなふうに思った。
 現在は復帰しているのでこれからも頑張ってほしい。</description>
    </item>
    
    <item>
      <title>【読書】営業の「聴く技術」 SPIN</title>
      <link>http://kotazi.github.io/blog/post/2016/0803_spin/</link>
      <pubDate>Sat, 13 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0803_spin/</guid>
      <description>営業の「聴く技術」 新版―SPIN「4つの質問」「3つの説明」を読みました。
 Cp1. 営業を成功へと導く質問技法
Cp2. ホンモノの営業スキルとは&amp;hellip;
Cp3. クロージング神話の崩壊とSPINの誕生
Cp4. 顧客の心理をハートフルに動かす「4つの質問」
Cp5. 「3つの説明」商談成功のクライマックス
Cp6. 変革・改革・激動の世紀を生き抜くスキル
Cp7. サクセス企業のリポート 4社の事例
 非常に文章力に欠けた本だったので感想を簡略に記す。
SPINの真髄は&amp;rdquo;しゃべるな、しゃべらせろ&amp;rdquo;。
従来「営業はしゃべるもの」を前提に本書はSPINについて解説している。
オールドスタイルのセールス技法として、
 推定承諾法: 買い手が買う気前提に、詰めていく(「いつ届けましょうか？」など) 二者択一法: 「AとB、どちらにしますか？」 立見席法: 「すごい人気。今日ならまだ買えますよ。」不動産などで使われる。 導入時期強調法: 「システム開発に4ヶ月はかかるから、早めに決断しないと」  などは、顧客の気持ちに立てていない。
そこでSPIN。 SPINは「2つのニーズ、4つの質問、3つの説明」によって構成される。
 潜在ニーズ 顕在ニーズ
 状況質問(SituationQ)
 問題質問(ProblemQ)
 示唆質問(ImplicationQ)
 解決質問(Need-PayoffQ)
 特徴(Features)
 利点(Advantages)
 利益(Benefits)
  2008年に書かれたという割には目新しいことが何も書かれていなかった。
けれども著者が1940年生まれということだったので、仕方ないかなあとも思った。
昔はそうだったのかも。</description>
    </item>
    
    <item>
      <title>【読書】社長失格</title>
      <link>http://kotazi.github.io/blog/post/2016/0802_syacho_shikkaku/</link>
      <pubDate>Fri, 12 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0802_syacho_shikkaku/</guid>
      <description>社長失格を読みました。
 うまくまとまっている本ではないが、ハイパーネットの板倉社長の半生がかなり赤裸々に書かれている。「ここまで書いて平気なのだろうか？」と思うぐらい登場人物の名前や取引会社などのことが書かれているので、ある意味他の本では決して読めないことが書いてあるし、一読の価値がある一冊だ。
会社が成長し、衰退し倒産していくまで。 その間で関わってくる人たち、そしてその態度の変化がしっかりと描かれていた。
また、事業を急成長させていくうえで出資なり融資なりの協力はとても大きい。 大きいからこそしっかりと知り、適切な関係を築いていかなくてはならない。
その上で、人が最大の資産だということを忘れない。</description>
    </item>
    
    <item>
      <title>【Go】Deploying a Go App</title>
      <link>http://kotazi.github.io/blog/post/2016/0810_goapp_deploy/</link>
      <pubDate>Wed, 10 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0810_goapp_deploy/</guid>
      <description>GCP/Goアプリケーションのデプロイ周りについて学んでいたところ。
goapp deployだったり、GoogleAppEngineLauncherだったり、 appcfg.pyだったり、dev_appserver.pyだったりと少しややこしくなった。
 Deploying a Go App  まず、goappはApp Engine Go SDK に含まれているものだ。appcfg.pyもここに含まれている。
デプロイ後、アプリケーションはhttps://&amp;lt;YOUR-PROJECT-ID&amp;gt;.appspot.comで動作する。
ファイルをアップロードするには、goapp deployをアプリケーションのルートディレクトリから実行しよう。この時ルートディレクトリには app.yamlが用意されていなければならない。 引数を使ってルートの位置を示すこともできるけれども、細かいことはgoapp help deployで見てほしい。
app.yamlにあるアプリケーションIDを自動的に使う。けれども多くのサンプルアプリケーションではapp.yamlからapplication:や version:を除外している。そういう場合はコンソールからバージョンやアプリケーションIDを指定する。
goapp deploy -application &amp;lt;YOUR_PROJECT_ID&amp;gt; -V v1 myapp/  アプリケーションが複数のサービスから成る場合、 更新するサービスを指定することができる。
 デフォルトのサービスを更新する場合、リストの最初ものが更新される 初めて更新する場合、デフォルトのサービスは必ず含まれる  </description>
    </item>
    
    <item>
      <title>【Go】Go Bookshelf App: PubSub</title>
      <link>http://kotazi.github.io/blog/post/2016/0809_go_pub_sub/</link>
      <pubDate>Tue, 09 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0809_go_pub_sub/</guid>
      <description>Using Cloud Pub/Sub with Go  Google Book APIを使ってバックグラウンドワーカーに処理をさせる。
 前回同様、config.goから下記部分のコメントを削除し、ProjectIDを書き換える。
ローカルホストを立ち上げた状態で下記のコマンドでバックグラウンドワーカーが動く。
cd $GOPATH/src/github.com/GoogleCloudPlatform/golang-samples/getting-started/bookshelf cd pubsub_worker PORT=8081 go run worker.go  http://localhost:8081/でワーカーインスタンスに立直できる。 処理した本の数についてのステータスが確認できる。
↑ 「イノベーションのジレンマ」とタイトルをいれると勝手に入る
デプロイする $ cd $GOPATH/src/github.com/GoogleCloudPlatform/golang-samples/getting-started/bookshelf # Deploy the worker cd pubsub_worker aedeploy gcloud app deploy # Deploy the main app cd ../app aedeploy gcloud app deploy  下記がアクセス先になる。
https://[YOUR_PROJECT_ID].appspot.com https://worker-dot-[YOUR_PROJECT_ID].appspot.com  データベース内で本が更新されるとCloud Pub/Subが走る。 ワーカーは分離して稼働していて、これらのイベントをリッスンしている。 イベントを受け取るとワーカーkはBooksAPIにリクエストを作成し、データベースの本の記録を更新する。
以上。</description>
    </item>
    
    <item>
      <title>【Go】Go Bookshelf App: Logging</title>
      <link>http://kotazi.github.io/blog/post/2016/0808_go_logging/</link>
      <pubDate>Mon, 08 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0808_go_logging/</guid>
      <description>どのようにして詳細なログ情報を残していくか。
 Logging Application Events with Go  Cloud Platformの提供するログやモニタリングツールがあるので、Cloud Platform Consoleから簡単に確認することができる。
このサンプルでは標準のlogパッケージとGorillaのCombinedLoggingHandlerを利用している。
標準のエラー:
type appHandler func(http.ResponseWriter, *http.Request) *appError type appError struct { Error error Message string Code int } func (fn appHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) { if e := fn(w, r); e != nil { // e is *appError, not os.Error. log.Printf(&amp;quot;Handler error: status code: %d, message: %s, underlying err: %#v&amp;quot;, e.Code, e.Message, e.Error) http.Error(w, e.Message, e.Code) } }  HTTPリクエストのログ:</description>
    </item>
    
    <item>
      <title>【Go】Go Bookshelf App: Authenticating Users</title>
      <link>http://kotazi.github.io/blog/post/2016/0805_go_authenticating_users/</link>
      <pubDate>Fri, 05 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0805_go_authenticating_users/</guid>
      <description>OAuth2.0を使ったユーザー認証。
 Authenticating Users with Go   Web application client IDの作成 credentialsへアクセスし、OAuth consent screenをクリック。 プロダクト名のところにGo Bookshelf Appと入力し、その他も任意で記入する。
保存後、Create credentials &amp;gt; OAuth client IDと移動し、Application typeではWeb applicationを選択。 NameはGo Bookshelf Client。Authorized redirect URIsにProjectIDに置き換えた値を入れる。
http://localhost:8080/oauth2callback http://[YOUR_PROJECT_ID].appspot.com/oauth2callback  作成すると、IDとclient secretが表示されるので保存しておくこと。
 前回同様、下記へ移動してconfig.goを開く。
cd $GOPATH/src/github.com/GoogleCloudPlatform/golang-samples/getting-started/bookshelf  下記のコメントを削除し、clientidとclientsecretを先ほどの値に置き換える。
// oauthConfig = configureOAuthClient(&amp;quot;clientid&amp;quot;, &amp;quot;clientsecret&amp;quot;)  app/app.yamlを開き、OAUTH2_CALLBACKのProjectIDを自分のものに置き換える。
 ローカルの立ち上げやデプロイは前回同様。
セッションを扱うためにGorilla web toolkitを使っている。 GorillaはいくつかのStoreインターフェイスを持っているが、今回はCookieStoreを利用。
認証の仕組みはまず、Googleの認証画面にリダイレクトさせ、そのレスポンスを、ユーザーがアプリケーションに戻る際に処理させるというものである。
アプリケーションはClientIDとOAuthスコープを使ってURLを生成する。スコープには、アプリケーションがアクセスしようとするユーザー情報が何かということを含む。
config.goのこの部分がそれにあたる。
func configureOAuthClient(clientID, clientSecret string) *oauth2.Config { redirectURL := os.Getenv(&amp;quot;OAUTH2_CALLBACK&amp;quot;) if redirectURL == &amp;quot;&amp;quot; { redirectURL = &amp;quot;http://localhost:8080/oauth2callback&amp;quot; } return &amp;amp;oauth2.</description>
    </item>
    
    <item>
      <title>【Go】Go Bookshelf App: Cloud Storage</title>
      <link>http://kotazi.github.io/blog/post/2016/0804_go_cloud_strage/</link>
      <pubDate>Thu, 04 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0804_go_cloud_strage/</guid>
      <description>続いて、&amp;ldquo;Using Cloud Storage with Go&amp;rdquo;。
Cloud Storageの作成 下記コマンドでCloud Storageを作成する。
実はどんな名前でもいいんだけど、ProjectIDに合わせておくのがよい。
❯❯❯ gsutil mb gs://*****-***-kotazi Creating gs://*****-***-kotazi/... ~/R/blog ❯❯❯ gsutil defacl set public-read gs://*****-***-kotazi Setting default object ACL on gs://*****-***-kotazi/...  Configuring settings プロジェクトルートへ移動してconfig.goを開く。
cd $GOPATH/src/github.com/GoogleCloudPlatform/golang-samples/getting-started/bookshelf  下記部分のコメントを消して、バケット名に書き換える。
// StorageBucket, err = configureStorage(&amp;quot;&amp;lt;your-storage-bucket&amp;gt;&amp;quot;)  ローカル立ち上げやデプロイの方法はさっきと同じ。
今回で言うと本棚の画像をCloud Storage側におけるようになる。そのためのコードが下記。
getting-started/bookshelf/app/app.goのuploadFileFromForm関数。 この関数の中で画像があるかないかをチェックした折、あればCloud Storageにアップロードする。
// uploadFileFromForm uploads a file if it&#39;s present in the &amp;quot;image&amp;quot; form field. func uploadFileFromForm(r *http.Request) (url string, err error) { f, fh, err := r.</description>
    </item>
    
    <item>
      <title>【Go】Go Bookshelf App: Datastore</title>
      <link>http://kotazi.github.io/blog/post/2016/0803_go_nosql/</link>
      <pubDate>Wed, 03 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0803_go_nosql/</guid>
      <description>GCPのGoのチュートリアルの概要。
とりあえずDatastoreでやってみることに。
 Using Structured Data with Go   先ほどクローンしたコードの編集を加える。
cd $GOPATH/src/github.com/GoogleCloudPlatform/golang-samples/getting-started/bookshelf  config.goを開き、下記部分のコメントを消して、自分のプロジェクトIDに置き換える。
// DB, err = configureDatastoreDB(&amp;quot;projectid&amp;quot;)  ローカルマシンで起動 下記コマンドでローカルマシンを立ち上げる。
 http://localhost:8080  cd app go run app.go auth.go template.go  アプリケーションの動作を確認できる。
デプロイする appディレクトリ内で下記のコマンド。https://[YOUR_PROJECT_ID].appspot.comでアクセス可能。
aedeploy gcloud app deploy  アプリを更新する場合、同じコマンドをを使えばバージョンを更新できる。 新しくデプロイすると新しいバージョンが作られる。
古いバージョンも残り続けるので課金対象にしたくなければ削除するのがいい。
バージョンページから削除できる。
 getting-started/bookshelf/db_datastore.goの
// AddBook saves a given book, assigning it a new ID. func (db *datastoreDB) AddBook(b *Book) (id int64, err error) { ctx := context.</description>
    </item>
    
    <item>
      <title>【Go】Go Bookshelf App: 概要</title>
      <link>http://kotazi.github.io/blog/post/2016/0802_go_bookshelf/</link>
      <pubDate>Tue, 02 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0802_go_bookshelf/</guid>
      <description>GCPのGoのチュートリアルの概要。
 Go Bookshelf App   機能:  リストの閲覧、追加、削除 詳細の編集 カバー画像のアップロード Googleアカウントでのログインと、追加した本の確認  目標:  サンプルアプリケーションのクローン ローカルでの起動 GAE環境へのデプロイ サンプルコードを読む データ構造のストアについて Google Cloud Storeでのバイナリデータのストアについて ユーザー認証について GCP Consoleで確認するイベントログについて バックグラウンドワーカーにタスクを送るGoogle Cloud Pub/Subの使い方  手順: ここからGCP Console Projectを選択/生成する。 ここを見て課金を有効にする。 さらに、Cloud SDKのインストール。
それができたら、下記コマンドでgcloud認証
gcloud init  成功するとここへ飛ぶ。(gcloudのチュートリアルあるから読んでみてみいいかも。)
ここからDatastore、Cloud Pub/Sub, Cloud Storage JSON, Cloud Logging, Google+ APIsを利用できるようにする
続いて、アカウントを確認
~/R/s/gcp ❯❯❯ gcloud config list Your active configuration is: [default] [core] account = kotazi@*****.com disable_usage_reporting = False project = ********  必要に応じて、自分で設定もできる</description>
    </item>
    
    <item>
      <title>Atomic Design覚書</title>
      <link>http://kotazi.github.io/blog/post/2016/0801_atomic_design/</link>
      <pubDate>Mon, 01 Aug 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0801_atomic_design/</guid>
      <description>Atomic Designについて少し学んだので覚えているうちにメモにまとめよう。
Atomic Design Atomic Designは性質の異なる5つのステージによって構成される方法論である。 これらのステージはよく考えられたインターフェイスデザインシステムを作り出す。
Atoms(原子) 原子が物質の基本的な構成要素であるならば、ユーザーインターフェイスを構成する基本的な要素である。 それゆえラベルやインプット、ボタンなどのそれ以上分解できない基本的なHTMLタグなどが含まれる。
それに加えて、フォントスタックやカラーパレット、またはアニメーションなどの抽象的な要素も含まれる。
Molecules(分子) 比較的シンプルな単一機能のUI要素。 例えば、フォーム用のラベルと、検索用インプットと、それようのサーチボタンなど。
Organisms(有機体) 比較的複雑なUIコンポーネントであり、分子や原子などが合わさったり合わさらなかったりして構成される。
Templates ページレベルのオブジェクトであり、コンポーネントをレイアウトに配置し、設計の基礎となるコンテンツの構造を明確にする。
ワイヤーフレームのような印象。
Pages ページは特有のテンプレートのインスタンスであり、リアルなコンテンツでプレースホルダーを置き換える。
 良いけどうまくまとめられん。
思想は良いけど、実際のワークフローにどのように組み込むかが大切で、 しっかりそれについても書いてくれているんだけれども、 今のチームの既存のデザインワークフローを知らないのでなんとも言えない。
また機が来たら向き合おう。</description>
    </item>
    
    <item>
      <title>【読書】イノベーションへの解</title>
      <link>http://kotazi.github.io/blog/post/2016/0701_innovation/</link>
      <pubDate>Sat, 30 Jul 2016 13:38:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0701_innovation/</guid>
      <description>イノベーションへの解 利益ある成長に向けて (Harvard business school press)を読みました。
  第一章 成長という至上命令 第二章 最強の競合企業を打ち負かす方法 第三章 顧客が求める製品とは 第四章 自社製品にとって最高の顧客とは 第五章 事業範囲を適切に定める 第六章 コモディティ化をいかにして回避するか 第七章 破壊的成長能力を持つ組織とは 第八章 戦略策定プロセスのマネジメント 第九章 良い金もあれば悪い金もある 第十章 新成長の創出における上級役員の役割 終章 バトンタッチ   前作の「イノベーションのジレンマ」が超良書だとすると、こちらの本は良書といった印象。
というか、対象とする企業が大きくなりすぎて少し遠く感じてしまったかもしれない。
第一章 成長という至上命令 本書のテーマはビジネスにおける新たな成長を生み出す方法である。どんな企業も成長という至上命令からは免れない。 投資家は「企業の予測成長率を株式の現在価値に織り込む」という性向を持つ。そのため、株価を動かすのは成長の方向性ではなく、予想外の変化である。株価を引き上げるためには市場予測を上回る早さで成長する必要があり、これは株主価値の増大に気を配る経営者にとっては重圧となる。
第二章 最強の競合企業を打ち負かす方法 どうすれば最強の競合企業を打ち負かすことができるのか。
前作でもイノベーションの状況を、持続的イノベーションと破壊的イノベーションに区別した。 持続的イノベーションにおいては既存企業がほぼ必ず勝つため、新興企業が実績のある競合を打ち負かすための最良の手段は、破壊的戦略をとること。
また、上図のように第三次元に新しいバリューネットワークを生み出す破壊を新市場型破壊、本来のバリューネットワークのローエンドにいる顧客を攻略する破壊をローエンド型破壊と呼ぶ。
破壊とは理論であり、競争の帰結が状況に応じてどのように変化するかを、高い精度で予測できる、因果関係を示す概念モデル。
(章末にある各企業や製品の破壊的戦略の概要がすごくいい。)
第三章 顧客が求める製品とは 破壊的戦略を実行するためにどのような製品を開発すべきか。ターゲットとすべき市場は？
あらゆる企業が製品の企画や開発に取り組むが、総計すると資金の3/4が商業的に成り立たない製品を生み出す結果に終わっている。市場細分化のプロセスには状況に即した市場分野の定義が欠かせない。
以下引用。
 本書ではまず、一般的なアプローチとは若干異なる、市場細分化の考え方について説明する。顧客が特定の「用事」を片付けるために製品を「雇う」、という考えに基づくこの手法を用いれば、顧客が現実に生活を送る様子を正確に映し出すような形で、市場の細分化をすることができる。
 持続的向上を進める間も特定の用事に結びついたままでいること、そして顧客を雇うべき製品に誘導する目的ブランドを構築することが、破壊的製品を成長軌跡上に留める唯一の方法。(マーケティングを考えると、データが入手可能な区分によって市場を細分化してしまいがちだが、そのために真のニーズを見失ってはいけない。顧客が片付けようとしている用事を考えよう。)
第四章 自社製品にとって最高の顧客とは 最も発展性のある基盤となるのはどのような顧客か。
破壊的イノベーションにとって理想的な顧客や用途市場を探すためのテンプレートを下記に引用する。
１．標的顧客はある用事を片付けようとしているが、金やスキルをもたないため、解決策を手に入れられずにいる。
２．このような顧客は、破壊的製品をまったく何も持たない状態と比較する。そのため、本来のバリューネットワークのなかで、高いスキルを持つ人々に高い価格で販売されている製品ほど性能が良くなくても、喜んで購入する。こうした新市場顧客を喜ばせるための性能ハードルは、かなり低い。
３．破壊を実現する技術の中には、非常に高度なものもある。だが、破壊者はその技術を利用して、誰でも購入し利用できる、シンプルで便利な製品をつくる。製品が新たな成長を生み出すのは、「誰でも使える」からこそだ。金やスキルをそれほど持たない人々でも消費を始められるのだ。
４．破壊的イノベーションは、まったく新しいバリューネットワークを生み出す。新しい顧客は新しいチャネル経由で製品を購入し、それまでと違った場で利用することが多い。
あなたの会社にとって理想の顧客とは、あなたのバリューネットワークに属するすべての存在にとって魅力的で、彼らに力を合わせてこの機会を追求する意欲を与えるような顧客。理想顧客に的を絞るためにこのプロセスを注意深くマネジメントすれば、新成長ベンチャーは将来の成長のための確固たる基盤を手に入れられる。
第五章 事業範囲を適切に定める 製品の設計、生産、販売、流通。どれを社内で行い、どれを社外に任せるべきか。 一般的にはコアコンピタンス(中核的な能力)は社内に残し、コアコンピタンスに結びつかない業務は外部の専門業者に委託すべきだという。
製品の機能性と信頼性が顧客ニーズを満たすほど十分でない状況では、独自のアーキテクチャを持ち、統合されている企業が有利。 だが機能性と信頼性が十分以上になるとスピードとレスポンスが求められるようになり、その段階では特化型の専門企業、つまり 相互作用の方式がモジュール型のアーキテクチャと業界標準によって定義されている企業が優位に立つ。</description>
    </item>
    
    <item>
      <title>【CSS】ECSSまとめ</title>
      <link>http://kotazi.github.io/blog/post/2016/0729_ecss/</link>
      <pubDate>Thu, 28 Jul 2016 11:57:40 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0729_ecss/</guid>
      <description>Enduring CSS(以下ECSS)についてまとめる。
ECSSは大規模プロジェクトのためのCSS設計手法だ。考案者はBen Frain。 大規模WebアプリケーションにおけるCSSの記述について根本的なアプローチを定義したいという彼の個人的な要望から生まれている。
■ ECSSの要望  長期にわたって肥大なCSSのメンテナンスを容易にすること 他に影響を与えずに、コードベースから一部のCSSを取り除けるようにすること どんな新しいデザインでも高速に開発することを可能とすること ある要素へのプロパティや値の変更が他に意図しない影響を与えないこと 実装の変更には最小限のツールやワークフローしか必要としないこと 可能な限り、ユーザーインターフェイス内でのステートの変更を伝達する際などARIAのようなW3C標準をもちいること  ■ スケールする際の問題点 プロジェクトの成長に伴いCSSの記述量は増大する。 多くの開発者が加わり、特殊なケースやブラウザ挙動に対応するうちに手に負えなくなってしまう。
 The CSS Specificity(詳細度) セレクタをマークアップで縛ること カスケード  どれも便利なものであるが、大規模プロジェクトにおいては既存ルールを取り除いたり、 修正したりすることが難しく、新しいルールを適用してしまう。このやり方に頼っていると コードは不要なルールで溢れかえることになる。
■ その他のCSS設計 ▼ OOCSS これはOOCSSのみならず、Atomic CSSやその他のSRPについても言えることだ。
OOCSSの最たる主張はコードの重複を取り除くことにあり、その結果CSSがメンテナブルになるというものだ。 本質的にはレゴのピースを組み立てるようなもので、可能な限り再利用し、必要であれば拡張する。
これはレスポンシブデザインにおいて急所を抱えている。
&amp;lt;div class=&amp;quot;blk m-10 fr&amp;quot;&amp;gt;Here I am&amp;lt;/div&amp;gt;  上記のように、OOCSS/Atomic CSSでは再利用可能なクラスに分割する。 しかしながら、ビューポートが変更された場合はどうするべきだろう。 例えば別のクラスをつけることもできるが(Mplus-cc2のような)面倒なことになるし、HTMLが複雑になる。
さらにはメンテナンスにも問題があり、大規模プロジェクトではメンテナンスは必ず必要になるが、 その段階ではCSSルールの見直しも必要となる。その場合マークアップについているクラスも書き換えが大きく発生する。
▼ SMACCS SMACSSはCSSのスケーラブルモジュールアーキテクチャとして標準的なもの。 SMACSSではヴィジュアル面の用語や概念を明確に定義する。 それゆえBase/Layout/Module/State/Themeなどを定義していく。
よく考えて構成する必要があり、もっと緩いものが欲しかった。
▼ BEM BEM(Block Element Modifier)はネーミングの方法論。
既存のものからならBEMを選ぶ。BEMの良い点は下記。
 すべての要素に同様の特殊性があること。ある1つのクラスがすべてのエレメントに与えられる。 HTML構造が結合されていないため、スタイルにセレクタを使わないこと。 開発ツールやコードエディタ上で、要素の親が何であるかを推論しやすいこと。  けれどもModifierが適さなかった。</description>
    </item>
    
    <item>
      <title>【CSS】Android標準ブラウザにおけるPlaceholderのズレ</title>
      <link>http://kotazi.github.io/blog/post/2016/0727_placeholder_android/</link>
      <pubDate>Wed, 27 Jul 2016 11:57:40 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0727_placeholder_android/</guid>
      <description>iOS/SafariやAndroid/Chromeなどでは再現しなかったが、Androidの標準ブラウザでPlaceholderの位置がずれてしまった。
調べてみると似たような記事がいくつか見つかった。
 placeholderを指定したときにAndroidでテキスト表示位置を中央にしたい Placeholders inputs not centered with Android 4.1.2 #453  不具合の再現と修正のものを用意した。
See the Pen akKBaa by Kohei Saeki (@kotazi) on CodePen.

結局bodyで当てていたline-heightが良くなかったらしい。 placeholderのheightに合わせて72pxを当てたら直った。
ちなみにline-heightの初期値はnormal。</description>
    </item>
    
    <item>
      <title>【Shell】ちょっとした覚書</title>
      <link>http://kotazi.github.io/blog/post/2016/0726_shell/</link>
      <pubDate>Tue, 26 Jul 2016 11:57:40 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0726_shell/</guid>
      <description>JamieMason/ImageOptim-CLIのサンプルにあるシェルが読めなかったので調べた。
images=$(git diff --exit-code --cached --name-only --diff-filter=ACM -- &#39;*.png&#39; &#39;*.jpg&#39;) $(exit $?) || (echo &amp;quot;$images&amp;quot; | imageoptim &amp;amp;&amp;amp; git add $images)  ↑ これ。
  bash Tips - コマンド置換と算術式展開、パラメータ展開  $()で囲むとコマンド実行できる。
 git-diff(1) - Linux man page  -exit-codeは差分があれば1を返すし、なければ0
--cachedはステージしたファイルの差分を確認する。
--name-onlyは差分のあるファイル名のみ出力する。
--diff-filterはACDMRTUXB*から選べる。 今回のACMはAdded (A), Copied &amp;copy;, Deleted (D), Modified (M), Renamed &amp;reg;, changed (T), are Unmerged (U), are Unknown (X), Broken (B)である。 今回はAdded/Copied/Modified。
2行目の$?。これは直前に実行された処理の終了コード値を表す。
参考: Linuxのシェルスクリプト変数の記号あれこれ
0もしくは1が渡るはず。
exit 0(差分がなかった場合)はそのまま正常終了。</description>
    </item>
    
    <item>
      <title>【読書】自分のアタマで考えよう</title>
      <link>http://kotazi.github.io/blog/post/2016/0710_chiki/</link>
      <pubDate>Sun, 10 Jul 2016 11:57:40 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0710_chiki/</guid>
      <description>38冊目。 自分のアタマで考えようを読みました。
  はじめに
 序　章 「知っていること」と「考えること」はまったく別モノ
 第一章　最初に考えるべき「決めるプロセス」
 第二章 「なぜ？」と「だからなんなの？」と問うこと
 第三章　あらゆる可能性を検討しよう
 第四章　縦と横に比べてみよう
 第五章　判断基準はシンプルが一番
 第六章　レベルを揃えて考えよう
 第七章　情報ではなく「フィルター」が大事
 第八章　データはトコトン追い詰めよう
 第九章　グラフの使い方が「思考の生産性」を左右する
 終　章　知識は「思考の棚」に整理しよう
 おわりに   なかでも思考は知識に騙されるという話が面白かった。 自分の頭で考えているようでも、前から持ち合わせていた知識を引っ張りだしているだけの人がいると。 もちろんそれ自体が悪いことではないのだけれど、やはり「思考する」とそれは別ものだ。
また、何かを決めるためには「情報」だけではなく、「意思決定のプロセス」が必要。 さまざまな情報がある中で、その情報が重要かどうかは「今、求められている意思決定プロセスに必要かどうか」によって決まるべき。 そもそも考えるとは、あるインプットを元に結論を出したということ。それは仮の結論でもいいし、最初の段階では間違っているかも知れない。 それでもそれが考えるということ。
情報を見た時には「なぜ？」と「だからなんなの？」を考える。 考えるためにもっとも役に立つ分析手法は「比較すること」
 個人的には「マーケット感覚を身につけよう」のほうが面白かった。 けれども、こうやってブログを書いていることのひとつの理由に、 1冊の本からどれだけのことを学ぼう、学べるだろうということがある。
もともと自分の中に疑問に思っていたことで、 本にはたくさんの文字が書かれているけど、 それを一字一句全て覚えたらその本に書かれていることを理解したことになるのだろうか などと考えていたのだ。
それはもちろんできないのだけれど、 きっとできたとしても理解するというのはそういうことではない。 例えば友人にほんの内容を聞かれたときに自分の言葉で伝えられることが、 本の内容を理解したということなんじゃないだろうかということでブログに書いている。</description>
    </item>
    
    <item>
      <title>【読書】机に向かってすぐに集中する技術</title>
      <link>http://kotazi.github.io/blog/post/2016/0704_focus/</link>
      <pubDate>Mon, 04 Jul 2016 18:05:34 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0704_focus/</guid>
      <description> 机に向かってすぐに集中する技術株式会社ミズノに勤め、サメ肌水着を開発した方の書いた本。
どちらかといえばデスクワークの人向けに書かれた集中力の本だけれど、 著者のバックグラウンドもあってかかなりスポーツ寄りな考え方で書かれている。
「モチベーション」に依存した集中の方法ではなく、 まずは行動を起こすというところから改善をする。
はっきり言ってめちゃめちゃよかった。
 目線を一点に集中させる 雨の音を集中力のカーテンにする 目線が泳がない訓練をする 椅子には浅く座る  集中カードの使い方  5, 3, 8の深呼吸を3回行う カードの中心にある点に焦点を合わせ、20病患見つめる ゆっくり目を閉じる 残像が消えたら、ゆっくりと目を開ける 「今からやるべきこと」を開始する  </description>
    </item>
    
    <item>
      <title>【読書】疲れない脳をつくる生活習慣</title>
      <link>http://kotazi.github.io/blog/post/2016/0703_focus/</link>
      <pubDate>Sun, 03 Jul 2016 18:05:34 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0703_focus/</guid>
      <description>疲れない脳をつくる生活習慣―働く人のためのマインドフルネス講座を読みました。
 第１章◆1日5分の瞑想が人生を変える
第２章◆時間管理の肝は睡眠にあり
第３章◆仕事のパフォーマンスを劇的に高める姿勢術
第４章◆血糖値を制する者は仕事を制す
第５章◆疲れない脳をつくるための1日の過ごし方
 瞑想、時間管理、姿勢、血糖値。
精神論みたいなのが展開されていなくてすごくいいと思った。
内容もすごく難しいことは書いていないので実践しやすい。</description>
    </item>
    
    <item>
      <title>【読書】集中力</title>
      <link>http://kotazi.github.io/blog/post/2016/0702_focus/</link>
      <pubDate>Fri, 01 Jul 2016 18:05:30 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0702_focus/</guid>
      <description>集中力を読みました。
 1．集中力があれば道は開ける
2．集中力で身につけるセルフコントロール術
3．望むものを手に入れる方法
4．どんなビジネスでも成果を生み出す力
5．環境はあなたの思いどおり
6．意志を育てるトレーニング
7．無限の精神力を引き出すために
8．平静な精神状態が集中力の鍵
9．悪習感を断ち切る
10．ビジネスの達人になる
11．勇気のある人間
12．裕福になるということ
13．できるかできないかは、あなたしだい
14．エクササイズで身につける技術
15．忘れないための記憶力
16．集中力で願望を達成する
17．理念の育て方
18．メンタルパワーの力
19．集中力で伸ばす強い意志
20．最後にもう一度、集中力の大切さについて
 すごく昔に書かれた本らしく精神論が多いように感じた。
中身の割にはすごく分厚い。
集中力やタイムマネジメントに関する本というよりも、 自己啓発本といったほうがちかい。
だから目次を見てもらえばわかるけれども、 勇気の話とか精神力といった言葉が出てくる。
集中力を高めるために人間を磨くというか、 修行の本だ。</description>
    </item>
    
    <item>
      <title>【読書】マーケット感覚を身につけよう</title>
      <link>http://kotazi.github.io/blog/post/2016/0630_market_feeling/</link>
      <pubDate>Wed, 29 Jun 2016 12:41:20 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0630_market_feeling/</guid>
      <description>マーケット感覚を身につけよう&amp;mdash;「これから何が売れるのか?」わかる人になる5つの方法を読みました。
 本書の目的は「マーケット感覚とは何かを説明し、なぜそれが大事なのかを理解していただき、マーケット感覚を身につけるための具体的な方法論をていじすること」と冒頭に書いてあり、その後の進め方も非常に分かりやすい良書だった。著者はChikirinの日記などでも有名なちきりん氏。
足元に金塊が落ちていたらどんな大人でも驚いてしまうだろうが、&amp;rdquo;金塊には価値がある&amp;rdquo;ことを知らない幼児が見つけても、それは単にキレイな石にしか過ぎない。このように自分の身の回りにある価値に気がつくことができない大人は多い。本書ではこの、「売れるものに気がつく能力」「価値を認識する能力」のことをマーケット感覚と呼ぶ。
  序 もうひとつの能力 １ 市場と価値とマーケット感覚 2 市場化する社会 3 マーケット感覚で変わる世の中の見え方 4 すべては「価値」から始まる 5 マーケット感覚を鍛える5つの方法 終 変わらなければ替えられる   マーケット感覚が何かを知るためには、そもそもマーケットとは何かということを知らなければならない。
不特定多数の買い手(需要者)と不特定多数の売り手(供給者)がお互いのニーズを満たしてくれる相手とマッチングされ、価値を交換する場所 をマーケット(市場)と呼んでいる。この条件を満たすのであれば貨幣の介在は必須ではなく、物々交換であっても市場と呼ぶことができる。就職活動も婚活もすべて市場である。
① 取引される価値
② 買い手=需要者
③ 売り手=供給者
④ 取引条件
市場は上記4つの要素によって成り立っており、
⑤ 買い手と売り手が取引する動機
⑥ それぞれの要素に起こりうる今後の変化
⑦ 市場の中で選ばれるための方法
動きを予測し市場を活用するためには上記のような点について考えていく必要がある。
 また今後の社会の変化を知るために社会の市場化がキーワードになる。 昔は就職も結婚も知人の紹介などを使ってマッチングされる相対取引がメインだった。 けれどもインターネットが現れ、「全学生が全企業を相手に就職活動を行う」ということが可能になった。 そしてこれが社会の市場化である、今後もこのようなことがさまざまな分野で起こる。
 市場には入れ子構造が存在する。例えば「消費市場」と「貯蓄市場」が存在する。 メーカーやサービス業は消費市場の中で競い合う。けれども上位レイヤーには保険や銀行といった貯蓄し譲渡の競争があり、 この競争が重要。(ちなみに自分は最近プルデンシャルの営業を受けているけれど、事前に保険の重要性を示すことや、そのあとは様々なプランを提示することで他社ではなく、プルデンシャルのプランの中から選ばせるようにするのも、入れ子の奥に入れていくような感覚だろう。)
 マーケット感覚を身につける方法
1. プライシング能力を身につける 日本で生活していると既に価格が付けられたものを購入する機械が多い。 けれども自分でいくらが妥当か、いくらまで出せるかを考える力は重要。 良くない例として、値段の高い刺し身を見てそっちのほうが多いと思うようではいけない。
2. インセンティブシステムを理解する 人がなにか特定の言動をとったとき、その背景にある要因や、その要因が言動につながるまでの仕組みである「インセンティブシステム」を理解しよう。 マーケットとは生身の人間が取引をする場所。人間の行動が何に動機づけられているか、そのことに対する洞察がなければマーケット感覚を身につけることはできない。(行動経済学？)
そしてこれを身につけるためには自分の欲に対して素直になること。生き方としても大切だと思う。
3. 市場に評価される方法を学ぶ 昔は企画はJASやJISなど、公的な組織や業界団体が定めるものであったが、現在はデファクトスタンダードが残る。
組織に選ばれる人間ではなく、市場に評価される人間を選ぼう。
4. 失敗と成功の関係を理解する 失敗してもいいからどんどん市場に出してどんどん学ぶこと</description>
    </item>
    
    <item>
      <title>【読書】ストレスフリーの整理術</title>
      <link>http://kotazi.github.io/blog/post/2016/0619_gtd/</link>
      <pubDate>Sun, 19 Jun 2016 20:53:15 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0619_gtd/</guid>
      <description>はじめてのGTD ストレスフリーの整理術を読みました。
 本書の内容について触れる前に、 まずは簡単にGTDをおさらいしたい。
  第1章 イントロダクション 第2章 GTD現象 第3章 すべてを機能させる 第4章 自己管理の基礎 第5章 状況のコントロール 収集 第6章 状況のコントロール 見極め 第7章 状況のコントロール 整理 第8章 状況のコントロール 見直し 第9章 状況のコントロール 取り組み/行動 第10章 状況のコントロール 人生と仕事に活用していく方法 第11章 将来への見通し 第12章 将来への見通し 次に取るべき行動 第13章 将来への見通し プロジェクト 第14章 将来への見通し 注意を向けるべき分野や責任を負っている分野 第15章 将来への見通し 目標とゴール 第16章 将来への見通し 構想 第17章 将来への見通し 目的/価値観 第18章 将来への見通し グレイシスガーデン再訪 第19章 GTDを総合で機に活用する 第20章 最後に   現在GTDは社会現象のように多くの人に利用されているが、 考案者であるデビットアレンはその要因を以下の3つのように考えている。
 誰にでも理解できる論理的なプロセスとして機能している 誰もが持っている日常的な道具を用いて、誰もが思い立ったときに気軽に導入できる GTDが解決しようとしている問題が世界的な規模で広がりつつある  解決しなければならない真の問題とは、意味が明らかになっていない物事が大量に押し寄せてきているというじょうきょうである。</description>
    </item>
    
    <item>
      <title>【読書】キャズム</title>
      <link>http://kotazi.github.io/blog/post/2016/0617_chasm/</link>
      <pubDate>Fri, 17 Jun 2016 13:04:27 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0617_chasm/</guid>
      <description>キャズムを読みました。
ジェフリー・ムーアが1991年に発表した本著は現在でもハイテクマーケティングのバイブルと言われている。 1962年にエベレット・ロジャーズ博士が提唱した「イノベータ理論」。そのベルカーブにキャズムが存在することを発見した。 なぜキャズムが存在するのか、どうやって乗り越えるのか、落ちた場合はどうするのか。それが書かれているのがこの本である。
  第一章 ハイテク・マーケティング 錯覚 第二章 ハイテク・マーケティング 悟り 第三章 Dデー 第四章 攻略地点の決定 第五章 部隊の集結 第六章 戦線の見定め 第七章 作戦の実行 終章 キャズムを越えて   序章で少し、マーケティングに対する誤解を持っていたことに気がつく。 今までマーケティングの業務は、マーケティングのできる人間のみがやるものだと思っていた。 本書の目的のひとつは、「キャズムを越える際のマーケティングにかかわる意思決定ロジックを明らかにすることである」と書いた後、以下のような文章が続く。
[引用] それが明確になれば、全社員がマーケティング・プロセスに参画できるようになる。人並み外れた才気よりも慎重さのほうが重要視されると言うのであれば、一人よりも多人数のほうがよい。マーケティングを企業の原動力とするのであれば(多くの企業がそうしようと考えている)、関係者全員がマーケティングの基本方針を知り得るような体制作りが望まれる。時折目にするケースだが、一部の限られた者だけがこのような情報を手にし得る体制にしてはならない。
■ 第一章 ハイテク・マーケティング 錯覚 テクノロジー・ライフサイクルとは、新たな製品が市場でどのように受け入れられていくかを理解するためのひとつのモデルである。
 イノベーター(革新者)(テクノロジー・マニア) アーリー・アダプター(先駆者)(ビジョナリー) アーリー・マジョリティ(現実的な購買者)(実利主義社) レイト・マジョリティ(追従者)(保守派) ラガード(無関心層)(懐疑派)  
有名な図。新製品が市場に投入されると、左のイノベーターから徐々にマジョリティ層へ広がっていく。
しかし、このベル・カーブの間にはキャズムと呼ばれる溝が存在する。それが下図である。
■ 第二章 ハイテク・マーケティング 悟り キャズムを乗り越えてメインストリーム市場のチャンスを逃さないためには最適なマーケティングを取らなければならない。
 今がテクノロジー・ライフサイクルのどの段階にあたるのか見極め、 その段階における顧客の購買心理をよく理解し、 その顧客層に合ったマーケティング戦術を展開すること  
本書におけるマーケティングの定義は「マーケットを作り出し、成長させ、維持し、外敵から守るための行動をとること」
また、マーケットは下記のように定義する。
 実存する製品やサービスに対して、 ニーズや欲求を抱えていて、 購買を決定する際に先行事例について知りたがる、 既存の、あるいは将来的に見込まれる顧客  
初期市場の構造 初期市場が形成されるためには3つの要素がかかせない。
 将来誰もが必要とするであろうアプリケーションを実現可能にする斬新なテクノロジー そのテクノロジーを評価して、それが現在市場に出回っているものよりも優れていることを検証するテクノロジー・マニア そのテクノロジーを使って現在の業務を飛躍的に進歩させようと考える、資金力のあるビジョナリー</description>
    </item>
    
    <item>
      <title>【git/bfg】間違えてプッシュしたパスワードファイルなどを履歴から完全に削除する</title>
      <link>http://kotazi.github.io/blog/post/2016/0616_git_bfg/</link>
      <pubDate>Thu, 16 Jun 2016 13:50:34 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0616_git_bfg/</guid>
      <description>AWS情報の書いてあるJSONファイルが間違えてコミットしてあったため、 その削除方法について調べてトライしました。
  Remove sensitive data  上記のリンクに方法が書いてある。
ざっくりまとめると2つの方法があって、
 BFG Repo-Cleanerを使う方法 コマンドを叩いて頑張る方法  の2つがある。どちらかと言えば1を推奨しているよう。
 BFGを使って削除する Scala製なのでJavaの実行環境が必要になる。
今回は.zprofileにalias bfg=&#39;java -jar /Applications/bfg-1.12.12.jar&#39;としてエイリアスを作成。
$ bfg --delete-files YOUR-FILE-WITH-SENSITIVE-DATA $ git commit -m &amp;quot;Remove sensitive data&amp;quot; $ git push --force origin master  みたいな感じにすればできる。
参考リンク  git filter-branch のかわりに BFG でファイルの履歴を消去する  コマンドを叩いて頑張る方法 意外とシンプルんできるから悪くない。でも長いから覚えるのは無理。
なんだかんだでBFG入れておいていい気がする。
$ git filter-branch -f --index-filter &#39;git rm --ignore-unmatch YOUR-FILE-WITH-SENSITIVE-DATA&#39; HEAD  参考リンク  gitで特定のファイルの履歴を消す方法|おし、プログラミング GitHub の commit 履歴からパスワードファイル等だけを消す方法   テーマとは関係ないけど、</description>
    </item>
    
    <item>
      <title>【Git】fork元の更新を追う</title>
      <link>http://kotazi.github.io/blog/post/2016/0614_git_fork/</link>
      <pubDate>Tue, 14 Jun 2016 11:31:27 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0614_git_fork/</guid>
      <description>Vuexを最近やっている。
Cloneしてきたリポジトリを触ったりするわけだけど、 元のリポジトリに変更があれば反映させたい。
その方法を調べました。
 まずはクローンしたブランチの状態を確認するとこのようになっている。
~/W/vuex git:master ❯❯❯ git br -a * master remotes/origin/0.3.0 remotes/origin/0.4.0 remotes/origin/HEAD -&amp;gt; origin/master remotes/origin/gh-pages remotes/origin/master remotes/origin/old  リモートにupstreamという名前で本家を追加する。
git remote add upstream git@github.com:vuejs/vuex.git  フェッチする。
git fetch upstream
そして再度ブランチの状態を確認すると、 本家を追従できていることがわかる。
~/W/vuex git:master ❯❯❯ git br -a * master remotes/origin/0.3.0 remotes/origin/0.4.0 remotes/origin/HEAD -&amp;gt; origin/master remotes/origin/gh-pages remotes/origin/master remotes/origin/old remotes/upstream/0.3.0 remotes/upstream/0.4.0 remotes/upstream/gh-pages remotes/upstream/master remotes/upstream/old   本家リポジトリの変更を反映するには  git fetch upstream git merge upstream/master  となる。</description>
    </item>
    
    <item>
      <title>【サンプルあり】Nightwatch.js覚書</title>
      <link>http://kotazi.github.io/blog/post/2016/0613_nightwatchjs/</link>
      <pubDate>Mon, 13 Jun 2016 17:17:08 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0613_nightwatchjs/</guid>
      <description>Nightwatch.jsについて簡単に学び、簡単にまとめました。
 概要 Nightwatchとは？  Selenium WebDriver APIを使い、Node.jsで書かれたWebアプリケーション/Webサイト用の自動テストフレームワーク 継続的インテグレーションを行うためのE2Eテスト自動化へのソリューション  Seleniumの概要  ブラウザ自動制御のための人気で包括できなツール。元々Javaだったが現在は多くの言語をサポート Nightwatchはブラウザ自動制御のためにSelenium WebDriver(特にWebDriver Wire Protocol)を使っている  オペレーションについて NightwatchはSeleniumサーバーに正しいパラメータを付与してHTTPリクエストを送ることで動作する。
RESTfulなAPIプロトコルはSelenium JsonWireProtocolに定義されている。
Nightwatchでは多くの場合、Seleniumサーバーに対して少なくとも2回のリクエストを送る必要がある。最初のリクエストではCSSセレクタで与えられた要素を見つけるためのものであり、次のリクエストでコマンドに対して与えられた要素を演算する。
サンプル(公式から) CSSセレクタを使うことで、簡単にE2Eテストを書ける。
module.exports = { &#39;Demo test Google&#39; : function (browser) { browser // URLを指定 .url(&#39;http://www.google.com&#39;) // bodyタグが表示されるまで1000ms待つ .waitForElementVisible(&#39;body&#39;, 1000) // input[type=text]に&amp;quot;nightwatch&amp;quot;とセット .setValue(&#39;input[type=text]&#39;, &#39;nightwatch&#39;) // button[name=btnG]が表示されるまで1000ms待つ .waitForElementVisible(&#39;button[name=btnG]&#39;, 1000) // button[name=btnG]ボタンをクリック .click(&#39;button[name=btnG]&#39;) // 1000ms待つ .pause(1000) // #mainタグがNight Watchを含んでいることを確認する .assert.containsText(&#39;#main&#39;, &#39;Night Watch&#39;) // 終了 .end(); } };  必要に応じて複数のステップに分割することも可能。</description>
    </item>
    
    <item>
      <title>【読書】バリュー・プロポジション・デザイン</title>
      <link>http://kotazi.github.io/blog/post/2016/0607_value_proposition_design/</link>
      <pubDate>Tue, 07 Jun 2016 20:49:30 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0607_value_proposition_design/</guid>
      <description>バリュー・プロポジション・デザイン 顧客が欲しがる製品やサービスを創るを読みました。
 いつ買ったのか分からなかったけれども、とりあえず読了。
「価値創造のパターン」を可視化することで利益の出るビジネスモデルをデザインする。
 Canvas Design Test Evolute  で構成される本書は、ビジネスモデルを描きそれをどのように実現に持っていくかを かわいいイラストとともに分かりやすく描いた本である。
流れが分かりやすいので、製品設計の工程がつかみやすい。</description>
    </item>
    
    <item>
      <title>【読書】言ってはいけない</title>
      <link>http://kotazi.github.io/blog/post/2016/0602_ittehaikenai/</link>
      <pubDate>Sun, 05 Jun 2016 13:09:32 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0602_ittehaikenai/</guid>
      <description>言ってはいけない 残酷すぎる真実 (新潮新書)を読みました。
 Ⅰ　努力は遺伝に勝てないのか １：遺伝にまつわる語られざるタブー ２：「頭がよくなる」とはどういうことか――知能のタブー ３：知識社会で勝ち抜く人、最貧困層に堕ちる人 ４：進化がもたらす、残酷なレイプは防げるか
５：反社会的人間はどのように生まれるか
Ⅱ　あまりに残酷な「美貌格差」 ６：「見た目」で人生は決まる――容貌のタブー
７：あまりに残酷な「美貌格差」
８：男女平等が妨げる「女性の幸福」について
９：結婚相手選びとセックスにおける残酷な真実
10：女性はなぜエクスタシーで叫ぶのか？
Ⅲ　子育てや教育は子どもの成長に関係ない 11：わたしはどのように「わたし」になるのか
12：親子の語られざる真実
13：「遺伝子と環境」が引き起こす残酷な真実
 &amp;ldquo;ひとは幸福になるために生きているけれど、幸福になるようにデザインされているわけではない。&amp;rdquo; をキーワードに、進化論、遺伝学、脳科学といった観点から世間に溢れるキレイ事を解き明かす。
遺伝や宗教、貧困や差別など様々なテーマに触れている本書であったが、 なかでも面白かった遺伝子と環境の子どものパーソナリティへの影響について書きたい。
アメリカの在野の心理学者ジュディス・リッチ・ハリスの提唱する集団社会化論。これは、「親の行動は、子どもが大人になったときに持つ心理特性に何の影響もしない」というものである。
つまり、子どものパーソナリティは遺伝的な適性と友だちと関係との相互作用の中でつくられる、というものだ。
 ハリスの集団社会化論では、子どもは友だちとの関係のなかで自分の性格(キャラ)を決めていく。どんな集団でも必ずリーダーや道化役がいるが、2人のリーダーが共存することはない。キャラがかぶれば、どちらかが譲るしかない。このようにして、まったく同じ遺伝子を持っていても、集団内でのキャラが異なればちがう性格が生まれ、異なる人生を歩むことになるのだ。
 以下は集団とアイデンティティについて。
 ヒトは社会的な動物で、集団から排除されれば一人で生きていけないのだから、アイデンティティというのは集団(共同体)への帰属意識のことだ。&amp;rdquo;わたし&amp;rdquo;は「奴ら」に対する「俺たち」一部で、「敵」を生み出すのはひとがひとであるための条件とも言える。
ヒトのオスが遠い祖先から受け継いだ遺伝子プログラムは、世界を内(俺たち)と外(奴ら)に分け、仲間内同士の結束を高め、奴らを殺して縄張りを奪うことなのだ。
 となると、親のしつけや英才教育はどうなるのか、親の役割はなんだんだろうということになるのだけれど、このように書かれている。
 「親は無力だ」というのは間違いだ。なぜなら、親が与える環境(友だち関係)が子どもの人生に決定的な影響を及ぼすのだから。
有名学校に入れたとしても、そこでどのような友だち関係を選び、どのような役割を演じるかに親が介入することはできない。子どもは無意識のうちに、自分の遺伝的な特性を最大限に活かして目立とうとするだろうが、それはたぶん偶然に左右されるのだ。もちろんこれは「子育ては無意味だ」ということではない。人生とは、もともとそういうものなのだから。
 何故人生についてまとめられたのかは分からなかったけれども、子どもの人格形成において学校でのキャラが大きな影響を及ぼすことは感覚的に理解することができたし、であるならば親として環境を用意する努力をしたいということも納得できた。
 さまざまなテーマに触れていて楽しく読むことができた。
ここに書かれていることが正しいとか間違っているではなく、たしかに「こういったことを大きく発言すると叩かれてしまいそうだな」と感じさせるものがあって、なんというか世論というものの存在を強く感じた。
テーマに対して、世論と同じような考えを持つこともあれば、違った考えを持つこともある。
そういうこととどうやって折り合いつけていけばいいんだろうかとも思ったり。</description>
    </item>
    
    <item>
      <title>【読書】いのちの輝き</title>
      <link>http://kotazi.github.io/blog/post/2016/0601_osteopathy/</link>
      <pubDate>Wed, 01 Jun 2016 13:09:32 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0601_osteopathy/</guid>
      <description>27冊目。
いのちの輝き―フルフォード博士が語る自然治癒力を読みました。
 Amazonのレビューがよかったので購入したけれども久しぶりに外したと思った。
この本はオステオパシーについて書かれた本である。 オステオパシーが何かというとアメリカ人医師アンドリュー・テイラー・スティル博士が1874年に発表した自然医学。
触診や整体といった感覚に近いのだろうか、けれども単なる医療療法ではなく哲学としての意味合いを持っている。
 体全体をひとつのユニットとして考える 身体の機能と構造は一体のものであると考える 自然治癒力を鼓舞することを主眼とする  などである。
例えで言えば、突然内臓の調子が悪くなって、どこの医者でも解決することができなかったけれども、 実は十数年前に自転車で転んだ際にできた怪我が原因で体の動かし方に癖が生じてしまっていたみたいな。
それをオステオパシーによって発見し、オステオパシーによって治すみたいな。
それ自体はそれでいいんだけれども、エピソード的な語りが多く、 データに基づいた根拠がほとんどなかったのであまり深入りすることができなかった。</description>
    </item>
    
    <item>
      <title>【読書】イノベーションのジレンマ</title>
      <link>http://kotazi.github.io/blog/post/2016/0524_innovation/</link>
      <pubDate>Tue, 31 May 2016 13:09:32 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0524_innovation/</guid>
      <description>イノベーションのジレンマ―技術革新が巨大企業を滅ぼすとき (Harvard business school press)を読みました。
ハーバード教授のクレイトン・クリステンセンが自信が1997年に提唱した「イノベーションのジレンマ」という企業経営の理論について書いたもの。
目次 第一部 優良企業が失敗する理由  第一章 なぜ優良企業が失敗知るのか&amp;ndash;ハードディスク業界に見るその理由&amp;ndash; 第二章 バリュー・ネットワークとイノベーションへの刺激 第三章 掘削機業界における破壊的イノベーション 第四章 登れるが、降りられない  第二部 破壊的イノベーションへの対応  第五章 破壊的技術はそれを求める顧客を持つ組織に任せる 第六章 組織の規模を市場の規模に合わせる 第七章 新しい成長市場を見いだす 第八章 組織のできること、できないことを評価する方法 第九章 供給される性能、市場の需要、製品のライフサイクル 第十章 破壊的イノベーションのマネジメント&amp;ndash;事例研究&amp;ndash; 第十一章 イノベーションのジレンマ&amp;ndash;まとめ&amp;ndash;   本書にあるのは、業界をリードしていた企業がある種の市場や技術の変化に直面したとき、 図らずともその地位を守ることに失敗する話である。
とりあげる企業は&amp;rdquo;優良企業&amp;rdquo;であり、多くの弱点を抱えた企業ではなく、 多くの経営者が尊敬し、革新と実行力をもった企業がそれでもなお市場での優位性を失うことについてだ。
失敗の理論は3つの発見によって構築された。
1. 「持続的」技術と「破壊的」技術の間には先着邸に重要な違いがある
2. 技術の進歩のペースは市場の需要が変化するペースを上回る可能性がある。
3. 成功している企業の顧客構造と財務構造はある種の新規参入企業と比較して、その企業がどのような投資を魅力的と考えるかに重大な影響を与える
第一部ではディスクドライブや掘削機業界に起こったイノベーションを研究し、第二部では破壊的イノベーションに対してどのように対応していくかについて述べられている。
分析のッッか、最も重要な点は劣悪な経営が根本的原因ではないことが分かった。失敗したのは破壊的技術に直面した時だけである。つまり、破壊的イノベーションに直面した時に、優秀な経営者は判断を誤ってしまう。
破壊的技術に敗れた企業が目を向けなかった原則を引用する。
 資源の依存。優良企業の資源分配のパターンは、実質的に、顧客が支配している
 小規模な市場は、大企業の成長需要を解決しない。
 破壊的技術の最終的な用途は事前には分からない。
 組織の能力は、組織内で働く人材の能力とは関係ない。組織の能力は、そのプロセスと価値基準にある。現在の事業モデルの核となる能力を生み出すプロセスと価値基準が、実は破壊的技術に直面した時に、無能力の決定的要因になる。
 技術の供給は市場の需要と一致しないことがある。確立された市場では魅力の無い破壊的技術の得料が、新しい市場では大きな価値を生むことがある。  では成功した経営者はこの原則をどのように役立てたか。
 破壊的技術を開発し、商品化するプロジェクトを、それを必要とする顧客を持つ組織に組み込んだ。経営者が破壊的イノベーションを「適切な」顧客に結びつけると、顧客の需要により、イノベーションに必要な資源があつまる可能性が高くなる。
 破壊的技術を開発するプロジェクトを、小さな機会や小さな勝利にも前向きになれる小さな組織に任せた。
 破壊的技術の市場を探る過程で、失敗を早い段階にわずかな犠牲でとどめるよう計画を立てた。市場は、試行錯誤の繰り返しの中で形成されていくものであると知っていた。</description>
    </item>
    
    <item>
      <title>【Xcode】デバッグスキル向上のために</title>
      <link>http://kotazi.github.io/blog/post/2016/0520_xcode_debug/</link>
      <pubDate>Fri, 20 May 2016 11:30:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0520_xcode_debug/</guid>
      <description>最近iOSプログラミングを始めた。
まずはデバッグスキルを高めようということでまとめました。
  Xcodeの概要: デバッガを使う  基本的なパネルの使い方や名前。
 Xcodeでのデバッグ方法 | Cyber Passion for iOS  Xcodeを使った基本的なデバッグ方法がまとまっている。初心者向き。
 知っておくと便利なXcodeのブレークポイントデバッグ術
 初級者から中級者にレベルアップするためのXcodeデバッグ術
 XcodeのBreakPointで式の評価値を確認してデバッグに革命を起こす！
 Xcode,プロジェクト設定これだけはしておくといいかも(初心者向けかも)
  </description>
    </item>
    
    <item>
      <title>【福利厚生】各企業の◯◯休暇まとめてみた</title>
      <link>http://kotazi.github.io/blog/post/2016/0509_holiday/</link>
      <pubDate>Mon, 09 May 2016 23:22:25 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0509_holiday/</guid>
      <description>最近自社で採用活動の強化にあたり、福利厚生の充実を試みている。
キャッシュアウトなく導入可能な「◯◯休暇」系を導入している企業とその例をまとめてみた。
 ■ サイバーエージェント  福利厚生 | 株式会社サイバーエージェント   社員ひとりひとりが、自ら挑戦する機会、自らキャリアを選択する機会を持つことができる、サイバーエージェントならではの諸制度で社員の成長をサポートしています。
 エフ休
 女性特有の体調不良の際に、月1回取得できる特別休暇。今後、通常の有給休暇も含め、女性社員が取得する休暇の呼び方を「エフ休」とすることで、利用用途がわからないようにし、取得理由の言いづらさ、取得しづらさを排除します。（エフ＝FemaleのFを指します）
 妊活休暇
 不妊治療中の女性社員が、治療のための通院等を目的に、月1回まで取得可能な特別休暇。急な通院や体調等に考慮し、当日取得が可。本休暇取得の際には「エフ休」という言葉を使用することで、周囲に知られず取得が可能。
 キッズデイ休暇
 子どもの入園・入学式や親子遠足、参観日といった学校行事や記念日に取得できる特別休暇。年に半日休暇2回の取得が可能。
 休んでファイブ
 リフレッシュ特別休暇制度です。心身のリフレッシュ、そしてさらなるチャレンジを目的に、入社3年目以上の正社員が毎年5日間の特別休暇を取得できます。
 ■ DeNA  福利厚生・制度 | 株式会社ディー・エヌ・エー【DeNA】  介護休暇
 要介護状態にある家族の介護をするため、年次有給休暇とは別に、当該対象家族が1人の場合は1年間につき5日間、2人以上の場合は1年間につき10日間を限度として休暇を取得することができます。
 ベビーケア休暇
 配偶者が出産した際、年次有給休暇とは別に、出産予定日または出産日前後に5日間の有給休暇を取得することができます。
 積立休暇
 育児・介護・私傷病等のライフイベントに安心して臨める仕組みとして、未消化の有給休暇のうち、失効する有給休暇を1日単位で毎年10日を上限に(最大 60日)積立て、用途を限り利用することができます。
 1Week Off
 リフレッシュを目的に、年に1回は1週間の休暇を取得する事を推奨し、全社の取り組みとして有給休暇の取得促進を行っています。
 ■ カヤック  制度・行事｜面白法人カヤック  誕生武休暇
 自分が生まれたことに「ありがとう」
自分の生まれた月に1日の休暇を取得することができます。 自分が生まれたことに感謝して過ごしましょう！
 ■ ソフトバンク  福利厚生 | ソフトバンク新卒採用   社員の幸せってなんだろう？ 企業が社員にできることを今後も問い続けます。</description>
    </item>
    
    <item>
      <title>【読書】隠れた人材価値 </title>
      <link>http://kotazi.github.io/blog/post/2016/0508_human/</link>
      <pubDate>Sun, 08 May 2016 11:40:44 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0508_human/</guid>
      <description>隠れた人材価値 (Harvard Business School Press)を読んだ。
 How Google Works (ハウ・グーグル・ワークス) ―私たちの働き方とマネジメントを読んだ時に採用の大切さを改めて感じた。
 【読書】How Google Works · kotazi.com  
スマートクリエイティブやラーニングアニマルのように優秀で主体性を持って行動できる人間は素晴らしい。たった一人の人材が組織に大きな影響を与えることが可能な時代だからこそ、採用には真剣に取り組み決して妥協することなく最高の仲間を採用するといった考え方は個人的に好きだ。
けれども、実際に小さなベンチャー企業をやっていると採用は想像以上に難しい。採用以前に面接に来てもらうことでさえなかなかできない。 言い訳をするわけではなく、違った角度からの考え方も取り入れてみたいと想い、「隠れた人材価値」を読んだ。
この本は、「社員の内に秘めた価値をどうすれば引き出すことができるだろうか」という本だ。
 目次  第一章 人材VS組織 第二章 サウスウエスト航空 第三章 シスコシステムズ 第四章 メンズ・ウェアハウス 第五章 SASインスティテュート 第六章 PSSワールドメディカル 第七章 AES 第八章 ニュー・ユナイテッド・モーター・マニュファクチャリング・インク 第九章 サイプレス・セミコンダクター 第十章 すべての社員の持てる真価を存分に引き出す   2002年に出版された時代に、人材を大切にしながら優れた成果を挙げている8社を研究し、成功の秘密に迫る。 各企業は社員を大切にし、社員の意欲を掻き立てるためにさまざまな取組をしている。それは、 会社のミッションを明確にし、組織に浸透させるための仕組みだったり、一人一人に自分の正しいを思うアクションをとれるような仕組みだったり、あるいはストックオプションや福利厚生の充実であったり。
各々の企業の価値観や文化にあった施策を通して、社員が十分に力を発揮できる環境を作り、組織として大きな成果をあげる。
本書の内容は一文でまとめるならば、「人が一番の宝、企業は人なり」である。
「社員の内に秘められている真価をどれだけ引き出すことができるかによって、会社の運命が決まる」ということが書かれており、特に目新しいことは何も書かれていない。
当たり前のことだ。けれども、その当たり前のことをどれだけの企業が実践し、社員の持つ潜在的な力を十分に引き出しているかというとできていないように想像することができる。
企業の価値観が社員の能力を引き出すためのカギであることは事実だが、価値観だけ、言葉だけでは不十分である。 その価値観をどのように現実のものにしてていくかという意味で、企業のトップが価値観を信奉し、終始一貫実践していくことと、会社の価値観と、価値観を体現する経営慣行に一貫性を持たせることを挙げている。
成功の源泉となる整合性を持たすべき6つの経営慣行を紹介する。
強烈な個性の企業文化 価値観は、何が適切な姿勢・行動であるかを判定する規範の基礎であり、協力な社会的制御システムである。 そしてこの社会的制御システムこそが企業文化の本質となる。
適材の雇用 価値観や文化が明確になると、人材を選考するための効果的な手順が組み立てられる。 この手順によって適材を確保し、価値観を共有しない人間を排除する。
長い間、本当に会社に貢献するためには、その会社で居心地よくなくてはいけないという認識に立つ。 そういう企業において重要なのは、その人間が成長し、変化し、めまぐるしくかわるビジネスの努力目標に対応して成長することができる能力である。進んで学び、新しいことを試すこと、チームの一員たること、責任を担うことなども求められる。
社員への投資 企業文化と価値観に適合する社員を選考したら、社員中心の企業では、次に会社の将来にとって一人一人の社員がどれほど重要かを伝える明確なシグナルを社員に向けて発する。 社員に対して能力向上とキャリア開発のための継続的な投資をする。投資には、一人一人の社員がかけがえのない人材であり、会社は一人一人の社員と長期的な関係を維持していくというメッセージを込める。</description>
    </item>
    
    <item>
      <title>【git】タグを間違えてしまった</title>
      <link>http://kotazi.github.io/blog/post/2016/0504_gittag/</link>
      <pubDate>Wed, 04 May 2016 11:45:41 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0504_gittag/</guid>
      <description>gitのタグを修正することがあったのでメモ書き。
注釈を間違えてしまったのでやりなおす方法。
  ローカルのタグを削除  git tag -d TAG_NAME   リモートのタグを削除(空のタグで上書き)  git push origin :refs/tags/TAG_NAME   新しくタグをつける(注釈付き)  git tag TAG_NAME   リモートのプッシュ  git push --tags origin   意外とすんなり。</description>
    </item>
    
    <item>
      <title>【DMM英会話】 Presentation | Business Basic</title>
      <link>http://kotazi.github.io/blog/post/2016/0503_dmm/</link>
      <pubDate>Tue, 03 May 2016 00:46:15 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0503_dmm/</guid>
      <description>DMM英会話のレッスン中。その日学んだことをメモ。
 Lesson 09: Presentation | Business Basic   ◯ 覚えた英単語    単語 意味 その他     attending 出席    furniture 家具    attractive 魅力的な    neutral 中立の    extraordinary 非凡な    well-thought-out 丹念に考案された    statistics 統計    Last but not least 「最後にはなりましたが重要な」    memorable 覚えやすい special, good or unusual and therefore worth remembering or easy to remember    ◯ 例文  The matter is outside my sphere of responsibility.</description>
    </item>
    
    <item>
      <title>【読書】Yコンビネーター </title>
      <link>http://kotazi.github.io/blog/post/2016/0502_ycon/</link>
      <pubDate>Mon, 02 May 2016 11:40:44 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0502_ycon/</guid>
      <description>24冊目。
Yコンビネーター シリコンバレー最強のスタートアップ養成スクールを読みました。
 Yコンビネータは、主にスターアップ投資を行うベンチャーキャピタルである。「ハッカーと画家」の著者としても有名なポール・グレアムを中心に運営されている。
Yコンビネータの特徴は2万ドル前後の少額出資を行う点だ。3ヶ月間収集的に指導して他のベンチャーキャピタルから投資を得られる状態まで育て上げる。 Yコンビネータが出資した後に有名企業になったものでは、Dropbox、Heroku、Airbnb、日本人起業家からは福山さんのAnyparkなどがある。
本著はそんなYコンビネーターに3ヶ月間密着したノンフィクションである。
  第1章 面接 第2章 YCパートナー 第3章 シリコンバレーに来い 第4章 女性起業家はなぜ少ない 第5章 クレージーだがまとも 第6章 アイディアに行き詰まる 第7章 新しいものを作り続けろ 第8章 エンジェル投資家 第9章 契約は必ず成立させろ 第10章 営業マン探しは難しい 第11章 プロトタイプ発表 第12章 ハッカソン 第13章 ピポットの決断 第14章 リスクと変曲点 第15章 共同創業者がすべて 第16章 残りあとわずか2週間 第17章 最終リハーサル 第18章 離陸準備完了 第19章 デモ・デー 第20章 最後の夕食会 第21章 ソフトウェアが世界を食う   「ゴールドラッシュではツルハシを売れ」
「きみたちがプロダクトの開発以外のことに気を散らすならそれは時間を無駄にしているのだ」
「ソフトウェア・スタートアップの世界では創業者はエンジニアとそれ以外に二分される。エンジニアとはコードを書く人間で、コードを書かない人間はそれ以外だ。」
「誰かが自分のためにスタートアップを作ってくれるとしたらどんなのがいいか自問してみる。」
「枠にとらわれず考え、自分の行動と結果に責任を持っていきること、そして自分の力で実社会を生き抜くこと」
「Yコンビネーターを始めたとき、ポール・グレアムはひとつだけルールを定めた。創業者がひとりだけのスタートアップには出資しない。」
「どうせ私は死ぬまでうまくいかない点を直し続けることになるんだろうが」
「まとめるとこういうことになる。まず、少々気後れがしても、どんどん人と会って友だちをたくさん作る。第二に、共同創業者をハグする。学期の仲間を愛する。第三に、エキスパートが自分に代わって問題を解決してくれるなど信じない。第四に、強いオーラを放てるようにしなければならない。」
面接で投資家に聞かれる質問  新しいユーザーがこのプロダクトを使ってみようと思う理由は？ 一番怖いと思うライバルは？ きみたちがチームとして集まった理由は？ ボスは誰？ これまでで一番自慢になるきみの業績は？ きみの今までの最大の失敗は？ 既存のプロダクトとの違いを正確に言うと？ プロダクトがどういう仕組なのか、もっと詳しく説明すると？ ユーザーが使うのをためらう理由は？ このプロダクトは次にどう発展させていきたい？ 新しいユーザーはどこから来る？ 6ヶ月後に直面しているであろう一番大きな問題は？ 今までほかの人がこれらをやらなかった理由は？ ユーザーからの希望で一番多いものは？ コンバージョン率は？   Yコンビネーターについて知ることができたので本当に読んでよかった一冊だった。 また、投資家は真剣だと、今ままで持っていたイメージと少し変わり感じるようになった。</description>
    </item>
    
    <item>
      <title>【読書】孫子</title>
      <link>http://kotazi.github.io/blog/post/2016/0501_koushi/</link>
      <pubDate>Sun, 01 May 2016 11:40:44 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0501_koushi/</guid>
      <description>23冊目。
新訂 孫子 (岩波文庫)を読みました。
  計篇 - 序論。戦争を決断する以前に考慮すべき事柄について述べる。 作戦篇 - 戦争準備計画について述べる。 謀攻篇 - 実際の戦闘に拠らずして、勝利を収める方法について述べる。 形篇 - 攻撃と守備それぞれの態勢について述べる。 勢篇 - 上述の態勢から生じる軍勢の勢いについて述べる。 虚実篇 - 戦争においていかに主導性を発揮するかについて述べる。 軍争篇 - 敵軍の機先を如何に制するかについて述べる。 九変篇 - 戦局の変化に臨機応変に対応するための9つの手立てについて述べる。 行軍篇 - 軍を進める上での注意事項について述べる。 地形篇 - 地形によって戦術を変更することを説く。 九地篇 - 9種類の地勢について説明し、それに応じた戦術を説く。 火攻篇 - 火攻め戦術について述べる。 用間篇 - 「間」とは間諜を指す。すなわちスパイ。敵情偵察の重要性を説く。  (Wikipedia引用: 孫子 (書物))
孫子は上記の全十三篇によって構成されている。
孫子は中国春秋時代の思想家、孫武の作とされる兵法書であり、兵法書の中では最も著名なもののひとつである。
当時、孫子の成立以前は戦争の勝敗は天運に左右されるという考えが強かった中、孫武は戦争の記録を分析・研究し、勝敗は運ではなく人為的によることを知り、勝利を得るための指針の理論化を目指した。
原文、漢文、訳文の順番で書かれているので比較的気楽に読み進めることができた。
戦争をする前に考えるべき5つのこと
 道: 政治のあり方 天: 自然界のめぐり 地: 土地の情勢 将: 将軍の人材 法: 軍制  勝利を知るための5つの方法
 戦ってよいときと戦ってはいけないときをわきまえること 大軍と小勢とのそれぞれの用い方を知っていること 上下の人びとが心を合わせていること よく準備を整えて、油断している敵に当たること 将軍が有能で主君がそれに干渉しないこと   特別感名を受けることはなかったけれど、想像以上にかなり薄い本なので読んでみるのはいいかも。</description>
    </item>
    
    <item>
      <title>【学習計画】iOS/Swift2を習得しよう</title>
      <link>http://kotazi.github.io/blog/post/2016/0419_ios/</link>
      <pubDate>Tue, 19 Apr 2016 19:51:45 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0419_ios/</guid>
      <description>急遽iOS/Swift2のアプリ開発をさせていただけることになった。
5末までにそれなりに作れるようになりたいので学習計画を立てました。
 Step1: Books モチベーションを維持しやすいので本で勉強することは好きです。 とりあえず3冊買いました。
 Swiftではじめる iPhoneアプリ開発の教科書 【iOS 8&amp;amp;Xcode 6対応】  流して読んでさっと理解する。Swiftの基本文法から標準ライブラリの使い方。
その他ライブラリの紹介からデザインパターンの紹介などまでカバー。
 iOSプログラミング入門[iOS8.1 / Xcode6.1 / Swift対応]　Swift + Xcodeで学ぶ、iOSアプリ開発の基礎  簡単なサンプルが沢山入っている。
ひたすら手を動かして慣らす。
 詳解 Swift 改訂版  Kindle対応していてすごくいい。移動中にひたすら読む。気になった箇所はどんどんマーカーを引く。
Step2: Documents  Swift Programming Language  Appleから公式ドキュメント。
 日本語ドキュメント|Apple  iOS View Controller プログラミングガイド、iOS ヒューマンインターフェイスガイドライン、iOSアプリケーション プログラミングガイドあたりは早めに目を通してもいいかも。量がおおい。
 プログラミング言語 Swift|Hatena-Textbook SwiftでのiOSアプリ開発|Hatena-Textbook  はてなの研修資料。充実している。
Step3: 情報のキャッチアップ  Trending in open source  Githubのトレンドレポジトリ。
 iOS Developer Library  こちらも公式のものだけれど、更新頻度が多い。</description>
    </item>
    
    <item>
      <title>【読書】HARD THINGS</title>
      <link>http://kotazi.github.io/blog/post/2016/0416_hard/</link>
      <pubDate>Sat, 16 Apr 2016 11:40:44 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0416_hard/</guid>
      <description>22冊目。
HARD THINGSを読みました。
  第1章 妻のフェリシア、パートナーのマーク・アンドリーセンと出会う 第2章 生き残ってやる 第3章 直感を信じる 第4章 物事がうまくいかなくなるとき 第5章 人、製品、利益を大切にするーこの順番で 第6章 事業継続に必須な要素 第7章 やるべきことに全力で集中する 第8章 起業家のための第一法則ー困難な問題を解決する法則はない 第9章 わが人生の始まりの終わり   シリコンバレー最強のベンチャーキャピタルリストの一人、ベンホロウィッツの著書。 彼の起業家人生の困難についてありのままに書かれている。「答えがない難問と困難にきみはどう立ち向かうか」が本著のテーマである。
若いころは転職に失敗したり、二人目の子どもが自閉症を抱えていたりするなか、1999年にラウドクラウドを設立する。ベンホロウィッツは1966年生まれであるから、33歳の時だろう。2001年にIPOを行うものの、史上もっとも祝福されないIPOだったかもしれないと語っている。
「苦闘とは」という文章が面白かったので引用する。
苦闘とは、そもそもなぜ会社を始めたのだろうとおもうこと。苦闘とは、あなたはなぜ辞めないのかと聞かれ、その答えを自分もわからないこと。苦闘とは、社員があなたはウソをついていると思い、あなたも彼らがたぶん正しいと思うこと。
苦闘とは、料理の味がわからなくなること。苦闘とは、自分自身がCEOであるべきだと思えないこと。苦闘とは、自分の脳力を超えた状況だとわかっていながら、代わりが誰も居ないこと。苦闘とは、全員があなたをろくでなしだと思っているのに、誰もあなたをクビにしないこと。苦闘とは、自信喪失が自己権をに変わること。苦闘とは、苦しい話ばかり聞こえて、会話していても相手の声が聞こえないこと。苦闘とは、痛みが消えてほしいと思うとき。苦闘とは、不幸である。苦闘とは、気晴らしのために休暇を取って、前より落ち込んでしまうこと。苦闘とは、多くの人たちに囲まれていながら孤独なこと。苦闘とは無慈悲である。
苦闘とは、破られた約束と壊れかけた夢がいっぱいの地。苦闘とは冷汗である。苦闘とは、はらわたが煮えくり返りすぎて血を吐きそうになること。苦闘は失敗ではないが、失敗を起こさせる。特にあなたが弱っている時にはそうだ。弱っているときには必ず。
ほとんどの人は、そこまで強くない。
スティーブ・ジョブズからマーク・ザッカーバーグまで、どんな偉大な起業家も苦闘に取り組み、困難を乗り越えてきた。だからあなたはひとりではない。
しかし、ひとりでないからといって、あなたが成功するという意味ではない。うまく行かないかもしれない。だからこそ、苦闘なのだ。苦闘は、偉大さが生まれる場所である。
 そして苦闘についてこのようなことも書いている。
苦闘を愛せ。
今、私は日々起業家と接しているが、一番伝えたいのはこの教えだ。自分の独特の正確を愛せ。生い立ちを愛せ。直感を愛せ。成功の鍵はそこにしかない。 私は彼らに前途に待ち受ける困難さを伝えることはできるが、困難に直面したときに何をすべきかは、彼が自ら判断する以外にない。私にできるのは、それを見出すための手助けだけだ。私はCEOでいる間、一度も心の平和を得られなかったが、運が良ければ時にはそれも得られるだろう。
しかし、世界中の助言と後知恵を集めても困難な物事は困難なままだ。最後に私は、困難に立ち向かうすべての人々に「幸多かれ、夢の実現あれ」という言葉を贈りたい。
 苦闘の部分だけ引用したけれども、実践的な経営に関するアドバイスも書かれていてとてもためになる本だった。</description>
    </item>
    
    <item>
      <title>【DMM英会話】 Meeting | Business Basic</title>
      <link>http://kotazi.github.io/blog/post/2016/0412_dmm/</link>
      <pubDate>Tue, 12 Apr 2016 00:46:15 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0412_dmm/</guid>
      <description>DMM英会話のレッスン中。その日学んだことをメモ。
 Lesson 08: Discussion | Business Basic   ◯ Practice 1 | Formal and Informal Expressions 割愛。

◯ Practice 2 | Reading Sentences 割愛。

◯ Practice 3 | Studying the Manual  A presented purpose of the meeting. Good timing (Before the meeting decide how much time are you planning to talk; it should be neither too short nor too long) feel that you are paying attention to his ideas.</description>
    </item>
    
    <item>
      <title>【訳読】2.2 Reducers|Redux</title>
      <link>http://kotazi.github.io/blog/post/2016/0329_redux_reducers/</link>
      <pubDate>Tue, 29 Mar 2016 18:55:03 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0329_redux_reducers/</guid>
      <description>2.2 Reducers|Redux
Actionは何かが起こったという事実は述べるが、アプリケーションのStateがどのように変わったかということまで細かくは言わない。 それはReducerの仕事だ。
 Designing the State Shape Reduxではアプリケーションの全てのステートはシングルオブジェクトとして保たれる。
ToDoアプリでは2つのことをストアしたい。
 現在選択されているフィルター 実際のToDoリスト  UI State同様に、ストアしたいデータが見つかると思う。 それは良いことだけれど、UI Stateからデータは分離するようにすること。
// これがState(ステート）!! { visibilityFilter: &#39;SHOW_ALL&#39;, todos: [ { text: &#39;Consider using Redux&#39;, completed: true, }, { text: &#39;Keep all state in a single tree&#39;, completed: false } ] }  Handling Actions Stateオブジェクトの形が決まったので、Reducerを準備していく。 Reducerは前のStateとActionを引数に取り、次のステートを返すピュア関数だ。
(previousState, action) =&amp;gt; newState  Array.prototype.reduce関数のようだからReducerと呼ばれる。
Reducerの中で決してしてはならないことが下記だ。
 引数を変えること APIを呼び出したり、ルーティングを変更すること Date.now()やMath.random()といったピュアでない関数を呼ぶこと  とりあえずReducerはピュアであることを覚えておこう。 ただ計算するだけであり、同じ引数を与えれば同じ次の結果を返す。
最初のStateを決めるところから始めよう。最初はundefinedのStateでReducerを呼ぶ。 そうして最初のステートを取得する。</description>
    </item>
    
    <item>
      <title>【訳読】2.1 Actions|Redux</title>
      <link>http://kotazi.github.io/blog/post/2016/0328_redux_actions/</link>
      <pubDate>Mon, 28 Mar 2016 18:34:45 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0328_redux_actions/</guid>
      <description>2.1 Actions|Redux
 Actions Actionはアプリケーションからの情報をStoreへ渡す。 store.dispatch()を使ってActionをStoreへ送信する。
ToDoアイテムのアクションサンプル:
const ADD_TODO = &#39;ADD_TODO&#39;  { type: ADD_TODO, text: &#39;Build my first Redux app&#39; }  ActionはプレーンなJavaScriptオブジェクトである。typeプロパティを必ず持ち、Actionの種類を示す。 Typeは文字列の定数として定義されるべきであり、アプリケーションが肥大化した際はモジュールに分割することができる。
import { ADD_TODO, REMOVE_TODO } from &#39;../actionTypes&#39;  type以外のActionオブジェクトの構造はあなた次第だ。興味があればFlux Standard Actionを見ること。
ユニークなIDを付けることはいいかも。
{ type: COMPLETE_TODO, index: 5 }  Action Creators Action creators はActionを生成する関数である。 &amp;ldquo;Action&amp;rdquo;と&amp;rdquo;Action Creator&amp;rdquo;をまとめるのは簡単なのでそのほうがいいかも。
典型的なFluxの実装では、こんな感じでAction CreatorはDispachのトリガーとなる。
function addTodoWithDispatch(text) { const action = { type: ADD_TODO, text } dispatch(action) }  それに対しReduxでは、Action Creatorは単純にActionを返すだけ。</description>
    </item>
    
    <item>
      <title>【読書】「正義」は決められるのか？</title>
      <link>http://kotazi.github.io/blog/post/2016/0324_seigi/</link>
      <pubDate>Fri, 25 Mar 2016 11:40:44 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0324_seigi/</guid>
      <description>21冊目。
「正義」は決められるのか?を読みました。
  トロッコ問題 功利主義 アナロジー  要点はこの3つ。
アナロジーの話が特に面白かった。 有名なトロッコ問題というのは、 トロッコが暴走していてこのままだと先にいる5人を轢き殺してしまう。
あなたはスイッチでトロッコの進行方向を切り替えることができるが、 そうすると、その先にいる1人の人間を轢き殺してしまう。
スイッチを切り替えるか？
これを多くの人間に質問するとスイッチを切り替えるという人は多数派になるらしい。
こういう考え方を功利主義といって、「最大多数の最大幸福」を基本原理とした論理思想。
そういう人たちに例えばこういう質問を返す。 死にそうな人が5人いるけれど、別の一人から血清を作れば助けることができる。そうするとその一人は死んでしまうのだけれど、 オペをするべきか。みたいな。
そうするとYesの数が大きく減るらしい。
なんでか。ということになるのだけれど、
こういう時にアナロジーという言葉が出てくる。
類推。
似ていれば分かりやすい説明になっていいんだけど、説得力だけを持ってしまって似ていないこともあるから それは気をつけないといけない。</description>
    </item>
    
    <item>
      <title>【読書】Zero to One</title>
      <link>http://kotazi.github.io/blog/post/2016/0323_zero_to_one/</link>
      <pubDate>Wed, 23 Mar 2016 11:40:44 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0323_zero_to_one/</guid>
      <description>20冊目。
ゼロ・トゥ・ワン―君はゼロから何を生み出せるかを読みました。
 ペイパルマフィアの一人、ピーター・ティールの著書。
「我々は空飛ぶ自動車を欲したのに、代わりに手にしたのは百四十文字だ。」 とTwitterを揶揄しているのは有名。
ティールは今流行の「リーン・スタートアップ」とは真逆の考え方を示す。 リーン・スタートアップでは事業計画はあまりせずに、改善をすることを大事にしているが、 ティールはそうしたスタートアップは結局のところ成功しにくいと考える。
 1. 僕たちは未来を創ることができるか 2. 一九九九年のお祭り騒ぎ 3. 幸福な企業はみなそれぞれに違う 4. イデオロギーとしての競争 5. 終盤を制する 6. 人生は宝くじじゃない 7. カネの流れを追え 8. 隠れた真実 9. ティールの法則 10. マフィアの力学 11. それを作れば、みんあやってくる？ 12. 人間と機会 13. エネルギー20 14. 創業者のパラドックス  「２１世紀をこれまでより平和な繁栄の時代にしてくれる新たなテクノロジーを思い描き、それを創り出すことが、今の僕らに与えられた挑戦なのだ。」
という一文が心に残った。
進歩には2種類があるといい。水平進捗と垂直進捗と述べた。 水平的進捗とは1台のタイプライターから100台作ること、成功のコピーと言い、 垂直的進歩はタイプライターからワープロを生み出すことだと言った。
日本の多くのベンチャー企業やそこで働く人たちも、大きなことを述べているようで 水平進捗しか想像できていないということはあるなあと思ったし、 そういう部分を真っ向から否定するティールの視点の高さに少し痺れた。
他にも独占市場を築くことを進めていて、そのためにはどんなスタートアップも非常に小さな市場から始めるべきだといったり、 ニッチ市場を創造し支配したら、次は関連する少し大きな市場に徐々に拡大してゆくべきだと。
企業は創業者の想像以上の会社にはならないというけれど、 始める時に視点を高く持つのは大事だと感じた。
あと面白かったのは、 日本だとよく大企業かベンチャーか、とかで意識の高さとか派閥があったりするけど、ティールは
 あいまいな楽観主義者 あいまいな悲観主義者 明確な楽観主義者 明確な悲観主義者  に人の考えたを分類していて、あいまいな楽観主義者のことをかなりボロクソに言っていた。
現状に満足して大して何も考えていないのに、この先もよくなっていくんだろうとか考えているからみたい。
ひたすら視点の高い本だった。</description>
    </item>
    
    <item>
      <title>【読書】考える練習をしよう</title>
      <link>http://kotazi.github.io/blog/post/2016/0325_think_practice/</link>
      <pubDate>Wed, 23 Mar 2016 11:40:44 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0325_think_practice/</guid>
      <description>22冊目。
考える練習をしよう (子どものためのライフ・スタイル)を読みました。
 目次  自己流で考えちゃダメだ
 問題にぶつかったらどうするか 頭にだって屈伸運動が必要だ  上記の3章をテーマに、かわいいイラストと簡単な思考クイズと共に、考え方について書かれている。 小学生でも楽しめそうな本。
各項は数分で読める程度の内容になっているけれど、 そこからある程度、基本的な考え方について感じ取ることができる。
小さい子供に、考え方のパターンや思考のプロセスについて教える時に参考になりそうな良書だった。
 自分のことならよく知っているってホント？ いつも見ているものをちゃんと見ること せまい見方ってどういうことだろう？ いいセンスを持たなくちゃね ぶらぶら歩くことも大事だ なんだか分かる？ むすびつかないものをむすびつけてみる 知ってるつもりで知らない人たち ものの見かたは1つきりじゃない 何が問題なのかはっきりさせること 思いつきだけじゃダメだ どんな考えも書き出してみること 理屈は1つってかぎらないんだ 最後から考えてみる 質問することはかっこいいんだ 心を自由に遊ばせよう べつの人になったつもりで考えてみよう  などなど。
こういうことはなんだか知っている感じがするし、 実際に本を開いて読んでみると特に目新しいことが書いてあるわけじゃない。
でも実際に自分が子どもにこういう話を教えられるかというとまた別で、 そういう気持ちで読んでみると「なるほど！」ということがたくさん書いてある。</description>
    </item>
    
    <item>
      <title>【読書】ノヤン先生のマーケティング学</title>
      <link>http://kotazi.github.io/blog/post/2016/0310_marketing/</link>
      <pubDate>Tue, 22 Mar 2016 11:40:44 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0310_marketing/</guid>
      <description>19冊目。
ノヤン先生のマーケティング学を読みました。
 20年以上もマーケティングの研究を続けてきたノヤン先生。
マーケティングの歴史からフレームワーク、実践的な話などを網羅。
マーケティングの基礎理論を学ぶうえで最高の一冊。
 目次  第1章 マーケティングを想像した巨匠たち 第2章 マーケティングのフレームワークとセオリー 第3章 顧客や製品、市場を評価するフレームワーク 第4章 マーケティングのチャネルとツール 第5章 マーケティングの組織とキャリア 第6章 マーケティングの学び方と新しい潮流   第1章 マーケティングを想像した巨匠たち マーケティングの巨匠 セオドア・レビット 1925年、ドイツ生まれ。
1960年に「マーケティング近視眼」を発表し、経営におけるマーケティングの重要性を説いた。
1983年の「After the Sales is Over」では、契約や八周書は顧客との長い関係の始まりであり、 その後の顧客とのリレーションが起業の明暗を分けるとして、&amp;rdquo;企業の最も大切な資産は顧客リレーションである&amp;rdquo;とも説いた。
1968年に出版された「マーケティング発想法」の中の&amp;rdquo;ドリルを買う人が欲しいのは「穴」である&amp;rdquo;という言葉も有名。顧客の解決したい課題を正しく理解して、ようやく本当に必要なドリルのスペックが見えてくる。
◯ フィリップ・コトラー 1931年、米国生まれ。
「企業の最も重要な業務は、新たな顧客を創造し、既存の顧客を維持することである」
「企業の資産は、顧客の存在を抜きにしたらほとんど価値がない」
「嘆かわしいことに、バランス良くマーケティングを学んだものでさえ、企業に入ると予算の大半を広告に使っている」
多くの本や言葉を残した偉大な存在。
その中でも最も偉大な功績が下記の3つ。
① マーケティングを体系化して編纂したこと
② STPというフレームワークを提唱したこと
③ ソーシャルマーケティングの分野を確立したこと
80歳を超えた今でも現役のマーケティング学者として研究に明け暮れる。
「マーケティングは他の部門に影響を与えて、顧客満足を実現するよう協力しなければならない。」
◯ マイケル・ポーター 1947年、米国生まれ。
経営戦略の代表的な学者。198-年に書いた「競争の戦略」はベストセラー。 その中で提唱したファイブフォースモデルは経営戦略の代表的なフレームワーク。
ファイブフォース論はポジショニング論とも呼ばれ、産業もしくは業界を俯瞰的に評価する具体的な方法。 セグメントを決めるにあたって、参入するべきかどうかだけでなく、参入した後に守れるかどうかをチェックする。
(ちなみに、無料化によって競合を駆逐する戦略は、ポーターの3つの基本戦略のひとつ、コストリーダーシップの発展系)
◯ ピーター・ドラッカー 1909年、オーストラリア生まれ。
マーケティングを志す人の必読書、1964年に「創造する経営者」を著書。
経営学の父とも、経営の神様とも呼ばれる。経営(マネジメント)を体系化し、学問分野へと確立した。
「事業の目的は顧客の創造である」
「顧客が事業であるのと同じように、知識が事業である」
「事業とは、市場において知識という資源を経済価値に転換するプロセスである」
「成果をあげるには、資源を、問題ではなく、機会に投じなければならない」</description>
    </item>
    
    <item>
      <title>【git】There is an existing release branchへの対処</title>
      <link>http://kotazi.github.io/blog/post/2016/0316_git_flow/</link>
      <pubDate>Wed, 16 Mar 2016 13:01:21 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0316_git_flow/</guid>
      <description>git flowのメモ。
リリースをしようとした時に下記のような注意が出てしまった。
~/W/ git:develop ❯❯❯ git flow release start 2016-03-16-0349 There is an existing release branch (2016-03-14-0349). Finish that one first.  リリースブランチを作成しようと思ったけれど、もうあるからまずはそれを完了させてくれとのこと。
webからgithubを確認すると既に2016-03-14-0349があるから何でだろうと。
~/W/ git:develop ❯❯❯ git branch | grep release release/2016-03-14-0349  grepしてみるとブランチが存在してる。
~/W/ git:develop ❯❯❯ git branch -D release/2016-03-14-0349 Deleted branch release/2016-03-14-0349 (was 0c652fd).  ブランチを削除して完了。無事にリリース作業に移れた。</description>
    </item>
    
    <item>
      <title>【読書】ネットコミュニティの設計と力　つながる私たちの時代</title>
      <link>http://kotazi.github.io/blog/post/2016/0312_internet/</link>
      <pubDate>Sat, 12 Mar 2016 23:29:19 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0312_internet/</guid>
      <description>18冊目。
角川インターネット講座 (5) ネットコミュニティの設計と力 つながる私たちの時代を読みました。
 目次 ◯ 第1部 人間の集まるコミュニティを設計する  序章　日本のインターネットコミュニティ …近藤 淳也 著 第1章　ソーシャルメディアの発生と進化 …yomoyomo 著 第2章　恋愛論的コミュニティサイト運営術 …Hagex 著 第3章　人が集まるコミュニティのつくり方 …古川 健介 著  ◯ 第2部 私たちのコミュニティはどこへ向かうのか?  第4章　サル学から考える人間のコミュニティの未来 …山極 寿一 著 第5章　情報技術とリアルコミュニティ …広井 良典 著 第6章　コミュニティと人の力 …近藤 淳也 著   本書のテーマはインターネットコミュニティ。
僕自身インターネットを仕事にしていこうと考えたのは、 コミュニティだとか、コミュニケーションのあり方が これからのインターネットによって再構築されていくだろうと感じたことが大きかった。 だから強い関心を持って読めた。
思えば少し前までインターネットコミュニティでは、 匿名であるべき、実名であるべきだとか、 レビューの信頼性がどうとかあったけれど、 いつの間にかそういう議論も少なくなり、 多くの人々がそれぞれのインターネットコミュニティの特性を理解して使い分けれるようになったと思う。
それ自体はいいことだと思うけれど、その反面、 道の輝きを放っていたインターネットコミュニティも ある程度「こういうもの」みたいなイメージが出来上がってきてしまったようにも感じる。</description>
    </item>
    
    <item>
      <title>better-npm-runを使ってpackage.jsonを整備</title>
      <link>http://kotazi.github.io/blog/post/2016/0310_better-npm-run/</link>
      <pubDate>Thu, 10 Mar 2016 15:45:52 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0310_better-npm-run/</guid>
      <description>ReduxのStarterKitを触っていて気付いたのでメモ。
benoror/better-npm-run
 package.json内でのハードコーディングを避ける。
下記のように書く。
&amp;quot;scripts&amp;quot;: { &amp;quot;compile&amp;quot;: &amp;quot;better-npm-run compile&amp;quot;, &amp;quot;start&amp;quot;: &amp;quot;better-npm-run start&amp;quot;, &amp;quot;dev&amp;quot;: &amp;quot;better-npm-run dev&amp;quot;, &amp;quot;test&amp;quot;: &amp;quot;better-npm-run test&amp;quot; },  better-npm-runがどのように動作するかというと、
&amp;quot;betterScripts&amp;quot;: { &amp;quot;compile&amp;quot;: { &amp;quot;command&amp;quot;: &amp;quot;babel-node bin/compile&amp;quot;, &amp;quot;env&amp;quot;: { &amp;quot;DEBUG&amp;quot;: &amp;quot;app:*&amp;quot; } }, &amp;quot;dev&amp;quot;: { &amp;quot;command&amp;quot;: &amp;quot;nodemon --exec babel-node bin/server&amp;quot;, &amp;quot;env&amp;quot;: { &amp;quot;NODE_ENV&amp;quot;: &amp;quot;development&amp;quot;, &amp;quot;DEBUG&amp;quot;: &amp;quot;app:*&amp;quot; } }, &amp;quot;deploy&amp;quot;: { &amp;quot;command&amp;quot;: &amp;quot;npm run clean &amp;amp;&amp;amp; npm run compile&amp;quot;, &amp;quot;env&amp;quot;: { &amp;quot;NODE_ENV&amp;quot;: &amp;quot;production&amp;quot;, &amp;quot;DEBUG&amp;quot;: &amp;quot;app:*&amp;quot; } }, &amp;quot;start&amp;quot;: { &amp;quot;command&amp;quot;: &amp;quot;babel-node bin/server&amp;quot;, &amp;quot;env&amp;quot;: { &amp;quot;DEBUG&amp;quot;: &amp;quot;app:*&amp;quot; } }, &amp;quot;test&amp;quot;: { &amp;quot;command&amp;quot;: &amp;quot;babel-node .</description>
    </item>
    
    <item>
      <title>ファイルやディレクトリの削除にはrimrafを使う</title>
      <link>http://kotazi.github.io/blog/post/2016/0310_rimraf/</link>
      <pubDate>Wed, 09 Mar 2016 15:36:56 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0310_rimraf/</guid>
      <description>isaacs/rimraf
 コールバッグも使える。
rm -rfの代わりぐらいに使おうかな。</description>
    </item>
    
    <item>
      <title>【読書】ビジネスモデル・ジェネレーション</title>
      <link>http://kotazi.github.io/blog/post/2016/0309_business/</link>
      <pubDate>Tue, 08 Mar 2016 11:40:44 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0309_business/</guid>
      <description>17冊目。
ビジネスモデル・ジェネレーション ビジネスモデル設計書を読みました。
 作家アレックス・オスターワルダーの著書。 ビジネスモデルをフレームワーク化し、さまざまな起業のビジネスモデルを そのフレームワークに当てはめながら事例を紹介する。
 目次  Canvas Patterns Design Strategy Process   Canvas [定義]ビジネスモデルとは、どのように価値を創造し、顧客に届けるかを論理的に記述したもの
9つの構築ブロック ◯ Customer Segments 誰のために価値を想像するのか？最も重要な顧客は誰なのか？ - マス市場 - ニッチ市場 - 細分化 - 多角化 - マルチサイドプラットフォーム
◯ Value Propositions 顧客にどんな価値を提供するのか？ どういった問題の解決を手助けするのか？
 新規性 パフォーマンス カスタマイゼーション 「仕事を終らせる」 ブランド 価格 デザイン コスト削減 アクセスしやすさ リスクの低減 快適さ/使いやすさ  ◯ Channels どのチャネルを通じて、顧客セグメントに立直したいか。 チャネルを顧客の日常と、どのように統合すればよいか。
[チャネルフェーズ] - 認知 - 評価 - 購入 - 提供 - アフターサービス
◯ Customer Relationships 顧客セグメントがどんな関係を構築、維持してほしいと期待しているのか。</description>
    </item>
    
    <item>
      <title>【読書】道は開ける</title>
      <link>http://kotazi.github.io/blog/post/2016/0308_carnegie/</link>
      <pubDate>Tue, 08 Mar 2016 11:40:44 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0308_carnegie/</guid>
      <description>16冊目。
新訳　道は開ける 角川文庫を読みました。
 鉄鋼王や実業家としても名高い、「人を動かす」の著者デール・カーネギー。
そのカーネギーのもう一つの代表的な著書であり、悩みへの対処法について書かれている。
 目次  そもそも不安とは何なのか 不安分析の基本テクニック 不安の習慣。その先手を打つには 平穏と幸福とをもたらす心のあり方を育てる七つの方法 不安に打ち勝つ黄金率 批判を気にせず忘れる方法 疲労と不安を予防して元気になる六つの方法 幸福と成功をもたらす仕事の見つけかた お金の不安を軽くするには 私はこうして不安を乗り越えた三十二の実話   名言まとめ 「賢者位には毎日が新たなる人生である」
「鉄の扉で過去と未来を閉ざし、今日という一区切りを生きる」
「私が何より励まされるのは、人はたゆまぬ努力によって人生を向上させてゆく力をはっきり持っているのだ、ということだ。もし胸を張って夢の道を歩き、思い描いた人生に向けて努力ができるのであれば、人は創造もしなかったような成功を収めることができる」
「小さなことにこだわっている間に、人生は終わってしまう。」
「人生とは、人の思考が作り上げるものだ。」
「人は心で思ったとおりの人間になる。」
「人はできごとそのものではなく、できごとを自分がどう見るかで木津付くのである。」
「感謝とは、深い教養に実る果実である。粗野な人びとの中には、決して見つかりはしない。」
「人は、意識の中にあるものしか表現できない。」
「あなたは、この世界にただ一人の、新しい人間だ。それは、とても素晴らしいことなのだ。持って生まれたものを、最大限に活かさなくてはいけない。」
「人が自らの責任をしっかりと背負えば、どんな状況であろうとも成功と幸福が訪れる。」
「善行とは、人の顔に喜びの笑みをもたらす行為である。」
「人は人生を理解するためにではなく、人生を生きるために作られたのだ」
 大学生の頃、自己啓発本は一通り読んだけれど社会人になってから読んだのは久しぶりだった。 カーネギーは文章がうまく、ものすごく読みやすい。
自己啓発書に書いてあることは実は当たり前の事が多いので、たまに読みなおして調子を調えるのはいいかも。</description>
    </item>
    
    <item>
      <title>【読書】インターネットの基礎　〜ネットが生んだ文化　誰もが表現者の時代〜</title>
      <link>http://kotazi.github.io/blog/post/2016/0302_internet/</link>
      <pubDate>Wed, 02 Mar 2016 11:40:44 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0302_internet/</guid>
      <description>15冊目。
角川インターネット講座４　ネットが生んだ文化　誰もが表現者の時代&amp;lt;角川インターネット講座&amp;gt; (角川学芸出版全集)を読みました。
 目次 ◯ 第1部 日本のネット文化と精神風土  序章　ネットがつくった文化圏 …川上 量生 著 第1章　日本のネットカルチャー史 …ばるぼら 著 第2章　ネットの言論空間形成 …佐々木 俊尚 著  ◯ 第2部 ネット文化を支配する原理  第3章　リア充対非リアの不毛な戦い …小野 ほりでい 著 第4章　炎上の構造 …萩上 チキ 著 第5章　祭りと血祭り　炎上の社会学 …伊藤 昌亮 著 第6章　日本文化にみるコピペのルール …山田 奨治 著 第7章　リア充/非リア充の構造 …仲正 昌樹 著   これを読むまでしっかりとインターネットにおける著作権問題についてしっかりと考えたことがなかった。 そもそも著作権が生まれた経緯についてしっかりと書かれているため、 なぜ著作権問題が生まれてくるのか、なぜ当時の法が適用できなくなってしまっているのかということについて感じ取ることができた。
世界中の本が誰にでも読めるようになるためにはまだまだ課題がありそう。</description>
    </item>
    
    <item>
      <title>cronによるメールを停止する方法</title>
      <link>http://kotazi.github.io/blog/post/2016/0301_crontab/</link>
      <pubDate>Tue, 01 Mar 2016 18:04:32 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0301_crontab/</guid>
      <description>cronからのメールが1分おきに来るようになってしまったので直しました。
 crontab -e  でcronの設定ファイルを開き、
MAILTO=&amp;quot;&amp;quot;  を追加。以上。
 定時実行プログラム CRON からのメール通知を無効化する  </description>
    </item>
    
    <item>
      <title>【読書】インターネットの基礎　〜デジタル時代の知識創造ー〜</title>
      <link>http://kotazi.github.io/blog/post/2016/0229_internet/</link>
      <pubDate>Mon, 29 Feb 2016 11:40:44 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0229_internet/</guid>
      <description>14冊目。
角川インターネット講座 (3) デジタル時代の知識創造 変容する著作権を読みました。
 目次 ◯ 第1部 知の共有と著作者の権利  序章　知識・情報の活用と著作権 …長尾 真 著 第1章　インターネット時代の著作権制度 …中山 信弘 著 第2章　万人が著作者の時代 米国の議論から …名和 小太郎 著 第3章　デジタルアーカイブのオープン化と著作権の新時代 …岡本 真 著  ◯ 第2部 出版と知識創造の未来  第4章　電子書籍とは何か? …萩野 正昭 著 第5章　情報共有時代の社会制度 グーグルとフェイスブックが投げかける問い …歌田 明弘 著 第6章　ウェブと電子書籍は、作品と作者をどう変えたか …仲俣 暁生 著 第7章　デジタルアーカイブとは何か …杉本 重雄 著 第8章　メタ複製技術時代の〈世界脳〉書物へのオマージュと電子化された〈知〉 …遠藤 薫 著 第9章　デジタルの衝撃と文化のサスティナビリティ …吉見 俊哉 著   これを読むまでしっかりとインターネットにおける著作権問題についてしっかりと考えたことがなかった。 そもそも著作権が生まれた経緯についてしっかりと書かれているため、 なぜ著作権問題が生まれてくるのか、なぜ当時の法が適用できなくなってしまっているのかということについて感じ取ることができた。</description>
    </item>
    
    <item>
      <title>【読書】ピープルウエア</title>
      <link>http://kotazi.github.io/blog/post/2016/0228_peopelwear/</link>
      <pubDate>Sun, 28 Feb 2016 22:33:30 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0228_peopelwear/</guid>
      <description>13冊目。 アメリカのソフトウェア工学者トム・デマルコの著書、ピープルウエア　第3版を読みました。
 実際のところ、ソフトウェア開発上の問題の多くは、技術的というより社会学的なものである。
というとても有名な文章が登場する本書。 ソフトウェア開発においてありがちな人間関係のトラブルとそれらに対する有用な対処が紹介される。
目次は下記である。
 第1部: 人材を活用する 第2部: オフィス環境と生産性 第3部: 人材を揃える 第4部: 生産性の高いチームを育てる 第5部: 肥沃な土壌 第6部: きっとそこは楽しいところ  本テーマの出発点は失敗したプロジェクトの調査にあった。 調査した失敗プロジェクトの圧倒的多数は、 原因が単なる技術的問題として片付けられないものばかりだった。 ということから始められる。
プロジェクトの成功は関係者の緊密な対人関係によって生まれ、 失敗は疎遠な対人関係の結果である。
◯ 品質第一主義からの頭皮 ユーザーの品質意識は実は低い。 少なくとも開発者に比べると、必要とする製品品質のレベルが低いということだ。
開発者ではなく、買い手に品質基準を決めさせることを「品質第一主義からの逃避」という。 顧客の要求通りの品質を提供することは一見最もらしく見えるが、 長い目で見ると市場に品質を合わせるとコストが増える。
言い換えるならば、 エンドユーザーの要求を遥かに超えた品質水準は、生産性を上げるひとつの手段である。
価格と品質はトレードオフであるという考えは、日本には存在しない。反対に、高品質がコスト低減をもたらすという考えが広く受け入れられている。
◯ ラエトライルの話 ラエトライルとは、杏の種の中のある部分から搾り取れる液体。 スウェーデンではアーモンドエキスと同じぐらいの値段で買えるが、 メキシコでは末期癌の治療薬として一滴50ドルで売られている。 絶望の淵にある人には、証拠などどうでもよくすがってしまうとうこと。
プロジェクト開発においても同じようなことが見られる。 多くのマネージャーが生産性があがると聞くと、証拠もなしに飛びついてしまう。
安易な解決方法では手に負えない。 よい実績は、効果的な人の使い方、作業場所や企業文化の改善などから生まれる。 けれども企業文化の改善は難しく、短期的には効果が上がりにくいため、 生産性向上ツールなどに手を伸ばしたくなってしまう。
◯ 生産性の高いチームを育てる 挑戦はチームメンバーに一緒になって努力する目標を与えるからこそ重要。 挑戦とはチームをひとつにまとめるための道具である。
チームの結束の可能性を高めるように行動することもできるが、 現実に結束させることはできない。チーム結束の過程はコントロールしようとすると壊れてしまう。
チームの構築とは言わずに、チームの育成と言うこと。
◯ 健全な会社にするための化学反応を生み出す要素  品質至上主義を作り出す 満足感を与える打ち上げをたくさん用意する エリート感覚を醸成する チームに異分子を混ぜることを奨励する 成功しているチームを守り、維持する 戦術ではなく戦略を与える  いい加減な製品を納入することからは、仲間とともに味合う満足感によって、 チームを一体化させる力は生まれない。 逆に、「完全な製品だけを求める」態度を取れば、 チームが一つにまとまる可能性が高くなる。この品質至上主義が、 チーム形成にとって最も強力な触媒である。</description>
    </item>
    
    <item>
      <title>【Rails】whenever導入を通した学び</title>
      <link>http://kotazi.github.io/blog/post/2016/0227_whenever/</link>
      <pubDate>Sat, 27 Feb 2016 20:18:53 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0227_whenever/</guid>
      <description> Railsのwheneverを使う機会があったのでその学びをまとめる。 やりたかっとことはRakeタスクを作成し、wheneverを使って定期的にSlackへポストする。
 Slack通知 Slackへの通知はすごく簡単。
ここにだいたい書いてある。
 RailsアプリからSlackに通知  とりあえず、config/intializers/slack_api.rbを作成してtokenを登録しておけば、いろいろできるみたい。
rakeタスクの作成 初めてrakeタスクを作成した。
 library rake  $ rake &amp;lt;タスク名&amp;gt; # 指定のタスクを実行。 $ rake &amp;lt;パラメータキー&amp;gt;=&amp;lt;値&amp;gt; &amp;lt;タスク名&amp;gt; # パラメータ指定ありで、指定のタスクを実行。 $ rake -h # 使い方を表示。 $ rake -T # 定義されているタスク一覧を表示  (引用:Rakeの基本的な使い方まとめ|うなの日記)
whenever  javan/whenever|github Wheneverは導入が超簡単なcrontab管理ライブラリGemです！  mixpanel mixpanelのデータのエクスポートしたい。
 Data Export API Rubyでmixpanelのイベントをtrackしたり、データをexportする術  </description>
    </item>
    
    <item>
      <title>【読書】インターネットの基礎　〜情報革命を支えるインフラストラクチャー〜</title>
      <link>http://kotazi.github.io/blog/post/2016/0224_internet/</link>
      <pubDate>Wed, 24 Feb 2016 11:40:44 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0224_internet/</guid>
      <description>2016年12冊目。
角川インターネット講座２　ネットを支えるオープンソース　ソフトウェアの進化&amp;lt;角川インターネット講座&amp;gt; (角川学芸出版全集)を読みました。
 目次 ◯ 第1部 プログラミングがすべてをつくった  序章　インターネットはソフトウェアでできている …まつもと ゆきひろ 著 第1章　インターネットを支えるソフトウェアを知る …法林 浩之 著 第2章　プログラミングとは何か …久野 靖 著 第3章　プログラミングと教育 …阿部 和広 著 第4章　ハッカー精神とは何か  プログラマーに求められる素養と思考方法 …吉岡 弘隆 著  ◯ 第2部 オープンソースが高めたネットの価値  第5章　ライセンスというプロトコル OSSエコシステムを繋ぐ仕組み …やまね ひでき 著 第6章　オープンソース化が生んだ変化 …瀧田 佐登子 著 第7章　企業とオープンソース …鵜飼 文敏 著   第2回はプログラミングとオープンソースについて。 各種ライセンスについて触れられていてとても勉強になりました。 今後は自分のプロジェクトでもライセンスを付加して利用者のリスクを可視化するよう心掛けようと思った。</description>
    </item>
    
    <item>
      <title>【読書】インターネットの基礎　〜情報革命を支えるインフラストラクチャー〜</title>
      <link>http://kotazi.github.io/blog/post/2016/0218_internet/</link>
      <pubDate>Thu, 18 Feb 2016 11:40:44 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0218_internet/</guid>
      <description>角川インターネット講座 (1) インターネットの基礎情報革命を支えるインフラストラクチャーを読みました。
 目次 ◯ はしがき  インターネット前提社会の出発によせて&amp;hellip;村井 純 著  ◯ 第1部 インターネットの理念  序章　フロンティアの流儀&amp;hellip;村井 純 著 第1章　技術の誕生と成長&amp;hellip;村井 純 著 第2章　インターネットの仕組み&amp;hellip;村井 純 著 第3章　変貌するインターネット&amp;hellip;村井 純 著 第4章　インターネットを誰がどのように運用するのか&amp;hellip;村井 純 著 技術解説　インターネットプロコトル&amp;hellip;砂原 秀樹 著  ◯ 第2部 TCP/IP発明者からの「宿題」  インターネットの再発明 Reinventing the Internet&amp;hellip;ヴィントン・グレイ・サーフ   日本のインターネットの父とも呼ばれる村井純氏によって、インターネットの歴史や仕組みが語られる。
現代のインターネットの成り立ちまでの経緯が当事者でしか知らないであろう言葉によって語られ、 難しいと思っていたインターネットの仕組みや全貌もとても分かりやすく解説されている。</description>
    </item>
    
    <item>
      <title>【読書】ユーザーストーリーマッピング</title>
      <link>http://kotazi.github.io/blog/post/2016/0213_user_story/</link>
      <pubDate>Wed, 17 Feb 2016 11:40:44 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0213_user_story/</guid>
      <description>ユーザーストーリーマッピングを読みました。
アジャイルUXの第一人者として活躍するジェフ・パットン氏の著書。
自身が開発した手法について書き下ろされら書籍。
 良いプロダクトを発見・具現化するために、チームはどう動くべきか？ Jeff Patton氏の “情熱プロダクトオーナーシップ” に参加しました   目次  0章 まず最初に読んでください 1章 全体像 2章 作るものを減らすためのプラン 3章 より速く学ぶためのプラン 4章 時間どおりに終わらせるためのプラン 5章 あなたはもうやり方を知っている 6章 ストーリーについての本当のストーリー 7章 より良いストーリーテリングのために 8章 カードに書かれていることが全てではない 9章 カードは始まりにすぎない 10章 ケーキのようにストーリーを焼く 11章 岩を砕いていく 12章 岩を砕く人 13章 オポチュニティから始める 14章 ディスカバリーを介して共通理解を築く 15章 ディスカバリーによる検証された学習 16章 リファイン、定義、構築 17章 ストーリーは実際にはアステロイドに似ている 18章 構築するすべてのものから学ぶ 19章 終わり？それとも   多くの企業がアジャイルやリーンプロセスを取り入れる一環としてストーリーを取り入れている。 しかしその取組の中で、全体像を見失ってしまったり、何が作られているのか分からなくなってしまったり、 共通理解が得られなかったり。そういったチーム開発における悩みをユーザーストーリーマッピングを用いて紐解いていく本。
ただ、この本の序文をInspiredの著者マーティケーガンが執筆しており、 HARD THINGSの著者ベン・ホロヴィッツの Good Product Manager/Bad Product Manager に倣い、強力な製品開発チームと非力なチームの重要な違いを挙げている。
それが面白かったので引用したい。
優れたチームには、使命感といえるほどの情熱を持って追求したくなる圧倒的な魅力のあるビジョンがある。 ダメなチームは報酬しか考えない。</description>
    </item>
    
    <item>
      <title>【読書】アルゴリズムが世界を支配する</title>
      <link>http://kotazi.github.io/blog/post/2016/0213_algorithm/</link>
      <pubDate>Tue, 16 Feb 2016 11:40:44 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0213_algorithm/</guid>
      <description>アルゴリズムが世界を支配する (角川ＥＰＵＢ選書)を読みました。
オンラインスーパーマーケットAisle50の共同設立社、クリストファー・スタイナーの著書。
 目次  第1章 ドミノの最初の一牌目、ウォールストリート 第2章 人類とアルゴリズムの歴史 第3章 ボット トップ40 第4章 ボットの秘密のハイウェイ 第5章 システムをゲーム化しろ 第6章 ドクター・ボットを呼べ 第7章 人類をカテゴライズする 第8章 ウォールストリート vs シリコンバレー 第9章 ウォールストリートが損をすれば他のみんなは儲かる 第10章 未来はアルゴリズムとそのクリエイターのもの   ここのところ機械学習やディープラーニングの話題をよく耳にするので買ってみた。
読んでみると株式取引や音楽を自動生成するアルゴリズムなどがかなり昔から存在することを知った。 近年ではポーカーや医療の場でもアルゴリズムは大きく活躍しており、 これからは本当にデータやアルゴリズムの時代のような気がしてしまった。
アルゴリズムはすでに我々の言葉をきいて、その本音を読み取ることができるようになっている。 ポーカーや電話の自動オペレーターの話を読んでいると、今まではアルゴリズムは 天才的な人間のモデルを作ることだと思っていたけれど、どうやらそれには少し誤解があるらしかった。
例えば電話対応の場合、ある電話は情報を得るためにかけられており、ある電話は共感や日常会話を求めてかかってきたものだとする。 最初の電話では、情報を伝えれば相手はすぐに満足するだろうが、雑談をし始めたらイライラするかもしれない。 2つ目の電話の場合、謝罪や誠実で思いやりのある対応が相手を最も満足させる。
このようにアルゴリズムは相手によって対応を変える必要がある。
そして元々NASAで宇宙飛行士の相性を調べるために開発されたテービー・ケーラー博士の手法では 人間を以下の6つのタイプに分類するらしい。
1: 感情重視型の人。課題に取り掛かる前に関係者と人間関係を築く。女性がこのグループの3/4を占める。全体の30%がこのグループ。窮地に陥ると劇的になり過剰反応を起こす
2: 思考重視型の人。社交辞令や冗談を言わない。現実ジを重視し、意思決定は厳格な現実主義に基づいて行われる。
3: 行動重視型の人。進捗や行動を望む。常に精力的で押しが強い。魅力的な人間が多い。
4: 内省重視型の人。温和で想像力が豊か。現実に取り組みよりも、これからどうなるだろうかと考えをめぐらせる。
5: 意見重視型の人。話し言葉は命令形と断定系が多い。状況の一面しか見ない傾向がある。自分お意見に固執する。政治家の70%はこのグループ。全人口ではったの10%。勤勉であり、問題解決まで粘り強い。
6: リアクション重視型の人。自発的で独創的。冗談が好きである。物事に対して強い反応を示す。起業家、発明家に多い。
もちろん複数のタイプを持つこともある。
この本を読んでアルゴリズムに興味が湧いた。</description>
    </item>
    
    <item>
      <title>【DMM英会話】 Job Interview | Business Basic</title>
      <link>http://kotazi.github.io/blog/post/2016/0216_dmm/</link>
      <pubDate>Tue, 16 Feb 2016 00:46:15 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0216_dmm/</guid>
      <description>DMM英会話のレッスン中。その日学んだことをメモ。
 Lesson 07: Discussion | Business Basic   ◯ Practice 1 | Formal and Informal Expressions  I beg to differ =&amp;gt; I doubt this is a good idea  
◯ Practice 2 | Reading Sentences 割愛。

◯ Practice 3 | Studying the Manual  You need to be polite and show respect for a different opinion. When you disagree you need to mention that the opinion is interesting but you think in a different way.</description>
    </item>
    
    <item>
      <title>信頼残高のことを思い出した。</title>
      <link>http://kotazi.github.io/blog/post/2016/0215_trast/</link>
      <pubDate>Mon, 15 Feb 2016 19:27:45 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0215_trast/</guid>
      <description>サイバーエージェントで働いていたころ、しばしば「信頼残高」という言葉を耳にした。(こういう考え方が社内に浸透していることが本当にすごいと今になって思う。)
仕事というものは信頼の積み重ねで成り立っている。 この信頼の積み重ねこそが、自身の「信頼残高」だ。
大きな仕事や、期待以上の成果を出せば信頼残高が増えていく。 信頼残高のある人間には、また大きな仕事やチャンスが回ってくる。
逆につまらないミスなどをすれば信頼残高は減っていってしまう。
 メールの誤字脱字が多い 会議に2、3分遅刻してしまう 二日酔いで出社してくる 資料のまとめ方が下手 デスク周りがいつも散らかっている  こういったことでも信頼残高はどんどん削られていってしまう。 「稼いでいるのに全然貯金が貯まらない人」みたいになってしまう。
日々の積み重ねをしっかりとやっていこう。
 個人的に思ったのが、NZ内での信頼が積み重ねられていないなと思った。 自分の成果が海を超えて認められるように努力することはもちろんなのだけれど、 各国での評価が一律になるような透明度の高い組織を作っていきたい。</description>
    </item>
    
    <item>
      <title>Rails内でのwebpackの使い方</title>
      <link>http://kotazi.github.io/blog/post/2016/0214_rails_webpack/</link>
      <pubDate>Sun, 14 Feb 2016 13:41:03 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0214_rails_webpack/</guid>
      <description>&amp;ldquo;How to use webpack with Rails&amp;rdquo;翻訳記事になります。
 webpackは強力なモジュールバンドラである。主としてフロントエンド開発のために設計されており、 bowerやnpmのJavaScriptモジュールをうまく統合することができる。
Sproketsやアセットパイプラインを用いればシームレスな挿入をすることが可能だけれども、これには典型的なRailsのJSマネジメントシステムを使うによりいくつか大きな利点がある。残念ながらwebpackのドキュメントはまだ要約することが難しく、特にRailsに統合したいとなればなおさらだ。
あなたがまだwebpackを使っていないのであれば、ここに何ができるのかを示そう。
 npmやbowerを使っている全てのフロントエンドのJS(依存関係も)管理する CoffeeScriptやES6を自動で処理する 最小の力で全てのソースマップを出力する 難しい部分でのJSの分離に役に立つ。&amp;rdquo;common&amp;rdquo;モジュールが自動的に全てのページに渡ってシェアしてくれる 大きなモジュールを複数のファイルに分割し、必要なファイルのみをダウンロードする(require.ensureを用いる)  いいなと思ったら、これらを既存のRailsアプリ、もしくは新たなRailsアプリでどのように利用するか呼んでみるといい。 ちなみに、これはRails中心に書かれているけれども、Railsでなくともそのようなフレームワークにwebpackを導入したいのであればきっと役に立つだろう。
 Getting Started Is webpack right for your app? webpackは本当にパワフルで素晴らしいツールである。 けれども本当に効果的に利用するには、あなたが&amp;rdquo;モジュールとしてのJS&amp;rdquo;という哲学をしっかりと信じる必要がある。 jQueryやBackboneといった人気のライブラリを使っているなら簡単なことだ。 けれども、特に大きなアプリをwebpackを用いてコンバートしているのなら、いくつかの問題につまづくであろうことを知っておくべきだ。
典型的な問題:
 モジュールにはちゃんと定義されてエントリーポイントがない(webpackはあなたが要求したときに何を含むべきか知らない) モジュールにpackage.jsonやbower.jsonは無効である modules which simply stick something on window and call it a day modules which add something to jQuery, instead of exporting anything modules which, by default, give you a gigantic kitchen sink you don’t need  幸運にもこれらの問題に対処するための様々なメソッドがあるため、webpackで全て解決できる。 さっきも述べたようにwebpackのドキュメントは量が多いので、私が上記についてはカバーする。</description>
    </item>
    
    <item>
      <title>【プログラミング言語Ruby】3章-データ型とオブジェクト</title>
      <link>http://kotazi.github.io/blog/post/2016/0212_ruby/</link>
      <pubDate>Sat, 13 Feb 2016 20:34:06 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0212_ruby/</guid>
      <description>数値 Rubyは数値を表現する5種類の組み込みクラスを持っており、 標準ライブラリにはさらに3種類の役に立ち数値クラスが含まれている。
Rubyの全ての数値オブジェクトはNumericのインスタンスになっている。 全ての整数はIntegerのインスタンスである。31ビット幅に収まる整数値はFixnumのインスタンスであり、 そうでなければBignumのインスタンスである。 Rubyでは実数値をFloatクラスで近似的に表現する。Floatクラスは プラットフォーム固有の浮動小数点表現を使う。
Complexクラスは複素数を表現する。 BigDecimalクラスは10進数表現を使って任意の制度の実数を表現する。 Rationalクラスは有理数、すなわち整数を別の整数で除算した値を表現する。
また、全ての数値オブジェクトはイミュータブルである。
文字列 文字列はStringクラスによって表現する。ミュータブルなオブジェクトである。 パターンはRegexpオブジェクトとして表現される。
%q、%QはStringリテラル。
配列 配列とは、値の列で、列の中の位置(添字)によって値にアクセスできるようになっているものである。
%w、%Wは配列リテラル。
配列はArray.newコンストラクタでも作成できる。
ハッシュ ハッシュとはキーと呼ばれるオブジェクトの集合を保持し、ここのキーに値を対応付けているデータ構造である。 キーを値にマッピングするので、ハッシュはマップとも呼ばれる。 個々のキーから値を連想するように導き出すので、連想配列とも呼ばれることもあるし、 添字が整数ではなく任意のオブジェクトになった配列と考え得ることもできる。
numbers = Hash.new  ハッシュリテラル ハッシュリテラルは全体が中括弧で囲まれ、カンマで区切られたキー/値の対という形で記述される。 キーと値は=&amp;gt;という2文字の矢印で区切られる。先ほど作成したHashオブジェクトは次のリテラルでも作成できる。
numbers = { &amp;quot;one&amp;quot; =&amp;gt; 1, &amp;quot;two&amp;quot; =&amp;gt; 2, &amp;quot;three&amp;quot; =&amp;gt; 3 }  一般に、ハッシュキーとしては文字列よりもSymbolオブジェクトの方が効率的に使える。
numbers = { :one =&amp;gt; 1, :two =&amp;gt; 2, :three =&amp;gt; 3 }  Symbolとはinternされたイミュータブルな文字列で、プレフィックスとしてコロンが付けられた識別子という形で記述される。
Rubyのハッシュは、ハッシュテーブルというデータ構造を使って実装されている。 ハッシュのキーとして使えるオブジェクトは、キーのハッシュ値となるFixnumを返すhashという名前のメソッドを保つ必要がある。
範囲 Rangeオブジェクトは先頭の値から末尾の値までのすべての値を表す。範囲リテラルは、先頭の値と末尾の値の間に2個または3子のドットを入れて記述する。 ドットが２個なら範囲は包含的で、末尾の値も範囲の一部となる。 ドットが３個なら、範囲は排他的で、末尾の値は範囲に含まれない。
範囲には暗黙的に順序がある。 Stringクラスにはsuccメソッド定義されており、&#39;a&#39;.</description>
    </item>
    
    <item>
      <title>【プログラミング言語Ruby】2章-Rubyプログラムの構造と実行</title>
      <link>http://kotazi.github.io/blog/post/2016/0211_ruby/</link>
      <pubDate>Fri, 12 Feb 2016 20:34:06 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0211_ruby/</guid>
      <description>Rubyインタープリタは、トークンの連続としてプログタムを解析する。 トークンは、コメント、リテラル、記号類、識別子、キーワードである。
 コメントは#。 複数行コメントは=beginに始まり、=endで終わる
 リテラルはRubyソースコードに直接現れる値。数値、文字列、正規表現の3種類がある。
 識別子とは単純に名前のことである。Rubyは変数、メソッド、クラスなどに名前を与えるために識別子を使っている。
 ▼ 識別子の中の記号類 |記号|意味| |===|===| |$|グローバル変数にプレフィックスとして付ける。| |@|インスタンス変数に付ける。クラス変数には２つつける| |?|役に立つ慣習として、論理値を返すメソッドの末尾に疑問符を付ける| |!|注意が必要なことを示すときに付ける| |=|末尾が統合になっているメソッド式は、代入演算子のサ変で東道なしのメソッド名を置くだけで実行できる|
 Rubyの構文の基本単位は式である。Rubyインタープリタは式を評価して値を生成する。
Rubyはオブジェクト指向なので、メソッドという言葉を使う。
相互作用するように作られたメソッドのグループはクラスにまとめることができる。 そして、関連するクラスとクラスを持たないメソッドはモジュールにまとめることができる。</description>
    </item>
    
    <item>
      <title>【プログラミング言語Ruby】1章-イントロダクション</title>
      <link>http://kotazi.github.io/blog/post/2016/0210_ruby/</link>
      <pubDate>Thu, 11 Feb 2016 20:34:06 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0210_ruby/</guid>
      <description>Rubyは完全なオブジェクト指向言語。 すべての値は、単純な数値リテラルやbooleanなども含めてオブジェクトである。
 Rubyでは関数やメソッド軌道のための括弧が多くの場合省略可能である。 メソッド呼び出しで括弧が省略されているためオブジェクトの名前付きフィールドか名前付き変数のように見える。 オブジェクトの外からオブジェクトの内部状態にアクセスすることはできない、カプセル化については厳格な言語である。
 ブロックとイテレータは繰り返し処理でよく使われるが、 ブロックを一度しか実行しないメソッドでも役に立つ。
File.open(&amp;quot;data.txt&amp;quot;) do |f| line = f.readline end   Rubyのメソッド名は疑問符や感嘆符で終わることもできる。 通常感嘆符のないメソッドは元のオブジェクトのコピーに変更を加えて返してくるが、 感嘆符付きのメソッドはオブジェクトをその場で書き換えるミューテータ(mutator)メソッドである。
グローバル変数には$、インスタンス変数には@、クラス変数には@@というプレフィックスをつける。
 クラスとはオブジェクトの状態を操作する関連メソッドのコレクションである。 オブジェクトの状態は、インスタンス変数によって管理されている。 インスタンス変数とは名前の先頭が@で、オブジェクトごとに異なる値を持てる変数のことである。</description>
    </item>
    
    <item>
      <title>【Flux】概要</title>
      <link>http://kotazi.github.io/blog/post/2016/0202_flux/</link>
      <pubDate>Tue, 09 Feb 2016 17:46:23 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0202_flux/</guid>
      <description>Overview|Flux   FluxはFacebookがクライアントサイドのWebアプリケーション構築の際に利用するアプリケーションのアーキテクチャです。 一定方向のデータフローを利用することでReactのビューコンポーネントの構成を補います。 Fluxはフレームワークというよりひとつのパターンなので、新しいコードを必要とすることなくいつでもFluxを使い始めることができます。
Fluxアプリケーションには主要な3つのパーツがあります。ディスパッチャー、ストア、ビュー(Reactコンポーネント)です。 これらをMVCと混同すべきではありません。 コントローラはFluxアプリケーションの中にも存在します。 controller-views-ビューはストアからデータを受け取るヒエラルキーのトップに位置し、受け取ったデータを子へと渡します。 加えて、アクションを生成する— dispatcher helper methods —はアプリケーション内で可能な変更を全て描画するセマンティックなAPIを 描画するサポートに利用します。 それらをFluxの更新サイクルにおける4番目のパートと考えると便利です。
FluxではMVCを避けて一定方向のデータフローを支持しています。 あるユーザーがReactのビューに触れると、そのビューはアプリケーションのデータやロジックを保持した様々なストアへと、中央のディスパッチャーを介してアクションを広め、影響する全てのビューを更新します。 とりわけReactのプログラミングスタイルに良く働き、ステート間でのビューの遷移を細かく支持することなくストアが更新を送れるようになります。
私たちは元々得られたデータを正しく扱います。例として、スレッドのリストを表示するビューに対して、メッセージスレッドの未読数を表示したかったとします。 MVCでは、単一のスレッドをマークし、スレッドモデルと未読数モデルを更新することは難しいです。 これらの依存関係やカスケードの更新は大規模なMVCアプリケーションでしばしば行われ、 データの流れをもつれさせ、予期せぬ結果をもたらします。
ストアが制御をひっくり返します。ストアは外部の何かに更新を依存するのではなく、更新を受け入れ、適切に調和します。 内部でのデータの管理方法をストアに留めれば、心配事がなくなります。 ストアはsetAsRead()といった直接的なセッターメソッドを持ちませんが、代わりに自身のコンテナに新しいデータを取得する手段をもっています。 そのコールバックをディスパッチャーとともに登録します。
 Structure and Data Flow Fluxアプリケーションのデータの流れは一方向です。
一方高のデータの流れはFluxアプリケーションの基本であり、上図はFluxプログラマーにとって主要なメンタルモデルとなります。 ディスパッチャー、ストア、ビューは入力と出力をもった独立したノードです。 アクションは新データとtypeプロパティをもった単純なオブジェクトです。
ビューはユーザーインタラクションが起こるとシステムを通して新しいアクションを伝播します。
ディスパッチャーを介した全てのデータフローはセントラルハブとなります。 ディスパッチャーに提供されるアクションは、ユーザーのインタラクションをきっかけに、たいていはアクション生成メソッドから始まります。 そしてディスパッチャーはストアに登録されたコールバックを発動し、アクションを全てのストアに伝えます。 登録されたコールバック内では、ストアの保持しているステートに関連している全てのアクションに反応します。 そしてストアはデータレイヤーが引き起こした変更のイベントをcontroller-viewsに送信します。 controller-viewsはこれらのイベントをキャッチし、イベントハンドラ内でストアからデータを受け取ります。 controller-viewsは自身のsetState()メソッドを呼び出し、自身と全ての子孫を再度レンダリングします。
この構造によって、関数型リアクティブプログラミング(FRP)、データフロープログラミング(DFP)、フローベースプログラミング(FBP)の理解が容易になり、アプリケーション内のデータの流れが一方向になります。(これは2wayバインディングとは異なります。) アプリケーションのステートはストア内のみに保たれ、アプリケーションの異なる部分をしっかりと分離させることができます。 ストア間での依存関係は、ヒエラルキーにより厳格に保たれ、ディスパッチャーによって更新が同期されます。
2wayデータバインディングではあるオブジェクトが変更されると他のオブジェクトも変更され、たくさんの更新がトリガされます。 アプリケーションが大きくなると、ユーザのインタラクションによって引き起こされる結果として何が変更されるかを予測することが非常に難しくなってシまいます。 シングルラウンド内でデータの変更ができれば、システム全体を予測しやすくなります。
Fluxの様々な部分を見ていきましょう。
 A Single Dispatcher Fluxアプリケーションではディスパッチャーがセントラルハブであり、全てのデータの流れを管理します。 ストアにコールバックを登録することが本質的なところであり、ディスパッチャー自身が実際に知性を持っているわけではありません。 ストアにアクションを割り当てるためのシンプルなmechanismです。 各ストアは自身を登録し、コールバックを提供します。 アクションクリエータが新しいアクションを持ったディスパッチャーを登録すると、アプリケーション内の登録されたすべてのストアがコールバックを通してアクションを受け取ります。
アプリケーションが大きくなると、ディスパッチャーはより活発になり、明確な順番で登録されたコールバックを呼び出すため、ストア間の依存関係を管理するために役立ちます。 ストアは他のストアの更新を待ち、そのあとに自身を更新します。
npmやbowerからFacebookが実際の本番環境で使用しているディスパッチャーが利用可能です。
 Stores ストアにはアプリケーションのステートとロジックが含まれます。 ストアの役割は伝統的なMVCにおけるモデルに似ていますが、ストアはたくさんのオブジェクトのステートを管理します。(ORMのようなシングルレコードを表すわけではありません。) Backboneのコレクションとも違います。 ORMスタイルのコレクションをよりシンプルに管理するもので、ストアはアプリケーション内で特定のドメインのためのアプリケーションステートを管理します。</description>
    </item>
    
    <item>
      <title>【Angular】ユニットテスト</title>
      <link>http://kotazi.github.io/blog/post/2016/0202_angular_unit/</link>
      <pubDate>Mon, 08 Feb 2016 18:45:53 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0202_angular_unit/</guid>
      <description>Unit Testing|AngularJS   JavaScriptは強い式の力を持った動的型付け言語であり、コンパイラの助けを得ることがない。 そのため、JavaScriptのコードにはしっかりしたテストが必要である。 Angularには、Angularアプリケーションのテストを用意にするための機能がたくさん組み込まれている。 Angularにおいて、テストをしないということはありえない。
 Separation of Concerns ユニットテストという名前から示されるように、これは独立した単体のコードのテストのことである。 ユニットテストは「そのロジックは正しく動くだろうか」、「ソート関数が並び替えたリストは正しい順番だろうか」 といった質問に回答しようとするものだ。
テストにおいてこのような質問に答えるためには、単体のコードを孤立させることがとても重要である。 ソート関数のテストをしている時に、関連するDOM要素を生成したり、ソートデータをフェッチするためにXHRを呼び出すといったことをしたくないため。
これは明らかなことなのに、典型的なプロジェクトでは独立した関数を呼び出すことはとてもむずかしい。 これは開発者がしばしば全てのことをするコードを混合させてしまうことに原因があり、 XHRを生成するもの、受け取ったデータをソートするもの、そしてDOMを操作するもの、である。
Angularを用いて、あなたが正しくことを行うことを簡単にした。 XHRのために依存性注入を提供するので、リクエストをシミュレーションすることが可能になり、 レスポンスデータをソートすることができ、DOMを操作することができる。 DOMを生成したり、状態を監視したりXHRリクエストのレスポンスデータを待ったりすることなく、 データのソートをテストすることができる。 単独のソート関数を分離してテストすることができる。
 With great power comes great responsibility Angularはテストしやすいことを念頭に書かれているが、それでもまだ 正しい書き方をする必要がある。 書き方が簡単になるよう努めたものの、ガイドラインを無視すれば アンテスタブルなアプリケーションになってしまう。
 Dependency Injection Angularは依存性注入のビルトインからなっており、 それはテストのコンポーネント化するため、思いどおりにコンポーネント間での依存関係やスタブ、モックをテストすることが可能。
コンポーネントに依存性注入をすればテストのモックが簡単になり、 グローバル汚染もなくなりうっかり別のテストに影響してしまうこともなくなる。
 Additional tools for testing Angular applications Angularアプリケーションのテストでは、テストをより簡単にセットアップし実行するために使うべきツールがある。
Karma Karmaはコマンドラインツールである。 アプリケーションのコードを読み込み、実行するWebサーバーを用意する。 アプリケーションがサポートする全てのブラウザにで操作することをテストするために、ブラウザの数分に対してKarmaを実行するように設定することができる。 Karmaをコマンドライン上で実行すると、ブラウザでのテスト実行結果をコマンドライン上にすぐに表示する。
KarmaはNodeJS製のアプリケーションであり、npmでインストールする。 インストールガイドについてはKarmaのサイトが役に立つ。
Jasmine Jasminはビヘイビア駆動開発のJavaScriptフレームワークであり、 Angularアプリケーションをテストするうえで最も人気のフレームワークである。 テストに構造をもたせ、アサーションを作成するための関数を提供する。 テストが大きくなっても構造的であり、ドキュメント性を保ちながら、アーカイブしてく。
テストをグループ化するためにはdescribeを利用する。
describe(&amp;quot;sorting the list of users&amp;quot;, function() { // individual tests go here });  個々のテストはit関数の中に定義される。</description>
    </item>
    
    <item>
      <title>ES6とReact試してみた</title>
      <link>http://kotazi.github.io/blog/post/2016/0130_react_calendar/</link>
      <pubDate>Mon, 01 Feb 2016 12:06:51 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0130_react_calendar/</guid>
      <description>FullCalendarとReactとES6を使ったサンプルを作ってみた。
jQueryとReactは相性が悪いと聞いていたが、特に感じられなかった。
See the Pen FullCalendar With React ES6 by Kohei Saeki (@kotazi) on CodePen.</description>
    </item>
    
    <item>
      <title>【訳読】React Tutorial</title>
      <link>http://kotazi.github.io/blog/post/2016/0128_react/</link>
      <pubDate>Thu, 28 Jan 2016 23:08:28 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0128_react/</guid>
      <description>勉強がてらReactチュートリアルを翻訳しました。
 Tutorial シンプルではあるものの、ブログに書ける現実的なコメントボックスを実装していく。 この基本バージョンのリアルタイムコメントはDisqusやLibeFyre、Facebook commentsにオファーをいただいた。
提供する機能:
 全てのコメントのView コメントを送信するためのフォーム バックエンドをカスタムするためのHook  
またこれらの機能もしっかり備えている。
 オプティミスティックコメント: サーバーに保存される前にコメントが表示されるため非常に速い ライブアップデート: 他者のコメントがリアルタイムで反映される Markdown対応: Markdownによる記述が可能   Want to skip all this and just see the source?  GitHub   Running a server チュートリアルを開始するためには、稼働しているサーバーが必要。 あくまでデータの取得と保存に使用するAPIエンドポイントとしてのサーバーだ。
できるだけ簡単にするため、仕様を実現するシンプルなサーバーをいくつかのスクリプト言語で用意した。 開始に必要なものはこちらからインストール可能。
簡潔にするために、実行するサーバーはJSONファイルをデータベースとして利用する。 本番でこんなことはしないが、APIを用いたシュミレーションを行うには簡単でいいだろう。 一度サーバーを起動したら、APIエンドポイントをサポートし、必要なスタティックペーシを出してくれる。
 Getting started このチュートリアルでは、できるだけ簡単なものにしていくつもりである。 サーバーパッケージの中に私たちが動かすHTMLファイルが含まれている。 public/index.htmlを好みのエディタで開いてみてほしい。このようになっているはずだ。
&amp;lt;!-- index.html --&amp;gt; &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;utf-8&amp;quot; /&amp;gt; &amp;lt;title&amp;gt;React Tutorial&amp;lt;/title&amp;gt; &amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/react/0.14.6/react.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/react/0.14.6/react-dom.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;https://cdnjs.</description>
    </item>
    
    <item>
      <title>【読書】コンピュータはなぜ動くのか</title>
      <link>http://kotazi.github.io/blog/post/2016/0127_why_computer/</link>
      <pubDate>Wed, 27 Jan 2016 11:40:44 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0127_why_computer/</guid>
      <description>コンピュータはなぜ動くのか～知っておきたいハードウエア＆ソフトウエアの基礎知識～を読んだ。
 本の構成  【第1章】コンピュータの3大原則とは 【第2章】コンピュータを作ってみよう 【第3章】一度は体験してほしいハンド・アセンブル 【第4章】川の流れのようにプログラムは流れる 【第5章】アルゴリズムと仲良くなる7つのポイント 【第6章】データ構造と仲良くなる7つのポイント 【第7章】オブジェクト指向プログラミングを語れるようになろう 【第8章】作れば分かるデータベース 【第9章】簡単な実験7つでTCP/IPネットワークを理解する 【第10章】データを暗号化してみよう 【第11章】そもそもXMLって何だっけ 【第12章】SEはコンピュータ・システム構築の現場監督   2003年に執筆された本。今から13年も前になるので内容としては古い。 ただ入力・演算・出力から始まり、ハードウェアとソフトウェア、プログラミング、データベース、ネットワークなど、コンピュータの初等教育で扱われる内容をほぼひととおり網羅している。
現場に役に立つ知識ではないが、間違ったことがかかれているわけでもない。 自分の知らない分野について少し知るという意味ではいい。 特にコンピュータのハードウェア的な動作についてやアセンブルについてはとても勉強になった。
 以下、メモ。
 コンピュータは「入力、演算、出力」を行う装置である プログラムは命令とデータの集合体である コンピュータの都合は人間の感覚と異なる場合がある コンピュータのハードウェアはたくさん「IC」から構成され、ICには数多くのピンがついている ピンは入力用、出力用のいずれか CPUは内部で演算を行い、メモリとI/Oを制御 メモリは命令とデータを記憶 I/Oは周辺機器と接続し、データの受け渡しを可能にする CPUを動作させるためには「クロック信号」という電気信号が必要 クロック信号を出力する部品を「クロックジェネレータ」と呼ぶ レジスタはCPU及びI/Oの中で、データを記憶する部分 0と1の羅列にニックネームを付けてプログラムする手法を「ニーモニック」と呼ぶ 「ニーモニック」を使う言語が「アセンブリ言語」 アセンブリの文法は1行に「ラベル」と「オペコード(命令)」と「オペランド(対象)」を記述するだけ アセンブリ言語ではオペランドにレジスタの名前を指定する CPU資料を見ればアセンブリ言語を手作業でマシン語に変換でき、それを「ハンドアセンブル」という ユークリッドの互除法: 最大公約数を求める エラトステネスのふるい: 素数を求める 線形探索: データを探索 2分探索: データを探索 ハッシュ法: データを探索 バブルソート: データを整列 クイックソート: データを整列 スタック: データを山のように積み上げる キュー: データを行列のように並ばせる LIFO: Last In First Out FIFO: First in First Out キーはテーブル間のリレーションシップを設定するもの インデックスはデータの検索速度を向上させる テーブルに登録される1行のデータのまとまりを「レコード」「ロウ」「行」と呼ぶ レコードを構成する項目を「フィールド」「カラム」「列」と呼ぶ 正規化とは、テーブルを複数に分け、個々のテーブルのリレーションシップを設定して、データベースの構造を整理すること リレーションシップを設定するためにはテーブルとテーブルを関連ふけるためのフィールドが必要。それを「キー」と呼ぶ ↑自分から見たら「主キー」、逆から見たら「外部キー」 トランザクションはトラブルが発生した時にロールバックする TCPは送受信者が確認を取りながらデータを受け渡すプロトコル。 ↑このようなデータの送信方式が「ハンドシェイク」 TCPでは大きなデータはパケット単位に分割する あらゆるデータは数値なので、形式が違っても暗号手法は基本的に同じ   ざっくりそんな感じ。書き出してみると為になったことけっこうあった。</description>
    </item>
    
    <item>
      <title>【訳読】JSX</title>
      <link>http://kotazi.github.io/blog/post/2016/0126_jsx/</link>
      <pubDate>Tue, 26 Jan 2016 21:47:07 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0126_jsx/</guid>
      <description>勉強がてらJSXのTutorialを翻訳しました。
 Background JSXはJavaScriptへのコンパイルが可能な、静的型付けかつオブジェクト指向のプログラミング言語です。 JavaScriptよりも頑丈なプログラミング言語が必要だったためにJSXは開発されました。 とはいえ、JSXはとりわけ文や式など、そこそこJavaScriptに近いように作られています。
ミスタイポや変数名や関数の定義忘れなどをコンパイル時に検知可能のため、静的型付け言語は頑丈なプログラミング言語といえます。 これは特に多くのエンジニアが携わる中規模から大規模のプロジェクトにおいて重要なことです。
それゆえに、JSXは静的型付け言語として設計されました。 全ての値と変数には静的な型があり、適切な方の値のみを代入することができます。 加えて、全ての関数はパラメータと返り値によって決定されたクロージャーに含まれます。 引数の型が間違っていると代入することはできません。
またJSXを開発した別の重要な理由として、JSのパフォーマンスを引き上げつことがありました。 JavaScript自身が遅いということはないのですが、大規模開発になると抽象的なレイヤーが肥大化しがちです。 例えば代用的なクラスやアクセサメソッドのことであり、これらはしばしばパフォーマンスにネガティブな影響を与えます。 JSZでは&amp;rdquo;inline expansion&amp;rdquo;によってパフォーマンスを引き上げています。 これはコンパイル時に関数呼び出しが決定したものを、関数本体を呼び出し元の方へ拡張することです。 静的型付け言語のパフォーマンスのちからになります。
 Run &amp;ldquo;Hello, World!&amp;rdquo; JSXのプログタムを実行してみましょう。jsxコマンドを使い、JSXをJavaScriptにコンパイルします。
まずはnpmでjsxをインストールします。
$ npm install -g jsx  そしたら下記のコードでhello.jsxを作成しましょう。
class _Main { static function main(args : string[]) : void { log &amp;quot;Hello, world!&amp;quot;; } }  下記のコマンドでJSXを実行することができ、&amp;rdquo;Hello, world&amp;rdquo;がコンソール上に出力されます。
$ jsx --run hello.jsx  次のセクションではhello.jsxについて詳しく見ていきましょう。
 Program Structure ここでは&amp;rdquo;Hello world!&amp;ldquo;サンプルであるhello.jsxについて取り扱っていきます。 このプログラムに名前や静的型付け、クラス構造といったいくつかのJSXの機能を見ることができます。
class _Main { static function main(args : string[]) : void { log &amp;quot;Hello, world!</description>
    </item>
    
    <item>
      <title>【FullCalendar】Current Date</title>
      <link>http://kotazi.github.io/blog/post/2016/0125_calendar/</link>
      <pubDate>Mon, 25 Jan 2016 22:53:46 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0125_calendar/</guid>
      <description>Current Date  agendaWeekとagendaDay用のオプションです。
 ◯ defaultDate 最初の読み込み時に表示する日時。
◯ nowIndicator 現在時刻にマーカーを引くかどうか。
◯ prev (method) 前に戻るためのメソッド。
◯ next (method) 次に進むためのメソッド。
◯ prevYear (method) 前年に戻る。
◯ nextYear (method) 翌年に進む。
◯ today(method) 今日を表示する。
◯ gotoDate(method) 指定日へ移動する。
◯ incrementDate(method) 指定日時分だけ移動する。
◯ getDate(method) 日付を取得する。</description>
    </item>
    
    <item>
      <title>【読書】How Google Works</title>
      <link>http://kotazi.github.io/blog/post/2016/0129_google/</link>
      <pubDate>Sun, 24 Jan 2016 18:40:44 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0129_google/</guid>
      <description>How Google Works (ハウ・グーグル・ワークス) ―私たちの働き方とマネジメントを読んだ。
 ラリー・ペイジとセルゲイ・ブリンによって創業された企業「Google」。
そのGoogleの働き方について書かれた本である。著者は元CEOのエリック・シュミット。
この本は次の各章から構成される。
 はじめに 文化 戦略 人材 意思決定 コミュニケーション イノベーション おわりに   文化や人材、イノベーションといった様々な分野からGoogleという企業について語られる。 非常に学びどころの多い本であったが、ひとつ大事なキーワードを挙げるとすれば、 「スマート・クリエイティブ」だろう。
1998年にGoogleを創業した当時、ラリーとセルゲイは経営の知識もなければ経験もなかった。 「ユーザーを中心に考えること」を重要視し、最高のサービスを生み出せばお金は後からついてくると信じていた。 成功し壮大な野望を成し遂げるためにはとびきり優秀なエンジニアを惹きつけ、引っ張っていくしかないと感じていた。
実際業務プロセスも適当で、壮大な志を遂げられるような会社を作る戦術はなかったのだ。 ただ一つはっきりしていた経営戦術は、「私たちが20世紀に学んだことのほとんどは間違っており、それを根本から見直すべき時期がきている。」ということだけだった。
技術成長に伴う時代の変化の結果、いまや企業の成功に最も重要な要素はプロダクトの優位性になった。 アマゾン創業者兼CEOのジェフ・ベゾスも次のように述べている。
「古い世界では持てる時間の30%を優れたプロダクトの開発に、70%をそれがどれほど素晴らしいプロダクトか吹聴してまわるのに充てていた。それが新たな世界では逆転した」
また優位性が重要視されるようになるのに伴い、新たな試みをし失敗するコストが大幅に低下した。 プロダクト開発はより柔軟でスピードが求められるプロセスになった。
 スマート・クリエイティブ 実験のコストや失敗のコストは大幅に低下し、希少だったデータやPCも簡単に手に入るようになった。 そして、突如して「ひとり」のプレイヤー、マネージャー、経営者がとほうもないインパクトを生み出せるようになった。
こんにち成功している企業の際立った特色は、最高のプロダクトを生み出し続ける能力だ。 それを手に入れる唯一の道は、スマートクリエイティブを惹きつけ、彼らが偉業を成し遂げられるような環境を作り出すことだ。
スマート・クリエイティブはどのような人間か。 彼らは自分の”商売道具”を使いこなすための高度な専門知識を持っており経験値も高い。分析力とビジネス感覚にも優れており、競争心も好奇心も旺盛だ。 ユーザーのこともよく分かっている。リスクをいとわない。自発的である。あらゆる可能性にオープンであり、コミュニケーション能力も高い。 すべてのスマート・クリエイティブがこうした特徴を全て備えているわけではなくむしろ稀である。
共通して持っているものは「努力をいとわず、これまでの常識的方法に疑問を持ち、新しいやり方を試すことに積極的であること」だ。 これがスマート・クリエイティブが大きな影響を持ちうる理由である。
2003年ごろのGoogleが課題にしていたことは、こうしたスマート・クリエイティブな社員たちが真価を発揮できるような新たな労働環境を生み出し、維持することだった。
 文化 企業を立ち上げるときに、最初にどんな文化を作りたいか考え、明確にしておくほうが懸命だ。 文化を生み出すのは創業者だが、それを最もよく反映するのは、会社を立ち上げる時に集まった、創業者が信頼を置くチームである。 「ぼくらにとって大切なことは何か」「信念は何か」「どんな存在になりたいのか」「会社の行動や意思決定の方法はどうあるべきか」 成功する会社とそうでない会社の違いは、従業員がこうした文言を信じているかどうかにある。
PMについて良い文章があったので引用する。
 インタ-ネット世紀のプロダクトマネジャーの役割は、最高のプロダクトの設計、エンジニアリング、開発を担う人々とともに働くことだ。 そのなかには、プロダクトのライフサイクルを管理し、プロダクトのロードマップを決定し、消費者の声を代弁し、そうした事柄をチームや経営陣に伝えるといった従来型の管理業務も含まれる。だが、スマート・クリエイティブ型のプロダクト・マネジャーに何より求められるのは、プロダクトをさらに良くするための技術的ヒントを見つけることだ。それは消費者のプロダクトの使い方(そして技術の進歩とともにそのパターンがどのように変化するか)を把握すること、データの理解や分析、技術のトレンドやそれが業界に及ぼす影響を見きわめることによって得られる。そのためにプロダクト・マネジャーはチームのエンジニア(あるいは化学者、生物学者、デザイナーなど、プロダクトの設計や開発のために採用されたスマート・クリエイティブ)と仕事も食事も生活もともにする必要がある。
 ◯ 能力主義を浸透させるには 能力主義を浸透させるには、「異議を唱える義務」を重視する文化が必要。ある考え方に問題があると思った人は、懸念を表明しなければならない。そうしなければ最高とはいえない考え方が通り、懸念を口にしなかったものも共同責任を負うことになる。
◯ 優れた仕事は楽しくなければならない あなたが死ぬほど働いているのに、ちっとも楽しくないという場合、おそらく何か間違っている。 楽しい理由の一つは、将来の成功の予感かもしれない。だが、一番大きいのは、同僚と一緒に笑ったり、ジョークを言い合ったり、ともに仕事をする楽しさのはずだ。
◯ 戦略会議 正しい先着にはある種の美しさがある、多くの人やアイディアが成功のためにひとつになっている感覚。 まずは「5年後はどうなっているか」と尋ねるところから始めよう。 自身が挑戦者である場合、アイディアを軸にプロダクトを開発し、事業を構築しなければならない。 成功している大企業は例外なく次の点から出発している。</description>
    </item>
    
    <item>
      <title>【FullCalendar】General Display</title>
      <link>http://kotazi.github.io/blog/post/2016/0123_calendar/</link>
      <pubDate>Sat, 23 Jan 2016 22:53:46 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0123_calendar/</guid>
      <description>General Display   ◯ header カレンダー上部のボタンとタイトルを定義します。
◯ customButtons ヘッダーで使用されるカスタムボタンを定義します。
◯ buttonIcons ヘッダーボタンで表示するアイコンを決めます。
◯ theme jQuery UIテーマの使用不使用です。
◯ themeButtonIcons テーマで使用するアイコンを決定します。
◯ firstDay 週始めを決めます。
◯ isRTL カレンダーの表示向きです。
◯ weekends カレンダーのビューに土日を含めるかどうかです。
◯ hiddenDays 決まった曜日を非表示にすることができます。
◯ fixedWeekCount デフォルトはtrue.必ず6週です。 falseの場合は4や5週の場合があります。
◯ weekNumbers 週番号を表示するかです。trueにすると左側に入ります。
◯ weekNumberCalculation weekNumbersの設定に合わせて週の数を計算します。
◯ businessHours ビジネスタイムの設定。
◯ height カレンダーの高さを指定します。
◯ aspectRatio 縦横のアスペクト比を決定します。
◯ handleWindowResize ブラウザがリサイズされた時に、カレンダーをリサイズします。
◯ eventLimit 一日に表示するイベントの数の上限。
◯ eventLimitClick eventLimitで設定した上限を超え、moreをクリックした時のアクション。
◯ viewRender (callback) レンダリング後のコールバック
◯ viewDestroy (callback) データ破壊後のコールバック</description>
    </item>
    
    <item>
      <title>【FullCalendar】Google Calendar</title>
      <link>http://kotazi.github.io/blog/post/2016/0122_calendar/</link>
      <pubDate>Fri, 22 Jan 2016 22:53:46 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0122_calendar/</guid>
      <description>FullCalendarのGoogleCalendar同期について。
 Google Calendar   Google Calendar FullCalendarではGoogle Calendarのイベントを表示することができます。 GoogleCalendarはバックエンド側で管理・保持しているイベントデータを提供することができます。 (FullCalendarにはない機能)
 Before you code&amp;hellip; GoogleCalendarのAPIキーが必要です
 Google Developer Consoleから新しいプロジェクトを作成してください そのプロジェクトのサイドバーから、「APIs &amp;amp; auth &amp;gt; APIs」と移動します &amp;ldquo;Calendar API&amp;rdquo;をオンにしてください。 サイドバーから「APIs &amp;amp; auth &amp;gt; Credentials」と移動します &amp;ldquo;Public API access&amp;rdquo;セクション内の&amp;rdquo;Create new Key&amp;rdquo;をクリックします &amp;ldquo;Browser Key&amp;rdquo;を選択します カレンダーをホストするドメインが分かれば入力してください。いつでも変更できるので分からなければそのままで大丈夫です 新しいAPIキーが現れます。   Googleを公開する
 GoogleCalendarのインターフェイスで、左側にある&amp;rdquo;My calendars&amp;rdquo;へ カレンダーにカーソルを当て、矢印をクリックします メニューが表示されるので&amp;rdquo;Share this Calendar&amp;rdquo;をクリックします &amp;ldquo;Make this calendar public&amp;rdquo;にチェックします &amp;ldquo;Share only my free/busy information&amp;rdquo;にチェックが入っていないことを確認してください 保存します   GoogleCalendarのIDを取得する
 GoogleCalendarのインターフェイスで、左側にある&amp;rdquo;My calendars&amp;rdquo;へ カレンダーにカーソルを当て、矢印をクリックします メニューが表示されるので&amp;rdquo;Calendar settings&amp;rdquo;をクリックします &amp;ldquo;Calendar Address&amp;rdquo;セクションのCalendarIDを見てください。 &amp;ldquo;abcd1234@group.</description>
    </item>
    
    <item>
      <title>【FullCalendar】Basic Usage</title>
      <link>http://kotazi.github.io/blog/post/2016/0121_calendar/</link>
      <pubDate>Thu, 21 Jan 2016 22:53:46 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0121_calendar/</guid>
      <description>FullCalendarの基本的な使い方です。
 Basic Usage   Basic Usage Webページにカレンダーを組み込む最初のステップは、正しいJSとCSSファイルを用意することです。 FullCalendarのスタイルシート、FullCalendar、jQuery、Momentファイルを&amp;lt;head&amp;gt;に含めたことを確認してください。
&amp;lt;link rel=&#39;stylesheet&#39; href=&#39;fullcalendar/fullcalendar.css&#39; /&amp;gt; &amp;lt;script src=&#39;lib/jquery.min.js&#39;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&#39;lib/moment.min.js&#39;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&#39;fullcalendar/fullcalendar.js&#39;&amp;gt;&amp;lt;/script&amp;gt;  jQueryとMomentは必ずFullCalendarのJSファイルより先に読み込んでください。
もしドラッグやリサイズをするのであれば、追加する必要のあるライブラリがあるかもしれないので、こちらを見てください。
依存関係を書き終えたら、カレンダーを初期化するためのスクリプトを記述します。 このコードはページの初期化後に実行される必要があります。最も良い方法はjQueryの$(document).readyあたりを使うことです。
$(document).ready(function() { // page is now ready, initialize the calendar... $(&#39;#calendar&#39;).fullCalendar({ // put your options and callbacks here }) });  上記のコードは&amp;lt;script&amp;gt;タグで囲んでください。 ページ内のIDcalendar要素の中にカレンダーを生成します。
&amp;lt;div id=&#39;calendar&#39;&amp;gt;&amp;lt;/div&amp;gt;  これで空っぽの月カレンダーが表示されると思います。 イベントの表示方法について学ぶにはGoogle CalendarもしくはEvent Dataのセクションを参考にしてください。
 Options FullCalendarのドキュメントの大半は、オプションの影響や振る舞いについてです。 オプションはこのように、たいていカレンダーの初期化時にセットされます。
$(&#39;#calendar&#39;).fullCalendar({ weekends: false // will hide Saturdays and Sundays });   Callbacks コールバックはオプションのように並べられますが、これらの関数は特別なことが起こらなければ呼ばれません。 下記のサンプルでは、ユーザーが日にちをクリックするとアラートが表示されるものです。</description>
    </item>
    
    <item>
      <title>【FullCalendar】Agenda Options</title>
      <link>http://kotazi.github.io/blog/post/2016/0124_calendar/</link>
      <pubDate>Tue, 19 Jan 2016 22:53:46 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0124_calendar/</guid>
      <description>Agenda Options  agendaWeekとagendaDay用のオプションです。
 ◯ allDaySlot &amp;ldquo;all-day&amp;rdquo;(終日)の表示をカレンダーの上部にするかどうか。
◯ allDayText &amp;ldquo;all-day&amp;rdquo;に表示するテキスト。
◯ slotDuration 枠の間隔。
◯ slotLabelFormat 枠の部分の表示フォーマット。
◯ slotLabelInterval 枠部分にテキストを表示する間隔を決めます。
◯ snapDuration イベントをドラックでずらす間隔を決めます。
◯ scrollTime スクロール枠を決めます。
◯ minTime 表示する時間の最低枠を決めます。
◯ maxTime 表示する時間の最大枠を決めます。
◯ lotEventOverlap イベントの時間が重複した際の表示方法</description>
    </item>
    
    <item>
      <title>【読書】強いチームはオフィスを捨てる</title>
      <link>http://kotazi.github.io/blog/post/2016/0119_37signals/</link>
      <pubDate>Tue, 19 Jan 2016 22:53:46 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0119_37signals/</guid>
      <description>強いチームはオフィスを捨てる: 37シグナルズが考える「働き方革命」を読みました。
 本書は37signalsのCEO、ジェイソン・フリードに書かれた本である。 37signalsは1999年にシカゴに設立されたウェブアプリケーションの会社である。 プロジェクト管理ツール「Basecamp」や、Ruby用のフレームワークである「Runy on Rails」を開発した会社として有名。
この本は
 はじめに イントロダクション: オフィスのない世界 リモートワークの時代がやってきた リモートワークの誤解を解く リモートのコラボレーション術 リモートワークの落とし穴 リモート時代の人材採用 リモート時代のマネジメント リモートワーカーの仕事スタイル おわりに  
といった各章から成る。 小題は2ページ程度で挿絵も入っていて読みやすい。
本書はリモートワークに対する考え方をアップデートするために書かれた本だ。
技術は既に揃った。 世界中の人といつでも簡単にコミュニケーションが取れ、 一緒に作業を進められるツールがいくらでもある。
オフィスに集まって働くという固定概念をくつがえし、新しい働き方を提唱する本だ。
 往復2時間の通勤時間が無駄。それだけで疲弊する。 本気で日中のオフィスが働きやすいと思っているのか？ もっとも自分の集中力の高まる時間に働くべき。  
ざっくりまとめると従来のオフィスでの働き方を上記の理由から否定する。　リモートワークであればこれらに縛られることなく好きな時に好きな場所で働くことができる。
実際にリモートワークを取り入れている会社もたくさんある。
◯ 従業員数1万人以上  AT&amp;amp;T(通信) ユナイテッドヘルス・グループ(医療) マッキンゼー・アンド・カンパニー(コンサルティング) インテル(IT) SCジョンソン(メーカー) エトナ(保険) シスコ(IT) デロイト(会計) HSBC UK(金融) ブリティッシュ・テレコム(通信) ユニリーバ(消費財) エクスプレス・スクリプツ(薬剤給付管理)  
◯ 従業員数1000〜1万人  メルセデス・ベンツUSA(自動車) ティーチ・フォー・アメリカ(教育) プランテ・モラン(会計・コンサルティング) ドリームワークス・アニメーションSKG(アニメ制作) パーキンス・クーイ(法律) アメリカン・フィデリティ・アシュアランス(保険) 米国教育省(行政) ヴァージン・アトランティック(航空) ブロケード・コミュニケーションズ・システムズ(IT)</description>
    </item>
    
    <item>
      <title>gemをインストールしたけれど見つからない時に疑うこと</title>
      <link>http://kotazi.github.io/blog/post/2016/0119_gitup/</link>
      <pubDate>Tue, 19 Jan 2016 13:55:26 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0119_gitup/</guid>
      <description>◯ git-upをインストール ◯ 探す  ◯ パスを通す       git-upをインストールしたけれど使えなかったのでその時の対処法をメモ。
 ◯ git-upをインストール $ gem install git-up  この状態でgit upを試したけれど見つからなかった
◯ 探す $ bundle list | grep git-up  これは見つかる。
$ which git-up  これが見つからない。rbenvあたりでパスが通っていないっぽい。
◯ パスを通す rbev内にgit-upが入っているかを確認する
$ find .rbenv -name git-up .rbenv/versions/2.2.2/bin/git-up .rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/gems/git-up-0.5.12/bin/git-up .rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/gems/git-up-0.5.12/lib/git-up  あった。
シンボリックリンクを作成する
$ ln -s ~/.rbenv/versions/2.2.2/bin/git-up /usr/local/bin  最後にgit-upがあることを確認する。</description>
    </item>
    
    <item>
      <title>【読書】小さなチーム、大きな仕事</title>
      <link>http://kotazi.github.io/blog/post/2016/0118_37signals/</link>
      <pubDate>Mon, 18 Jan 2016 12:53:46 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0118_37signals/</guid>
      <description>小さなチーム、大きな仕事〔完全版〕: 37シグナルズ成功の法則を読みました。
 本書は37signalsのCEO、ジェイソン・フリードに書かれた本である。 37signalsは1999年にシカゴに設立されたウェブアプリケーションの会社である。 プロジェクト管理ツール「Basecamp」や、Ruby用のフレームワークである「Runy on Rails」を開発した会社として有名。
この本は
 はじめに まず最初に 見直す 先に進む 進展 生産性 競合相手 進化 プロモーション 人を雇う ダメージ・コントロール 文化 最後に  といった各章から成る。 小題は2ページ程度で挿絵も入っていて読みやすい。
「ビジネスを立ちあげて、経営して、拡大する(あるいは拡大しない)ことについて、言いたいことがある。」 という一文から本書は始まる。
本書の著者、ジェイソン・フリードが経営する37signalsは少数精鋭型のチームと自分たちのやり方で大きな成果を残してきた。 大方この本は、そんなジェイソン・フリードが一般的なビジネス手法をやんわりと否定するビジネスエッセイである。
この本でも最後に書かれているのは「ひらめき」についてだった。
「ひらめきには賞味期限がある」
ひらめきは永遠に持続できるものではない。何かしたいことがあれば、今しなければならない。 しばらく放っておいて二ヶ月後に取りかかるというわけにはいかない。 「後でやる」とはいえない。「後で」ではそんなにやる気満々でもないだろう。
待ってはくれない。ひらめきとは「今」のものだ。 もし、虜にされたなら、逆に仕事に専念することだ。</description>
    </item>
    
    <item>
      <title>【読書】Being Geek</title>
      <link>http://kotazi.github.io/blog/post/2016/0117_geek/</link>
      <pubDate>Sun, 17 Jan 2016 12:53:46 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0117_geek/</guid>
      <description>Being Geek ―ギークであり続けるためのキャリア戦略を読みました。
  第一部 キャリアの形成 第二部 マネージメント 第三部 日々の仕事に必要なスキル 第四部 変化  
上記4部が全40章で構成されている。
Geekとはについてよく書かれた本である。
「Geekは普通の人とは違っている。」
そんなGeekのための本であり、
Geekがいかにして生きていくべきかを掘り下げていく。
基本的には日本でいう「オタク」のような技術者を想定された本であり、 「電話に出るべきか？」とか「Geekにとって人間は困りごと」だとかそういう視点でキャリアや人生が語られる。
本書ではGeekとは次のような信条を持つ人のことであると記される。
 物事を理解するにはまず定義を知るべき システムは必ず認識可能な要素に分けられる 何をすべきかを判断するには、まずルールを見つける ルールを知れば成功のための行動がとれる  
Geekと呼ばれる人たちにとって何よりも重要なものは「構造」である。
すべてのGeekに共通しているのは「この世界について十分に学べば、全ては予測可能になる。」と信じているという点だ。
Geekのキャリア形成や転職といってことについて書かれた本書であるが、本の終わりではアイディアについて語られている。
良いアイディアが思い浮かんでしまったらどうしようという話である。
もしも、まったく誰も思いついていない斬新なアイディアが浮かんでしまったらどうしよう。
真剣に考えなくてはならない。 住宅ローンを抱え、幼い子供がいるあなたが素晴らしいアイディアを思いついたとする。 しかも、今のところ、誰も実現していない。ならば、思い切って実現に乗り出すべきではないだろうか。
ともかくやってみよう。小さいところから始めてみるのだ。 自分で考え、自分の判断で先へ進むのだ。 成功するかは分からないが、いろいろと面倒なことに巻き込まれるのは確実だろう。 新しいことをしようとすれば、おそらく既存のルールをいくつも破ることになるからだ。 だが、きっとそれは気分の悪いことではないはずだ。直感を信じて前進しよう。
という話。</description>
    </item>
    
    <item>
      <title>Angular2のチュートリアル</title>
      <link>http://kotazi.github.io/blog/post/2016/0115_angular2_2/</link>
      <pubDate>Fri, 15 Jan 2016 20:07:16 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0115_angular2_2/</guid>
      <description>Angualr2のチュートリアルやったのでメモ。
 kotazi/angular2-quick-start TUTORIAL: TOUR OF HEROES   構成 angular2-tour-of-heroes |- node_modules |-app | |- app.component.ts | |- boot.ts | |- hero.ts | |- hero-detail.component.ts | |- hero.service.ts | |- mock-heroes.ts |- index.html |- package.json |- tsconfig.json  index.html  Angular2ではangular2-polyfills.jsとRx.jsが必要 Systemでconfigとbootの読み込み &amp;lt;my-app&amp;gt;タグを埋め込む   boot.ts  bootstrap()でアプリケーション起動   app.component.ts @ComponentはAngularにこのクラスはAngularのコンポーネントだと伝える役割を担う。
selectorでHTMLのタグ名を指定する。templateにはレンタリングするHTMLを記述する。
 *ngFor=&amp;ldquo;#hero of heroes&amp;rdquo; ng-repeatが変わった アスタリスクとシャープが特徴   hero.ts classではなくinterfaceを利用している。
ここでの選び方はHeroをどのように使いたいか。
ロジックや振る舞いを書く場合は、class。 型の定義などだけであれば、interfaceで十分。
 mock-heroes.ts  HREOES配列はHero型。   hero-detail.</description>
    </item>
    
    <item>
      <title>Angular2メモ</title>
      <link>http://kotazi.github.io/blog/post/2016/0115_angular2/</link>
      <pubDate>Fri, 15 Jan 2016 11:56:56 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0115_angular2/</guid>
      <description>SPEED &amp;amp; PERFORMANCE Angular2ではAngular1から劇的に速くなります。 - サーバーサイドプリレンダリングによる初期ロードの高速化 - オフラインコンパイルの立ちあげの速さ、 - 検出やビューキャッシュの大幅改善によるスムーズなスクロールやトランジション。
SIMPLE &amp;amp; EXPRESSIVE 意図を明確に自然に書きやすくなります。 柔軟なテンプレートは読みやすく理解しやすいので、 チームの複雑さがなくなります。
CROSS PLATFORM Angular2はデスクトップアプリやモバイルウェブ、AndroidとiOSにも対応。 Angular Universalはモバイル高速化のためにサーバーサイドレンダリングを提供します。
Web workerによってレスポンシブなアプリUIがサポートされます。
SEAMLESS UPGRADE FROM ANGULAR 1 自身のペースでAngular1からのアップデードができます。
FLEXIBLE DEVELOPMENT 言語を自由に選べます。 ES5、TypeScript、Dart、ES2015やJSにコンパイルできる言語なら動作します。
COMPREHENSIVE ROUTING ビューの設計が洗練されています。
DEPENDENCY INJECTION 依存性注入がシンプルに。 退屈なコードが不要に。 テストも書きやすくなる。
LEGACY BROWSER SUPPORT Chrome, Edge, Firefox, IE, and Safariの最新バージョンをサポート。 IE9+ and Android 4.1+も。
ANIMATIONS 低レイヤーでのアニメーションをサポート。
INTERNATIONALIZATION (I18N) &amp;amp; ACCESSIBILITY 全ての人に届くようにできてる。</description>
    </item>
    
    <item>
      <title>【DMM英会話】 Job Interview | Business Basic</title>
      <link>http://kotazi.github.io/blog/post/2016/0115_dmm/</link>
      <pubDate>Fri, 15 Jan 2016 00:46:15 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0115_dmm/</guid>
      <description>DMM英会話のレッスン中。その日学んだことをメモ。
 Lesson 05: Job Interview | Business Basic   ◯ Practice 1 | Formal and Informal Expressions 割愛。

◯ Practice 2 | Reading Sentences 割愛。

◯ Practice 3 | Studying the Manual  Research the company you are applying for. Find out about its history, main goals and the founders of the company. Don’t be nervous and act confident. Know your best qualities and don’t be afraid to mention a few weaknesses.</description>
    </item>
    
    <item>
      <title>【DMM英会話】 Business Call | Business Basic</title>
      <link>http://kotazi.github.io/blog/post/2016/0113_dmm/</link>
      <pubDate>Wed, 13 Jan 2016 00:46:15 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0113_dmm/</guid>
      <description>DMM英会話のレッスン中。その日学んだことをメモ。
 Lesson 05: Business Call | Business Basic   ◯ Practice 1 | Formal and Informal Expressions 割愛。

◯ Practice 2 | Reading Sentences 割愛。

◯ Practice 3 | Studying the Manual  Don’t forget to introduce yourself and say why you are calling. Be polite, brief and informative. If you are deciding on some specific details such as a meeting date and place, make sure to repeat it twice so there would be no misunderstandings.</description>
    </item>
    
    <item>
      <title>【読書】イーロン・マスク 未来を創る男</title>
      <link>http://kotazi.github.io/blog/post/2016/0110_mask/</link>
      <pubDate>Sun, 10 Jan 2016 17:42:38 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0110_mask/</guid>
      <description>イーロン・マスク 未来を創る男を読みました。
 夢を追う天才、イーロン・マスク。
Paypalの前身、X.com社の共同創業者であり、スペースX社のCEO、テスラ・モーターズのCEO、ソーラーシティ社の会長を務める。
一見異なる事業をやっているように見えるがマスクの夢は「宇宙移民の実現と持続エネルギー問題の解決」であり一貫している。
ペイパル共同創業者のピーター・ティールは「人々を幻滅させたのはテクノロジー産業だ」と言い、
彼の経営するベンチャーキャピタルのキャッチフレーズは「空飛ぶ車が欲しかったのに、出てきたものはたったの&amp;rdquo;140文字&amp;rdquo;」である。
人々がイノベーションへの期待を忘れていく中、マスクは非現実的な目標を掲げ夢を追い続けている。
そんなマスクの幼少期から現在までについて語られた一冊。
マスクの宇宙にかける想いは強く、人類が地球にとどまらず惑星をまたいで活躍できる種に進化させようとしている。 人類滅亡を避けるためには別惑星でのコロニー建設が必要であり、それに人生を捧げている。
火星を温暖化させなければ地球のような惑星にはならないが、それには1000年近く必要だと語っており、 マスク自身が生きている間には実現できないと考えているようだった。
また、自身が火星に行くことについても、可能であれば行きたいが行く必要はないと答えている。 大切なのは数多くの人が火星に行けるようにすること、そして人類が生き延びられるかどうか。 そのために自身の参加は懸命ではないと思っているそうだ。</description>
    </item>
    
    <item>
      <title>【Rails】Routing周りのメモ書き</title>
      <link>http://kotazi.github.io/blog/post/2016/0107_rails_routing/</link>
      <pubDate>Thu, 07 Jan 2016 18:31:41 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0107_rails_routing/</guid>
      <description>新しいRailsプロジェクトのroutes.rbを読んでいて調べたこととか。
 ◯ namespaceとscope moduleとscopeのち外  namespaceはURI PatternもController#Actionも指定したパスに scope moduleはController#Actionのみ指定したパスに scopeはURI Patternのみ指定したパスに  routeのmoduleとnamespaceとscopeの違い
◯ constraintsについて constraintsを使うことでさまざまな制限を兼ねることができる。 独自のクラスを使用すうることなども可能。
rails routing constraintsについて
◯ resourcesルーティング一覧   HTTP動詞 パス コントローラ#アクション 目的     GET /photos photos#index すべての写真の一覧を表示   GET /photos/new photos#new 写真を1つ作成するためのHTMLフォームを返す   POST /photos photos#create 写真を1つ作成する   GET /photos/:id photos#show 特定の写真を表示する   GET /photos/:id/edit photos#edit 写真編集用のHTMLフォームを1つ返す   PATCH/PUT /photos/:id photos#update 特定の写真を更新する   DELETE /photos/:id photos#destroy 特定の写真を削除する     ActiveAdminとEngineについてはまた今度。</description>
    </item>
    
    <item>
      <title>【DMM英会話】Requesting Materials | Business Basic</title>
      <link>http://kotazi.github.io/blog/post/2016/0106_dmm/</link>
      <pubDate>Thu, 07 Jan 2016 00:46:15 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0106_dmm/</guid>
      <description>DMM英会話のレッスン中。その日学んだことをメモ。
 Lesson 04: Requesting Materials | Business Basic   ◯ Practice 1 | Formal and Informal Expressions 割愛。

◯ Practice 2 | Reading Sentences 割愛。

◯ Practice 3 | Studying the Manual  Firstly, make sure that you have all the required permissions to get the materials. Find a person who is accountable for these materials. Explain to that person why you need the materials (if needed).</description>
    </item>
    
    <item>
      <title>【Rails】ForbiddenAttributesError覚書</title>
      <link>http://kotazi.github.io/blog/post/2016/0105_forbiddenattributeserror/</link>
      <pubDate>Wed, 06 Jan 2016 18:31:41 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0105_forbiddenattributeserror/</guid>
      <description>RailsでActiveModel::ForbiddenAttributesError:エラーが出た。
 マスアサインメント脆弱性 モデルオブジェクトのassign_attributesメソッドの引数にハッシュもしくはparamsオブジェクトを渡せば、 モデルオブジェクトの属性を一括変更できる。フォームから送信することも可能。
管理者などがパラメータを変更する分にはいいが、権限によっては書き換えてはならないパラメータもある。 けれども知識のある人間がスクリプト書けば悪用することができてしまう。
このアプリケーションの脆弱性をマスアサインメント脆弱性と呼ぶ。
そしてこの脆弱性に対してRails4.0から導入された対抗策が、Strong Parameters。
Strong Parameters サンプルコード:
def staff_member_params params.require(:staff_member).permit( :email, :password, :family_name, :given_name, :family_name_kana, :given_name_kana, :start_date, :end_date, :suspended ) end  params.require(:staff_member)
paramsオブジェクトのrequireメソッドで、paramsオブジェクトが:staff_memberというキーと持っているかを調べる。
=&amp;gt; 持っていなければActionController::ParameterMissingエラー</description>
    </item>
    
    <item>
      <title>【DMM英会話】Asking for Directions | Business Basic</title>
      <link>http://kotazi.github.io/blog/post/2016/0105_dmm/</link>
      <pubDate>Tue, 05 Jan 2016 16:41:09 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0105_dmm/</guid>
      <description>DMM英会話のレッスン中。その日学んだことをメモ。
 Lesson 03: Asking for Directions | Business Basic   ◯ Practice 1 | Formal and Informal Expressions 割愛。

◯ Practice 2 | Reading Sentences 割愛。

◯ Practice 3 | Studying the Manual 割愛。

◯ Practice 4 | Situation Questions   Your boss gave you a task via email and some details are unclear to you. What do you do?   I&amp;rsquo;ll get a few minutes from boss.</description>
    </item>
    
    <item>
      <title>【DMM英会話】Apologizing|Business Basic</title>
      <link>http://kotazi.github.io/blog/post/2016/0104_dmm/</link>
      <pubDate>Mon, 04 Jan 2016 16:41:09 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0104_dmm/</guid>
      <description>DMM英会話のレッスン中。その日学んだことをメモ。
 Lesson 02: Apologizing|Business Basic   ◯ Practice 1 | Formal and Informal Expressions 割愛。

◯ Practice 2 | Reading Sentences 割愛。

◯ Practice 3 | Studying the Manual  Correct timing. It is best to apologize as fast as you can, but no need to be impulsive. You needto prepare what to say. Wisely chosen means of communication. There are many ways to apologize: you can apologizein person, over the phone or write an apology letter.</description>
    </item>
    
    <item>
      <title>【DMM英会話】Self-Introduction|Business Basic</title>
      <link>http://kotazi.github.io/blog/post/2016/0103_dmm/</link>
      <pubDate>Sun, 03 Jan 2016 16:41:09 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0103_dmm/</guid>
      <description>DMM英会話のレッスン中。その日学んだことをメモ。
 Lesson 01: Self-Introduction|Business Basic   ◯ Practice 1 | Formal and Informal Expressions 割愛。

◯ Practice 2 | Reading Sentences   What type of language is used in each of the two examples? Formal or informal?   In introduction 1 is formal, and introduction 2 is informal.
  How is Patrick Clover trying to build rapport with the person he addresses himself to in the first introduction?</description>
    </item>
    
    <item>
      <title>【読書】アジャイルサムライを読んで</title>
      <link>http://kotazi.github.io/blog/post/2016/0103_ajail/</link>
      <pubDate>Sun, 03 Jan 2016 12:53:46 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0103_ajail/</guid>
      <description>アジャイルサムライ−達人開発者への道−を読んだ。その感想や学んだこと。
 Ⅰ部とⅡ部については別記事でまとめました。
 【第Ⅰ部】「アジャイル」入門/アジャイルサムライ 【第Ⅱ部】アジャイルな方向づけ/アジャイルサムライ   第Ⅲ部 アジャイルな計画づくり  ユーザーストーリーを作成する INVEST: 「Independent/Negotiable/Valuable/Estimatable/Small/Testable」 ポイントで見積もるのは再調整する作業がいつまでも終わらなくなる状況に陥るのを防ぐため アジャイルな計画ができれば、プロジェクト計画は常に最新であることが分かるようになる アジャイルな計画づくりとは、チームの開発速度を計測して、その速度を元にプロジェクトの完了時期を見通せるようにすること プロジェクトでこなすべきTODOリストを「マスターストーリーリスト」と呼ぶ チームがユーザーストーリーを動くソフトウェアに変換する速度を「ベロシティ」と呼ぶ アジャイルでは最初に立てた計画にはいつまでもこだわらない。計画の方を変える(普通はスコープを調整) 予めスコープを柔軟にしておくことが計画を誠実に保つ秘訣 「最後は良くなりますように」というのは、「奇跡によるマネジメント」という有名なマネジメント手法 リリースの単位をMMF(Minimal Marketable Feature Set)と呼ぶ ベロシティはチームで測る。個人の生産性を測るのは悪い方向へ転ぶ  
◯ バーンダウンチャートを利用することで可視化できる4つ  どれだけの仕事を完成させたのか どれだけの仕事が残っているのか チームのベロシティ いつごろ全てを完了させられそうか  
◯ プロジェクトを途中からアジャイルにする前に、チームメンバーが応えられるべき5つの質問  このプロジェクトにいるのは何故？ 成し遂げようとしていることは何？ 顧客は誰？ 解決すべき主要な課題は何？ 最終判断を下すのは誰？  
アジャイルな見積もりについて。ベロシティやバーンダウンチャートという考え方を使ってチームの生産性やゴールまでの距離を明確にする。アジャイルにとって重要なことのひとつは誠実であり、明確であること。チームメンバー一人一人が自分たちのゴールやゴールまでの距離を知れるような手引をしたり、環境を整えたりすることがアジャイルなチームを作る上で重要。
Ⅳ部 アジャイルなプロジェクト運営  何もかもを文書にまとめる時間はない 開発プラクティスをしっかりと根付かせる テストは開発と一緒になって進める そのために必要なことが3つ  分析して設計する(作業の段取りをする) 開発する(実際に作業する) テストする(作業の結果を確認する)   
◯ アジャイルな意思疎通の作戦  開発チームは同じ職場に集まって作業して、ちゃんと動くソフトウェアお成果として、目の前の顧客に定期的に見せていく 「期待をマネジメントすること」「フィードバックを得ること」これはどんなアジャイルプロジェクトでも取り組むべき そのためにイテレーションごとに習慣づけるべき4つのミーティング  今回のイテレーション作業に備える(ストーリー計画MTG) 今回のイテレーションのフィードバックを得る(ショーケース) 次回のイテレーション計画を立てる(イテレーション計画MTG) 次回のイテレーションで改善できる余地を探す(ミニ振り返り)  そして自分たちにあったものを選ぶことが大事</description>
    </item>
    
    <item>
      <title>【訳読】Datatablesの初期化エラー</title>
      <link>http://kotazi.github.io/blog/post/20151229_datatables/</link>
      <pubDate>Sat, 02 Jan 2016 17:58:27 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/20151229_datatables/</guid>
      <description>http://datatables.net/manual/tech-notes/3
Datatablesのエラー訳してみた。
 DataTablesではテーブルをカスタマイズする広範囲のオプションを初期化時に設定することができます。これは初期化の時のみなので、それ以降にこのようなオプションを設定しようとするとエラーが出てしまいます。
意義 単純に、DataTablesでは初期化時に設定したオプションを後から変更することができないということです。どんな操作をしたとしても、既にAPIを通して初期化されてしまった後ではエラーが発生します。
DataTables warning: table id={id} - Cannot reinitialise DataTable.  {id}の部分はエラーを引き起こしたDOMのidで置き換えられます。
分析 このエラーはDataTablesが選択したノードにおいて既に初期化している際に、DataTablesのコンストラクタオブジェクトを呼び出すと発生しいます。下記がサンプルになります。
$(&#39;#example&#39;).dataTable( { paging: false } ); $(&#39;#example&#39;).dataTable( { searching: false } );  #exampleは既にDataTableとして初期化されているので、2つ目のコードブロックが実行されるときにエラーが発生します。
解法 このエラーを再現するにはいくつかの方法があります。なのでこのイシューを解決するためにいくつかの方法が使われます。
シングル初期化 複数のDataTablesの初期化を行いたいのであれば、単に同じものを設定してください。サンプルでは、ページングと検索を消しました。
$(&#39;#example&#39;).dataTable( { paging: false, searching: false } );  より詳しく知るためには、こちらのマニュアルを参考にしてください。
オブジェクトインスタンス検索 APIを通してDataTableの活動の参照を得ようとた時にこのエラーはしばしば起こります。 例えば、もしあなたがDataTableインスタンスを作成する関数を持っていたとしましょう。これに変更を加えようとするとエラーが出てしまいます。 この要な場合、$.fn.dataTable.isDataTable()を利用して、DataTableが既に存在するか確認しましょう。
if ( $.fn.dataTable.isDataTable( &#39;#example&#39; ) ) { table = $(&#39;#example&#39;).DataTable(); } else { table = $(&#39;#example&#39;).DataTable( { paging: false } ); }  retrieve 上記サンプルのコートは魅力的ではありません。retrieveオプションを使って、DataTablesにあなたが初期化後にオプションを変更できないことを知っていると伝えましょう。 このオプションは$.</description>
    </item>
    
    <item>
      <title>【第Ⅱ部】アジャイルな方向づけ/アジャイルサムライ</title>
      <link>http://kotazi.github.io/blog/post/20151228_ajail/</link>
      <pubDate>Mon, 28 Dec 2015 12:57:23 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/20151228_ajail/</guid>
      <description>3. みんなをバスに乗せる ◯ スタートする前からダメになるプロジェクト  答えるべき問に答えれらない 手強い質問をする勇気を持てない  プロジェクトに対する期待をマネジメントするための優れたツールがインセプションデッキ。聞かなきゃいけない10の課題で構成されている。
チームメンバーがいないところで合意したことを全体にしているから、プロジェクトはだめになる。
 ゴールやビジョン、プロジェクトの状況や背景についてチームで話し合っておくこと。チームで適切な判断を下せるように ステークホルダーに情報を提供すること。彼らにはプロジェクトを続けるかどうかを決断する材料が必要。  インセプションデッキの背後にある考え方は、「しかるべき人をみんな同じ部屋に集めて、プロジェクトにまつわる適切な質問をすれば、自分たちのプロジェクトに対する期待を共有して、認識を合わせることができるはずだ」である。このプロジェクトは何であって何でないのか、価値を届けるためにはどこで力を注ぐべきか。
◯ インセプションデッキ一覧 1.我々は何故ここにいるのか
2.エレベーターピッチを作る =&amp;gt; 2センテンスで説明する
3.やらないことリストを作る
4.「ご近所さん」を探せ =&amp;gt; 関係者は思ったよりいるもの
5.解決策を描く
6.パッケージデザインを作る
7.夜も眠れなくなるような問題は何だろう
8.期間を見極める
9.何を諦めるかをはっきりさせる
10.何がどれだけ必要なのか
4. 全体像を捉える このプロジェクトの成功には何が必要なのかをハッキリ説明する。「皆さんに積極的にかかわっていただく必要があります。当事者意識を持っていただいたうえで、さまざまなお約束をしていただかなければならない。」
5. 具現化させる リスクを話し合うことはいいことだ。
◯ 何を諦めるのかをはっきりさせる プロジェクトの四天王 - 時間 - 予算 - 品質 - スコープ &amp;lt;= 諦めるとしたらこいつに限る
◯ インセプションデッキから学んだこと  プロジェクトの最初に手強い質問をすることの重要性 プロジェクトが始まる前にみんなの向かう先を揃える プロジェクトの契約までのスコープ設定や計画に何ヶ月もかける必要がない インセプションデッキを使えば数日で期待のマネジメントが可能   インセプションデッキを通して事前準備の重要性を感じた。
インセプションデッキ課題にあることを不明確なままにプロジェクトを進めたしまった場合に、 のちのち躓いてしまった時に取り返しがつかなくなることが容易に想像できる。</description>
    </item>
    
    <item>
      <title>【第Ⅰ部】「アジャイル」入門/アジャイルサムライ</title>
      <link>http://kotazi.github.io/blog/post/20151227_ajail/</link>
      <pubDate>Sun, 27 Dec 2015 12:57:23 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/20151227_ajail/</guid>
      <description>1. ざっくり分かるアジャイル開発 1.大きな問題は小さくする
2.本当に大事なことに集中して、それ以外のことは忘れる
3.ちゃんと動くソフトウェアを届ける
4.フィードバックを求める
5.必要とあれば進路を変える
6.成果責任を果たす
 仕事の質に責任を持たなければならない スケジュールを守らなければならない お客さんの期待をマネジメントしなければならない 身銭を切るかのような覚悟でお客さんの資金を扱えわなければならない  アジャイル開発では、「マスターストーリーリスト」がプロジェクトのTodoリスト。(featureの記述レベルは概要が分かれば十分。)
具体的に成果を上げていくためのエンジンとなるのがイテレーション。イテレーションの長さは1〜2習慣にする。
ベロシティ(1回のイテレーションで完了させられるストーリーの量)を実調することで、自分たちのこなせる仕事量を把握できる。
アジャイル手法では奇跡は必要なくなる。なぜなら顧客に隠し立てせずに誠実に仕事を進めるから。
◯ アジャイル手法  スクラム: アジャイルプロジェクトを包んで、プロジェクトマネジメントの装いを与えてくれる運営手法 エクストリーム・プログラミング: どんなアジャイルプロジェクトにも欠かせないソフトウェア開発のプラクティスを規律正しく実践する手法 リーン: 能率を上げることをとことん追い求める。たゆまぬ改善を続ける企業のためのトヨタ生産方式  2. アジャイルチームのご紹介 典型的なアジャイルチームには、予め決まった役割分担が存在しない。チームが一丸となって成果責任を果たすという考え方をとても重要視する。
「チームの生産性を劇的に改善できる方法をひとつだけ挙げろ」と聞かれたら、間違いなくそれは、全員が同じ仕事場に集まって働くこと。
同じ場所で働けないなら、プロジェクトの予算に全員分の旅費を予算に入れる。
顧客はチームのコアメンバーであり、スクラムではプロダクトオーナーという専任の役割を与える。
チームビルドをうまくするためには、役割に人を合わせるのではなく、人に合わせて役割分担を決める。
アジャイルなプロジェクトマネージャはプロジェクトを成功させる唯一の方法は開発チームを成功させることだと心得ている。 優れたPMの条件は一週間いなくなっても業務に支障が出ないようにできること。
 アジャイルの用語や基本的な考え方。</description>
    </item>
    
    <item>
      <title>ドラッカーから考えるプロダクトマネジャーの仕事</title>
      <link>http://kotazi.github.io/blog/post/20151224_management/</link>
      <pubDate>Fri, 25 Dec 2015 16:38:36 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/20151224_management/</guid>
      <description>この記事はProduct Manager Advent Calendar 2015の25日目の記事です。
こんにちは、kotazi(コタジ)です。
Shuttlerock Japanに入社して1年が経ちました。普段はエンジニアをしていますが、組織の抱える課題に対し、エンジニア的アプローチでは解決できないものもあると感じ、「マネジメント〜基本と原則〜」をkindleで購入しました。
その時のメモ書きを公開します。
 【第1章】企業の成果/基本と原則 【第2章】公的機関の成果/基本と原則 【第3章】仕事と人間/基本と原則 【第4章】社会的責任/基本と原則 【第5章】マネジャー/基本と原則 【第6章】マネジメントの技能/基本と原則 【第7章】マネジメントの組織/基本と原則 【第8章】トップマネジメント/基本と原則 【第9章】マネジメントの戦略/基本と原則  
ドラッカーの基本と原則の中でマネジャーは「組織の成果に責任を持つ者」として定義されています。 またマネジャーには２つの役割があり、「投入した資源の総和よりも大きなものを生み出す生産体を創造すること」、「決定と行動において、ただちに必要とされているものと遠い将来に必要とされているものを調和させていくこと」です。
こういったマネジメントの基本と原則についての考えは、プロダクトマネジメントやプロダクトマネジャーの仕事をしていくうえで応用ができるはずです。
マネジメントの役割も下記のように述べられています。
1.組織本来の使命を果たすべくマネジメントすること
2.生産的な仕事を通じて人に成果を上げさせること
3.社会と個人に生活の質を提供すること
チーム本来の使命を再確認し、個々の働きがいや自己実現と真摯に向き合い、顧客により良いものを提供できるようなプロダクトマネジメントを行い、それに対し責任を持って成果で応えられるようなプロダクトマネジャーを目指してみてはいかがでしょうか。</description>
    </item>
    
    <item>
      <title>【第9章】マネジメントの戦略/基本と原則</title>
      <link>http://kotazi.github.io/blog/post/20151224_management2/</link>
      <pubDate>Thu, 24 Dec 2015 12:57:23 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/20151224_management2/</guid>
      <description>学生のころは分からなかったことが分かる気がした。
ドラッカーの基本と原則をKidleで読みなおした。
 40. 規模のマネジメント 規模は戦略に影響をおよぼす。また戦略も規模に影響をおよぼす。 適切な規模を知るためには、従業員数、売上高、付加価値、製品、市場、技術、産業構造を見なければならない。
小企業のマネジメント
小企業は戦略を必要とする。
① 「われわれの事業は何か。何であるべきか。」に答える
② トップマネジメントの役割を組織化する
中企業のマネジメント
多くの点で理想的な規模。マネジメントが最も容易になる。
大企業のマネジメント
人間を個人的に知ることができない。フォーマルな組織構造を適切に創りあげなければならない。
規模が不適切だった場合
① 事業の性格を変える
② 合併と買収
③ 売却、切り捨て、縮小
また、規模についての問題は組織の内部ではなく、マネジメントの限界でもない。 地域社会に対して大きくなりすぎることにある。
41. 多角化のマネジメント 多角化に成功する条件は、市場、技術、価値観の一致。
何かがうまくいかなくなると、全てが上手くいかなくなる。
42. グローバル化のマネジメント グローバル企業の出現は、今日自明とされている教義、すなわち国家が人間組織の自然単位であるとする教義と相容れないだけでない。それは、あらゆる組織が、究極的には国民国家の統治機関たる政府からその存在の法的基礎と合法性を得なければならないとする教義とも相容れない。
グローバル企業は、今日最も重要な経済的存在である。それは、グローバル経済という新しい現実を反映した存在であるがゆえに重要である。資源の最適化のもっとも有効な機関であるがゆえに重要である。
43. 成長のマネジメント 成長は自動的には起こらない。事業の成功によって、自動的にもたらされるものではない。成長は不連続である。成長のためにはある段階で自らを変えなければならない。 成長には戦略が必要である、準備が必要である。なりたいと思うことに焦点を合わせた行動が必要である。トップに変革の意識がなければ、いずれも無駄になる。
長期に渡る高度の成長は不可能であり、不健全である。あまりに急速な成長は組織を脆弱化する。マネジメントを不可能にする。緊張、弱点、欠陥をもたらす。 成長そのものを目標にすることはまちがいである、大きくなる事自体に価値はない。よい企業になることが正しい目標である。成長そのものは虚栄でしか無い。
成長への準備
成長の機会はいつ起きるか分からない。準備が必要である。準備ができていなければ機会を逃すことになる。
① 基本活動を明らかにし、それらの活動に取り組むべきトップマネジメントチームを編成する
② 変化すべき時を知るために、方針と行動の変化を要求する兆候に注意する
③ 心底変化を望んでいるかを正直に判断する
44. イノベーション これからのイノベーションは19世紀のそれとは著しく異なり、既存の組織において行わなければならない。企業や公的機関は、既存のもののためだけではなく、イノベーションのために自らを組織する能力が必要。
イノベーションを行う組織の特徴
① イノベーションの意味を知っている
② イノベーションの力学を知っている
③ イノベーションの戦略を持っている
④ 管理的な目標や基準とは別に、イノベーションのための目標と基準の必要を知っている
⑤ マネジメント、特にトップマネジメントの果たす役割と姿勢が違う
⑥ イノベーションのための活動を、管理的な活動のための組織から独立して組織している。
イノベーションは常に市場に焦点を合わせなければならない
トップマネジメントたるものは、アイディアを正面からとりあげることを自らの職務としなければならない。優れたアイディアとは常に非現実的であることをしらなければならない。優れたアイディアを手にするには、多くの馬鹿げたアイディアが必要であり、両者を簡単に識別する手立てのないことを知らなければならない。いずれも、実現性のない馬鹿げたものに見え、同時に素晴らしい物にも見える。
イノベーションのための仕事は、独立した部門に任せなければならない。イノベーションは、機能としてではなく、事業として組織する必要がある。新しいことに取り組むことが決定したならば、直ちにプロジェクト・マネジャーを任命しなければならない。
45. マネジメントの正当性 われわれの社会は組織社会になった。現代社会の主な課題はすべて組織によって遂行されている。しかも、ほとんどの人が組織で働いている。</description>
    </item>
    
    <item>
      <title>【第8章】トップマネジメント/基本と原則</title>
      <link>http://kotazi.github.io/blog/post/20151223_management/</link>
      <pubDate>Wed, 23 Dec 2015 12:57:23 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/20151223_management/</guid>
      <description>学生のころは分からなかったことが分かる気がした。
ドラッカーの基本と原則をKidleで読みなおした。
 36. ドイツ銀行物語 トップマネジメントを確立したのは、ゲオルグ・シーメンス。 ドイツ銀行を最強の金融機関にした。
① トップマネジメントは、事業全体を見ることができ、全体を考えた意思決定を行えるもののみが果たしうる課題
② トップマネジメントには独自の構造が必要
③ トップマネジメントには独自のインプット機関が必要
37. トップマネジメントの役割 ① トップマネジメントには事業の目的を考えるという役割
② 基準を設定する役割、すなわち組織全体の規範を定める役割
③ 組織を作り上げ、それを維持する役割
④ トップの座にあるものだけの仕事として、渉外の役割
⑤ 行事や夕食会への出席など、儀礼的な役割
⑥ 重大な危機に関しては、自ら出動する役割
これらを行うために下記の性格が必要。併せ持つヒトは少ない。
「考える人」、「行動する人」、「人間的な人」、「表に立つ人」。
35. トップマネジメントの構造 トップマネジメントは一人ではなくチームによる仕事。
要求される役割がさまざまであり、量もおおいため。
ワンマンにならないために、トップマネジメントのひとつをメンバーに直接的かつ優先的に割り当てるようにする。
チームワークを機能させるために
① メンバーはそれぞれの担当分野において最終的な決定権を持つ
② メンバーは自らの担当する分野以外の意思決定を行ってはならない
③ 仲良くする必要はない
④ トップマネジメントは委員会ではない。チームであり、キャプテンがいる。
⑤ 自らの担当分野では意思決定を行わなければならない。
⑥ トップマネジメントの仕事は、意思の疎通に精力的に取り組むことを要求する
39. 取締役会 トップマネジメントを監督し、助言し、意思決定を審査する機関。
あらゆる国にあるがどれも機能を果たしていない。トップマネジメントが完全に支配しているのであれば、消滅すべき。
取締役会の3つの機能
① 審査するための機関 ② 成果を上げられないトップマネジメントを交代する ③ 渉外のための機関
 トップマネジメントについての役割は概ねその通りだと思う。 チームワークを機能させるための条件をメンバー内で共通認識として持たせられるようにしたい。</description>
    </item>
    
    <item>
      <title>【AngularJS×InstaAPI】Ohshimagramを作ってみた</title>
      <link>http://kotazi.github.io/blog/post/20151222_ohshima/</link>
      <pubDate>Tue, 22 Dec 2015 17:26:21 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/20151222_ohshima/</guid>
      <description>今年のGWの記事。
ブログを消したのでこの記事だけ復活。
概要 InstagramAPIを利用して#伊豆大島のついたものを引っ張ってくるAngularJSのサービスを作りました。
今更感が否めないのですが、いくつか改めて勉強し直したいことがあったので。
実装前に考えたことや、実装しながら学んだことを下記にまとめます。
ちなみに今回作成したサービスはこちら。
 ohshimagram  ■ はじめに考えたこと ▼ 開発期間 4&amp;frasl;20(月)〜4/27(月)の空き時間。と伊豆大島旅行中に締め。
▼ 実装する機能  Instagram画像の収集をする Instagramに認証する いいね/コメントをユーザーが行えるようにする  ▼ 使いたいもの/やりたいこと  AngularJS ES6 =&amp;gt; 諦めた CoffeeScript BootStrap Gulp InstagramAPI UI-Router JSDoc =&amp;gt; やめた Masonry Angular-local-storage bootflat slim $resource 単体テスト E2Eテスト =&amp;gt; 1割程度 ngInfiniteScroll  ▼ 意識すること  一週間以内に制作すること できたものを公開すること テストコードを書くこと 後に学びをまとめること とにかくスピードを重視 SourceTreeを使わない =&amp;gt; けっこう使った  ▼ 参考にしたいURL  Instagram APIでwebサービスを作りたい全ての人に向けて書きました Instagram API (日本語訳) Instagram API   実装中のメモ ■ プロジェクトの作成 ▼ プロジェクトを作成する 下記の記事を参考にyomanのジェネレータを探す。</description>
    </item>
    
    <item>
      <title>【第7章】マネジメントの組織/基本と原則</title>
      <link>http://kotazi.github.io/blog/post/20151221_managemant/</link>
      <pubDate>Sat, 19 Dec 2015 12:57:23 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/20151221_managemant/</guid>
      <description>学生のころは分からなかったことが分かる気がした。
ドラッカーの基本と原則をKidleで読みなおした。
 31. 新しいニーズ アンリフェヨールは、単一製品のメーカーにについて答えを与えた。 GMのアルフレッド・P・スローン・ジュニアは複雑かつ大規模なメーカーの組織について答えを与えた。
フェヨールから学んだことは、
① 組織構造は自ずから進化していくものではない
② 組織構造の設計は最初に手を付けるべきものではなく、最後に手を付けるべきもの
③ 構造は戦略に従う。組織構造は組織が目的を達成するための手段である、組織構造に取り組むには、目的と戦略から考えなければならない。
戦略とは、「われわれの事業は何か、何になるか、何であるべきか」との問いへの答えである。
自由型組織とは、特定の課題のための組織、特に小規模のグループのことである。チームメンバーに対して、厳しく自己規律を要求する。全員がチームの仕事をしなければならない。チーム全体の成果に責任を持たなければならない。
32. 組織の基本単位 4つの問題。
① 何を組織の単位とするか。
② 何を一緒にするか。何を分離するか。
③ いかなる大きさと形にするか。
④ いかなる位置づけを行い、いかなる関係を持たせるか。
活動分析
① 組織構造の設計は、「組織の目的を達成するには、いかなる分野において卓越性が必要か」との問いに答えることから始まる。
② 同時に、「いかなる分野において成果が上がらないとき、致命的な損害を被るか、いかなる分野に最大の弱点を見るか」という問いへの答えも必要
③ 「本当に重要な価値は何か」に答えることも必要。
「成果を手にするにはいかなる種類の意思決定が必要か」、「それらの意思決定をいかなるレベルで行うか」、「いかなる活動がそれらの意思決定によって影響を受けるか」。したがって、「いかなる部おｍんのマネジャーが、いかなる意思決定に参加し、相談を受け、あるいは意思決定の結果を知らなければならないか」。これらの問いへの答えが組織における仕事の位置づけをなす。
組織内の意思決定の4つの分類
① 影響する時間の長さによって分類する
② 他の部門や他の分野、あるいは組織全体に与える影響の度合いによって分類する
③ 考慮にいれるべき定性的要素の数によって分類する
④ 問題が繰り返し出てくるか、まれにしか出てこないかによって分類する
組織構造設計の最終段階は、活動相互間の関係の分析。「どこの誰から、いかなる種類の貢献を受けることができるか」
完璧な組織などありえないが、欠陥のある組織ではマネジメンのとの階層が増加しがち。そして組織の構造に関わる問題が頻繁に発生するようになる。ヒトの気持ちを気にしなければならない状態は最悪の人間関係。
33. 組織の条件 いかなる組織においても持つべき条件について。
① 明快さ
② 経済性
③ 方向付けの容易さ
=&amp;gt; 努力ではなく成果に向けさせる
④ 理解の容易さ
=&amp;gt; あらゆる人間が与えられた仕事を容易にできるようになっていなければならない
⑤ 意思決定の容易さ
⑥ 安定性と適応性
⑦ 永続性と新陳代謝
34. ５つの組織構造 職能別組織</description>
    </item>
    
    <item>
      <title>クローラとリファラースパム覚書</title>
      <link>http://kotazi.github.io/blog/post/20151222_referer_spam/</link>
      <pubDate>Fri, 18 Dec 2015 19:40:35 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/20151222_referer_spam/</guid>
      <description>404へのアクセスが多いと言われたので調べてみたこと。
 クローラのこと  クローラーとは／検索エンジンの仕組みをおさらい。クローラー対策とステータスコード|エンジニアのためのSEO入門
 クローラーとは？検索エンジンの仕組みを解説！【初心者向け】|ネットビジネスで自由な人生を描くライフスタイルデザイナーノジーのブログ。
  リファラースパムのこと  リファラースパムとは-スパムURL一覧表（103個）＋対処法 Referer spam - Wikipedia, the free encyclopedia  その他のこと Googleアナリティクスの設定からロボットやスパイダーからのヒットを除外できる。
 Google Analyticsでクローラーのトラフィックを除外する方法|Blogger-customize.com   リファラスパムの目的はアクセス解析している人間をWebサイトに誘い込むこと。 アクセスを目的としている場合もあれば、アフィサイトに飛ばされることもある。 同時にアクセス解析も正しくできなくなるというデメリットも被ることになる。
スパムクローラーみたいにも呼ばれるのかな？
GoogleAnalyticsでは設定からこれらを除外することができるようになっている。 何故デフォルトでなっていないかといえば、そもそもアクセス解析ができて当初の目的は、 サーバー負荷の計測にあったらしい。そのため、サーバー負荷という観点ではスパムからの アクセスも同様に計上するべきという考えらしい。</description>
    </item>
    
    <item>
      <title>Sketch3を始める前に読むべき記事6選</title>
      <link>http://kotazi.github.io/blog/post/20151218_sketch/</link>
      <pubDate>Thu, 17 Dec 2015 18:53:29 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/20151218_sketch/</guid>
      <description> AdobeCreativeCloudを会社で利用しようとしたら断られてしまった。
基本的なAdobeツールの使い方を理解している人間が最速でSketchを使いこなすために。
 基本説明・充実系  Sketch 3 Book for Beginner  まずはこれに目を通すこと。
 アプリUI制作のチュートリアルで学ぶSketchの使い方|ASCII.jp  シンプルなチュートリアルで基本的な使い方を理解できる。
ショートカット系  Sketch 3のページ・レイヤーを自在に操るショートカット|whiskers  レイヤー操作のショートカット記事。細かい操作を物にするには必須。
 Sketch 3を使いこなすためリンクやメモ|whiskers  ショートカット知れるし、こういう機能があるんだということも知れる良い記事。
TIPS系  Sketchの使い方: 初心者がマスターしておきたいSketchでのデザイン作業がぐっと効率的になるチップス|coliss  実践的でいい。
おすすめプラグイン系  Sketchを更に便利にパワーアップするプラグインのまとめ|coliss  </description>
    </item>
    
    <item>
      <title>1つのページに2つのFacebookAppIdをセットした時</title>
      <link>http://kotazi.github.io/blog/post/20151215_fb_app_id/</link>
      <pubDate>Wed, 16 Dec 2015 09:38:38 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/20151215_fb_app_id/</guid>
      <description> FacebookのApp IDを一つのページにセットした時のこと。
 sdk.jsで初期化処理に一つのappIDしかセットすることができない。 ２回初期化すれば最後に初期化した時のappIdが使われる。
参考 </description>
    </item>
    
    <item>
      <title>手っ取り早くiPhoneからMacのローカルホストを確認する方法</title>
      <link>http://kotazi.github.io/blog/post/20151214_iphone_localhost/</link>
      <pubDate>Mon, 14 Dec 2015 16:41:10 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/20151214_iphone_localhost/</guid>
      <description> iPhoneでローカル開発環境をかくにんしたいなと思うけれど、 Charlesを使う方法だったり、ごちゃごちゃさせたり、いろいろ方法がある。 今回はMacとiPhoneで同じWi-Fiに接続できる際に一番手っ取り早い方法。
 前提条件としてiPhoneとMacが同じWi-Fiに接続されているものとします。
◯ Macのipアドレスを確認する ターミナル上でifconfigと入力して確認する。
ifconfig内の見方についてはここ。
 ifconfig　～（IP）ネットワーク環境の確認／設定を行う  各インターフェイスの役割については下記が参考になる。
 ターミナルからプライベートIPアドレスとMACアドレス、ルーティングテーブルを確認する  またifconfigでの確認ができなければ、システム環境設定のネットワークから確認が可能。
◯ iPhone側の設定 自分のMacのIPアドレスと確認し、iPhoneのWi-Fi設定を開く。 HTTPプロキシから手動を選択し、MacのIPアドレスを入力する。
iPhone側で設定したIPを直接叩けばアクセスできる。 </description>
    </item>
    
    <item>
      <title>クライアントへのメールを返信を見ていて考えたこと</title>
      <link>http://kotazi.github.io/blog/post/20151211_mail/</link>
      <pubDate>Sun, 13 Dec 2015 14:50:41 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/20151211_mail/</guid>
      <description>社内のSM兼CSのメールの書き方や言葉の使い方をきっかけに、社内が少し揉めた。 対外的な問題へ発展したわけではないけれど、何故それが問題視されているのかを考えてみた。
 背景 なにか具体的で致命的なメールがあったわけではない。 メールの内容自体も間違っているわけではない。
質問に対しての回答に間違いはない。
けれども目を通してみると違和感が残る。
返信をもらったクライアントが満足しない印象を受ける。
クライアントは何を求めているか、SMは何を返すべきか   カスタマーサポートのことは嫌いでも、カスタマーサクセスは嫌いにならないでください  from Takaaki Umada 
サクセスマネージャーの最重要ミッションは顧客の成功にいち早く辿り着いてもらうことである。 クライアントが問い合わせがあるのは、基本的に何か問題があったり、困っている時。 サクセスマネージャーはそれに対し、適切に対応する必要がある。
今回のケースもクライアントは困っていた。
サクセスマネージャーにとってクライアントの満足度は重要視すべきこと。 メールでのお問い合わせでクライアントがサクセスマネージャーに求めていたことは、 質問に対するYes/Noの回答ではない。質問を通してサクセスマネージャーに困りごとを汲みとって欲しかったのだ。 そしてそのお困りごとを解決して欲しかった。
最後に この問題に対して、「このままでは会社の損害につながるから、言葉の使い方を直すべき」という声があった。(酒の場だけれども。) 結局、クライアントが求めていることは問題の解決であるため、言葉の使い方の定性は根本的な解決にはならない。
ただなったとしてもこの解決策は最後に選びたい。
ある程度の勉強などで身につくものであればいいが、話し方というのは長く体に染みついたものだ。
個性とも深く関わってくる。そういった部分を変えさせるような会社にはしてはいけない。
どうしてもお問い合わせメールが難しければ、
 ポジションを変えて別の人が対応する セールスが事前説明の部分に注意を払う WebでのFAQページを充実させる より直感的に分かるようUIを強化する  など、他にも策はある。
実際のところ今回の発言は個人を深く傷付けるところであったし、 そうなってしまったら内部のマネジメントが壊れかねない。
対外的なコミュニケーションも注意する必要はあるが、 内部のコミュニケーションも気をつけなければそれが会社の損害に繋がることもある。
と、いろいろ学ばせていただきました。 よりよいチームを作っていきましょう。</description>
    </item>
    
    <item>
      <title>【第6章】マネジメントの技能/基本と原則</title>
      <link>http://kotazi.github.io/blog/post/20151214_management/</link>
      <pubDate>Fri, 11 Dec 2015 12:57:23 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/20151214_management/</guid>
      <description>学生のころは分からなかったことが分かる気がした。
ドラッカーの基本と原則をKidleで読みなおした。
 27. 意思決定 「意思決定の力点をどこに置くか。」 日本に潰え見解の一致があるとすれば、それは合意(コンセンサス)によって意思決定を行っているという点。 欧米では、意思決定の力点は、問題に対する答えに置く。日本では、意思決定で重要なことは問題を明らかにすることである。 そもそも意思決定は必要か、、そもそも何についての意思決定かを明らかにすることが重要とされる。 この段階でのコンセンサスの形成に努力を惜しまない。この段階にこそ、意思決定の核心があるとする。
日本では、契約の必要を検討する段階で、契約締結度に関わりを持つことになる人達を巻き込んでおく。 関係者全員が意思決定の必要を認めた時、初めて決定が行われる。 この時ようやく交渉が始まり、その後の日本の行動は迅速である。
日本の意思決定のエッセンス ① 何についての意思決定かを決めることを重点に置く
② 反対意見を出やすくする。コンセンサスを得るまでの間、答えについての議論は行わない
③ 当然の解決策よりも複数の解決案を問題にする
④ いかなる地位の誰が決定すべきかを問題にする
⑤ 決定後の関係者への売り込みを不要にする。意思決定のプロセスの中に実地の方策を組み込む。
日本流の意思決定は独特のものである。日本社会特有の仕組みや組織の性格を前提とするのであって、どこでも使えるものではない。 だが、その基本は日本以外でも十分に通用する。それどことか、これこそ効果的な意思決定の基本である。
何についての意思決定かを明らかにするには、問題に対する見解からスタートしなければならない。 答えの違いをもたらす。したがって、どのような認識の仕方があるかを明らかにすることが、効果的な意思決定の第一歩となる。 まちがった問題に対する正しい答えほど、実りがないだけでなく害を与えるものはない。
意思決定は見解からスタートしなければならない。異なる見解を奨励しなければならない。 明らかに間違って結論に達しているものがいても、何か自分と違う現実を見、自分と違う問題に関心を持っているからに違いないと考えなければならない。
行動すべきか否か 常に「意思決定は必要か」を検討しなければならない。何もしないと事態が悪化するのであれば、 意思決定を行わなければならない。
① 行動によって得られるものが、コストやリスクよりも大きい時には行動する
② 行動するかしないかのいずれかにする。二股や妥協はいけない。
意思決定の実行 効果的な意思決定とは行動に対するコミットである。
意思決定の実行を効果的なものにするには、決定を実行する上でなんらかの行動を起こすべき者、逆に言えば決定の実行を妨げることのできる者全員を、決定の議論のなかに責任を持たせて参画させなければならない。これは民主主義ではない。セールスマンシップである。
フィードバッグの仕組み 実行からのフィードバッグがないかぎり、期待する成果を手に入れ続けることはできない。
第一に、意思決定の前提となった予測をはっきりさせること。
第二に、決定の結果について体系的にフィードバッグしなければならない。
第三に、このフィードバッグの死喰いを、決定を実行する前につくりあげておかなければならない。
大切なのは、問題への答えではなく、問題についての理解である。
効率的な行動をもたらすために、ビジョン、エネルギー、資源を総動員することである。
28. コミュニケーション ① コミュニケーションは知覚である
音波が発生しても、音を感じるものがいなければ、音はしない。 コミュニケーションは受けての言葉を使わなければ成立しない。 コニュニケーションを成立させるには、受け手が何を見ているのか知らなければならない。
② コミュニケーションは期待である
われわれは期待しているものだけを知覚する。期待しているものを見、期待しているものを聞く。 人の心は期待していないものを知覚することに対して抵抗する。 受け手が期待しているものを知ることなく、コミュニケーションを行うことはできない。
③ コミュニケーションは要求である
コミュニケーションは受け手に何かを要求する。 受け手が何かになること、何かをすること、何かを信じることを要求する。
④ コミュニケーションは情報ではない
コミュニケーションと情報は別物である。 コミュニケーションは知覚の対象であり、情報は論理の対象である。
29. 管理 組織における管理手段の三つの特性 ① 管理手段は純客観的でも純中立的でもありえない。</description>
    </item>
    
    <item>
      <title>いまいち忘れるjQuery</title>
      <link>http://kotazi.github.io/blog/post/20151210_jquery/</link>
      <pubDate>Thu, 10 Dec 2015 09:38:50 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/20151210_jquery/</guid>
      <description>なんだかjQueryの使い方ってそこそこに忘れる。 忘れるというか、それなりに検索をかけているなと。
そこで。
 jQuery日本語リファレンス  ヌーのサイトに一覧ページがあることを知った。
困ったときはここを見ればいいし、チートシートもある。
 jQuery Quick API Reference  wrapAll()とか初めて使ったけど便利だ。
ちなみに、createElement()みたいなメソッドはなくて、 普通に$(&#39;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&#39;)ってやって作るらしい。</description>
    </item>
    
    <item>
      <title>【第5章】マネジャー/基本と原則</title>
      <link>http://kotazi.github.io/blog/post/20151209_management/</link>
      <pubDate>Wed, 09 Dec 2015 12:57:23 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/20151209_management/</guid>
      <description>学生のころは分からなかったことが分かる気がした。
ドラッカーの基本と原則をKidleで読みなおした。
 20. マネジメントの必要性 マネジメントは企業の基礎資源である。
▼ 三菱の話 三菱の創業者、岩崎弥太郎(上野の岩崎邸の)は、オーナー兼起業家だけが権限と責任を持つべきであるとした。 岩崎は50歳でこの世を去り、岩崎家はマネジメントから外された。そこから三菱の新の興隆と成長が始まる。
企業がある一定の規模と複雑さに達するや、マネジメントを必要とする。 マネジメントチームという骨格が、オーナー兼企業かという皮膚と交代する。 それは皮膚が進化したものではない、完全な交替である。
複数人の人間が協力して、石を疎通させつつ多様な課題を同時に進行する必要が出てきた時、組織はマネジメントを必要とする。 マネジメントを書く時、組織は管理不能になり、計画は実行にされなくなる。 最悪の場合、計画の各部分が、それぞれ勝手なときに、勝手な速度で、勝手な目的と目標のもとに遂行されるようになる。 たとえ製品が優れ、従業員が有能でかつ献身的であっても、また、ボスがいかに偉大な力と魅力を持っていても、組織は、マネジメントという骨格を持つように変化しないかぎり、失敗を重ね、停滞し、坂を下り始める。
21. マネジャーとは何か かつては「人の仕事に責任を持つ者」と定義されたが、 懇意tに最も急速に増えているのが、「組織の成果に責任を持つ者」。これがマネジャーである。
従って今日、誰がマネジャーかを明らかにすることが緊急の課題になっている。 専門家が自らのアウトプットを他の人間の仕事と統合する上で頼りにすべき者がマネジャーである。
22. マネジャーの仕事 マネジャーには２つの役割がある。 ① 投入した資源の総和よりも大きなものを生み出す生産体を創造すること ② 決定と行動において、直ちに必要とされているものと遠い将来に必要とされるものを調和すること
あらゆるマネジャーに共通する仕事。
① 目標を設定する
② 組織する
③ 動機付けとコミュニケーションを図る
④ 評価測定をする
⑤ 人材を開発する
そして一番大切なのは「真摯さ」
マネジャーの仕事は次の４つの視点から設計する。
① マネジャーの仕事そのもの。これは継続的な職務。
② 個々のマネジャーに対し、組織や上司が設定する責任。
③ マネジャーの仕事は、上、下、横との関係によって規定される。
④ 必要とする情報とその情報の流れにおける彼の位置によって規定される。
そしてこれらについて考えることが最大の責任であり、この責任から逃れることはできない。
23. マネジメント開発 未来を予測することはう可能である。したがって、明日のマネジャー育成、確保、技能について体系的に取り組まなければならない。 マネジメント開発にあらざるもの。
① セミナーに参加することではない。
② 人事計画やエリート探しではない
③ 人の性格を変え、人を改造するためのものではない。
24. 自己管理による目標管理 人を間違った方向へ持っていく要因。 ① 技能の文化
「石切り工」の話。「生計を立てている」「最高の石切りの仕事」「教会を立てている」。第三の男がマネジャー。
② 組織の階級化</description>
    </item>
    
    <item>
      <title>【第4章】社会的責任/基本と原則</title>
      <link>http://kotazi.github.io/blog/post/20151208_management/</link>
      <pubDate>Tue, 08 Dec 2015 21:54:29 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/20151208_management/</guid>
      <description>学生のころは分からなかったことが分かる気がした。
ドラッカーの基本と原則をKidleで読みなおした。
 15. マネジメントと社会 「企業の社会的責任」の意味が変わった。 かつては下記の三つの分野。
① 私的な倫理と公的な倫理との関係に関わる問題。
② 働くものに対する責任に関わる問題
③ 地域社会への貢献という意味での責任に関わる問題
こんにちは、社会の問題に取り組み解決するために、企業は何を行い、何を行うべきか。 人種差別や環境問題といったものの解決に向けて行いうる貢献に重点が置かれる。
16. 社会的責任はどこに産まれるか 社会的責任の問題は、
① 自らの活動が社会に対して与える影響から生ずる。
② 自らの活動とはかかわりなく社会自体の問題として生ずる。
社会的影響範囲の問題を解決するにはトレードオフが必要である。 社会の問題は、社会の機能不全であり、社会を退化させる病である。 が、それは組織、企業にとっては挑戦であり、機会の源泉である。 (フォードは賃金引き上げで総労働コストの削減をし、アメリカの産業社会を変えた。)
企業が健康であるためには、健全な、少なくとも機能する社会が必要である。社会と地域の健全さこそ、企業が成功し成長するための前提である。
17. 社会的責任の限界 マネジメントにとっての最大の役割は、自らの組織に対するものである。 マネジメントは、事業上のリスクを負い、将来の活動に着手する上で必要な利益の最低限度というものを知って置かなければならない。意思決定を行う上で、この限度を知らなければならない。
能力と価値観に寄る限界。 自らに能力のない仕事を引き受けることも、無責任である。また、自らの価値体系に合致しない課題に取り組むことを避けなければならない。 したがって、マネジメントは少なくとも、自らと自らの組織にとって欠けている能力が何であるかを知る必要がある。
責任と権限は、同一のものの両面である。 企業が責任を要求されたときは、必ずそれについて「責任を持っているか、持つべきか」を自問する必要がある。
最大の社会的責任とは、自らに特有の機能を果たすことである。 最大の無責任とは、能力を超えた課題に取り組み、あるいは社会的責任の名のもとに他から権限を奪うことによって、自らに特有の機能を遂行するための能力を損なうことである。
18. 企業と政府 社会的責任に関わる重大な問題のひとつとして、政府との関係がある。 組織社会の現実とニーズに応じた新しい政治理論を必要としているが、今のところはまだない。 ただ、それらの中間的な解決策を考え、実行について監視することはマネジメントの仕事である。
歴史上のモデル。 資本主義経済すなわち市場経済における政府と企業の関係を表すモデルとして、自由放任(レッセフェール)を説いている。が、現実には19性器のイギリスで短い期間に行われたもの。
政府と企業の関係を律してきたのは２つの政治モデル。
 重商主義(マーカンティズム): 企業人は完了に比べて社会的に劣る =&amp;gt; 「企業は〜〜しろ」 立憲主義(コンスティテューショナリズム): 基本的に政府と企業は対立関係 =&amp;gt; 「企業は〜〜するなかれ」  今日、立憲主義も重商主義も陳腐化した。
モデルが無くなった今、満たすべき基準
① 企業とそのマネジメントを、自立した責任のある存在にする
② 変化を可能とする自由で柔軟な社会
③ グローバル経済と国家の政治主権とを調和する
④ 機能を果たす強力な政府を維持強化する
プロフェッショナルの倫理 企業倫理や企業人の倫理。正直であるとか美意識であるとか。
リーダー的地位にあるものの責任。 彼らは本質的にはプロフェッショナルである。 つまり、ある身分、地位、卓越性、権限が与えられているということでもある。 同時に、義務も与えられている。</description>
    </item>
    
    <item>
      <title>Ruby - pry導入編</title>
      <link>http://kotazi.github.io/blog/post/20151207_pry/</link>
      <pubDate>Mon, 07 Dec 2015 17:48:50 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/20151207_pry/</guid>
      <description>Railsのデバッグについて調べていた。
pryを知った。便利そうだったことメモ書き。
 Pryとは PryはRuby標準的なIRBシェルの強力な代替手段です。 シンタックスハイライトや、フレキシブルなプラグインアーキテクチャ、実行時の呼び出しやドキュメントの閲覧を備えています。
インストール $ gem install pry pry-doc $ pry  .ls, .pwdなどでShellコマンドを呼び出せる。
Railsプロジェクトに組み込む RailsプロジェクトにPryを入れて、ブレークポイントやステップ実行が行えるようにした。
Gemfileを編集(参考:Railsの開発効率をあげる - Pryを使ってRailsのコンソールをパワーアップ &amp;amp; デバッグをする)
group :development, :test do gem &#39;pry-rails&#39;, &#39;~&amp;gt; 0.3.4&#39; # rails console(もしくは、rails c)でirbの代わりにpryを使われる gem &#39;pry-doc&#39;, &#39;~&amp;gt; 0.8.0&#39; # methodを表示 gem &#39;pry-byebug&#39;, &#39;~&amp;gt; 3.3.0&#39; # デバッグを実施(Ruby 2.0以降で動作する) gem &#39;pry-stack_explorer&#39;, &#39;~&amp;gt; 0.4.9.2&#39; # スタックをたどれる end  ■ モデル確認 [12] pry(main)&amp;gt; show-models Administrator id: integer email: string email_for_index: string hashed_password: string suspended: boolean created_at: datetime updated_at: datetime StaffMember id: integer email: string email_for_index: string family_name: string given_name: string family_name_kana: string given_name_kana: string hashed_password: string start_date: date end_date: date suspended: boolean created_at: datetime updated_at: datetime  ■ ルート確認 [13] pry(main)&amp;gt; show-routes Prefix Verb URI Pattern Controller#Action staff_root GET /staff(.</description>
    </item>
    
    <item>
      <title>【第3章】仕事と人間/基本と原則</title>
      <link>http://kotazi.github.io/blog/post/20151202/</link>
      <pubDate>Thu, 03 Dec 2015 16:38:36 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/20151202/</guid>
      <description>学生のころは分からなかったことが分かる気がした。
ドラッカーの基本と原則をKidleで読みなおした。
 9. 新しい真実 今日の社会は被雇用者社会である。 一世紀前までは小さな集団で働き、仕事は家を中心に行っていた。 今日、知識労働は複雑な大組織において行われている。知識労働のほとんどは、その生産性を測定することはもちろん、定義することさえ難しい。 かくして、仕事と人のマネジメントにおいて、３つの挑戦に直面している。
① 被雇用者社会の到来 ② 肉体労働者の心理的、社会的変化 ③ 脱工業化社会における心理的、社会的センターとしての知識労働、知識労働者の台頭
つまり、昨今のマネジメントはいままでの社会のマネジメントとは一味違う。
10. 仕事と労働 先進国の生活水準を引き上げたのはテイラーの科学的管理法。
仕事と労働は異なる。 仕事の生産性を上げるうえで必要なもの、人が生き生きと働くうえで必要なものは違う。 双方をマネジメントする必要があり、どちらかがダメであれば失敗。
仕事は一般的かつ客観的な存在であり、分析と統合と管理の対象になる。
①分析。基本的な作業を明らかにし、論理的な順序に並べる ②プロセスへの統合。個々の作業を1人の仕事へ、1人の仕事を生産プロセスへ組み込む。 ③管理。偏差を感知し、プロセスの変更の必要性を知り、必要な水準にプロセスを維持するためのフィードバックの仕組みが必要。
それに対し、働くことは人の活動である。 そこには5つの次元がある。
①生理的な次元。仕事は均一に、労働は多様性を。 ②心理的な次元。例えば労働のない世界が実現するかもしれないが、その時人は人格の危機に直面する。 ③社会的な次元。 ④経済的な次元。 ⑤政治的な次元。
11. 仕事の生産性 自己実現の第一歩は仕事を生産的なものにすることである。
そのための４つ。 ①分析。仕事に必要な作業と手順と条件を知る。 ②統合。作業を集めプロセスとして編成する。 ③管理。管理手段を組み込む。 ④道具。
さらに、成果。すなわち仕事からのアウトプットを中心に置く。
12. 人と労働のマネジメント X理論: 人は怠惰で仕事を嫌う Y理論: 人は欲求を持ち、仕事を通じて自己実現と責任を欲する
どちらもマグレガーが示した理論であるが、どちらが正しいとは言わなかった。
産業心理学では、Y理論への忠誠を称する。だがその中身は心理的操作による支配であり、前提はX理論にある。
これはX理論を進化させたものにあたるが、実際に有効ではない。この理論は支配する側に天才を必要とする。
有効な方法は何か。 一般に働くことと働く人の歴史は幸福なものではなかった。が、例外があり、働くことが自己実現と成果を意味した時代や組織があった。国家存亡のときである。 でもそれでは厳しい。
日本企業での成功。 1920から1930年代に大企業向けに開発されたものである。
①日本でもインダストリアルエンジニアは欧米と同じ手法で研究、分析した。が、彼らは職務の設計は行わない。仕事の内容を明確にした段階で職場に任せる。 ②あらゆる人間が退職するまで研鑽を日常の課題とする。 ③終身雇用制度を持つ。 ④福利厚生が重視される。 ⑤強力なリーダーを育てるようには見えない。終身雇用制度であり、年功序列であるため、若い人材の育成がマネジメントの第一の責任とされる。 ⑥組織にあらゆる階層において意思決定が何を意味するかを考え、責任を分担することが期待される。
これらは日本古来の慣行ではないが、日本の基本的な価値観と信条を反映したものであり、そのまま欧米に移植することはできない。
根底にある考えは日本特有のものでもないので、欧米にも同じ考え方はある。 カールツァイスやIBMも成功している。
これまでの家族的マネジメント、参加型マネジメントの多くは&amp;rdquo;権限&amp;rdquo;の組織化に焦点を合わせた。
これに対し、今の例は、働くことをマネジメントの基礎とし、&amp;rdquo;責任&amp;rdquo;の組織化を行った。
13. 責任と保障 責任に応じてもらうために、企業やマネジメントは何をしなければならないか。</description>
    </item>
    
    <item>
      <title>【Tips】circleciでbundle installに失敗した</title>
      <link>http://kotazi.github.io/blog/post/2015120101/</link>
      <pubDate>Tue, 01 Dec 2015 19:21:54 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2015120101/</guid>
      <description>いつのまにかdevelopがcircleciをパスしなくなってしまった時の概要と対応。
 下記のようなエラーが出た。
Gem::InstallError: mime-types-data requires Ruby version &amp;gt;= 2.0. An error occurred while installing mime-types-data (3.2015.1120), and Bundler cannot continue. Make sure that `gem install mime-types-data -v &#39;3.2015.1120&#39;` succeeds before bundle check --path=vendor/bundle || bundle install --path=vendor/bundle --jobs=4 --retry=3 returned exit code 5 bundling. Action failed: bundle install  ので下記で対応。
gem &#39;mime-types&#39;, &#39;2.6&#39;  でも先輩に教えてもらったところ、 CircleCiではデフォルトのRubyのバージョンが1.9.3になっているらしい。
今までのmime-typesはそれで良かったが最近のアップデートで2.0以上にしか対応していない。
だから、Rubyのバージョンを上げるのが正しい。
なるほど。</description>
    </item>
    
    <item>
      <title>MasonryをAngularで使う際に注意すること</title>
      <link>http://kotazi.github.io/blog/post/2015113001/</link>
      <pubDate>Mon, 30 Nov 2015 15:18:19 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2015113001/</guid>
      <description>Masonryのstampが正しく動かないことがあったのでメモ。
 AngularプロジェクトでMasonryとAngularJS Masonry Directiveを利用している。
その際にMasonryのstampが動いていなかったのでメモ。 なんで動かなかったかというとMyIncludeとngIfがよくなかった。
とりあえずサンプル
■ ng-ifバージョン(動かない) See the Pen 【AngularJS】Masonry Directive Behavior with Stamp(ng-if) by Kohei Saeki (@kotazi) on CodePen.

■ ng-showバージョン(動く) See the Pen 【AngularJS】Masonry Directive Behavior with Stamp(ng-show) by Kohei Saeki (@kotazi) on CodePen.

ngIfの場合がDOMが再生性されているので、stampが毎回解除されてしまう。</description>
    </item>
    
    <item>
      <title>【訳読】ngInfiniteScroll</title>
      <link>http://kotazi.github.io/blog/post/2015112701/</link>
      <pubDate>Fri, 27 Nov 2015 15:18:19 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2015112701/</guid>
      <description>ngInfiniteScrollについてです。 Issueが溜まっているけれど、一年近く更新がない。
 ドキュメント infiniteScroll (directive in module infinite-scroll)
説明 要素の底がブラウザの底に近づいた時に、infiniteScrollで特定の振る舞いを指定することができます。
使い方 &amp;lt;ANY infinite-scroll=&#39;{expression}&#39; [infinite-scroll-distance=&#39;{number}&#39;] [infinite-scroll-disabled=&#39;{boolean}&#39;] [infinite-scroll-immediate-check=&#39;{boolean}&#39;] [infinite-scroll-listen-for-event=&#39;{string}&#39;]&amp;gt; &amp;lt;/ANY&amp;gt;  パラメータ infinite-scroll - {expression} エレメントの底がブラウザの底に近づいた時に、式を評価します。(基本的には関数呼び出し)
infinite-scroll-distance (optional) - {number} infinite-scrollに評価された式がトリガーされる前に、エレメントの底がブラウザの底にどれだけ近いかを表す数字です。ウインドウの高さの倍数で測定します。たとえば、ブラウザウィンドウの高さが1000pxで、infinite-scroll-distanceが2にセットされている場合、infinite scrollの式はエレメントの底がブラウザウィンドウの底から2000px以内にあるときに評価します。デフォルトは0です。(要素の底がブラウザウィンドウの下部を横切るとき式が評価されます)
infinite-scroll-disabled (optional) - {boolean} ブール式です。trueの場合、他のすべての条件が満たされている場合でも infininite scrollが評価されることはありません。たいていは一時停止などで使われます。例えばAjax読込中などです。スクロールイベントが発火し、この属性が評価を妨げた場合、そのイベントは属性値が再度falseになったタイミングで再度評価されます。
infinite-scroll-immediate-check (optional) - {boolean} スクロールイベントが起こっていない場合でも、ディレクティブがinfinite scroll式を評価するかを指定するブール式です。コンテンツの高さが十分にないときに便利です。デフォルトはtrueです。
infinite-scroll-listen-for-event (optional) - {string} イベント名を設定します。このイベントが実行された際、スクロール位置のチェックが走ります。手動でスクロールハンドラをトリガーする必要がある場合に便利です。
モジュールの読み込み infiniteScrollディレクティブはinfinite-scrollモジュール内で利用可能です。アクセスを可能にするために、infinite-scrollが自身のモジュールの依存関係に含まれていることを確認してください。
var myApp = angular.module(&#39;myApp&#39;, [&#39;infinite-scroll&#39;]);  スクロールイベントを絞る スクロールイベントは非常に頻繁に発火します。これによってパフォーマンスを低下させたり、スクロールの挙動を悪くしてしまうことがあります。これを和らげるために、infiniteScrollではmillisecondsにおけるスクロールイベントの上限を設定することができます。
// you might call this after your module initalization angular.module(&#39;infinite-scroll&#39;).value(&#39;THROTTLE_MILLISECONDS&#39;, 250)  手動でスクロールハンドラをトリガーする アイテムの高さを変更したり隠したりした際に、ユーザーのスクロールイベント無しで短いリストを取得し、再構築させることができます。この場合、infinite-scroll-listen-for-eventを使います。また、スクロールチェックが必要であれば、対応するイベントを発生できます。例えば、</description>
    </item>
    
    <item>
      <title>【訳読】AngularJS - ngInfiniteScroll</title>
      <link>http://kotazi.github.io/blog/post/2015112401/</link>
      <pubDate>Thu, 26 Nov 2015 17:30:17 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2015112401/</guid>
      <description>ngInfiniteScroll
Documentation
ドキュメント infiniteScroll (directive in module infinite-scroll)
説明 要素の底がブラウザの底に近づいた時に、infiniteScrollで特定の振る舞いを指定することができます。
使い方 &amp;lt;ANY infinite-scroll=&#39;{expression}&#39; [infinite-scroll-distance=&#39;{number}&#39;] [infinite-scroll-disabled=&#39;{boolean}&#39;] [infinite-scroll-immediate-check=&#39;{boolean}&#39;] [infinite-scroll-listen-for-event=&#39;{string}&#39;]&amp;gt; &amp;lt;/ANY&amp;gt;  パラメータ infinite-scroll - {expression} エレメントの底がブラウザの底に近づいた時に、式を評価します。(基本的には関数呼び出し)
infinite-scroll-distance (optional) - {number} infinite-scrollに評価された式がトリガーされる前に、エレメントの底がブラウザの底にどれだけ近いかを表す数字です。ウインドウの高さの倍数で測定します。たとえば、ブラウザウィンドウの高さが1000pxで、infinite-scroll-distanceが2にセットされている場合、infinite scrollの式はエレメントの底がブラウザウィンドウの底から2000px以内にあるときに評価します。デフォルトは0です。(要素の底がブラウザウィンドウの下部を横切るとき式が評価されます)
infinite-scroll-disabled (optional) - {boolean} ブール式です。trueの場合、他のすべての条件が満たされている場合でも infininite scrollが評価されることはありません。たいていは一時停止などで使われます。例えばAjax読込中などです。スクロールイベントが発火し、この属性が評価を妨げた場合、そのイベントは属性値が再度falseになったタイミングで再度評価されます。
infinite-scroll-immediate-check (optional) - {boolean} スクロールイベントが起こっていない場合でも、ディレクティブがinfinite scroll式を評価するかを指定するブール式です。コンテンツの高さが十分にないときに便利です。デフォルトはtrueです。
infinite-scroll-listen-for-event (optional) - {string} イベント名を設定します。このイベントが実行された際、スクロール位置のチェックが走ります。手動でスクロールハンドラをトリガーする必要がある場合に便利です。
モジュールの読み込み infiniteScrollディレクティブはinfinite-scrollモジュール内で利用可能です。アクセスを可能にするために、infinite-scrollが自身のモジュールの依存関係に含まれていることを確認してください。
var myApp = angular.module(&#39;myApp&#39;, [&#39;infinite-scroll&#39;]);  スクロールイベントを絞る Scroll events can be triggered very frequently, which can hurt performance and make scrolling appear jerky.</description>
    </item>
    
    <item>
      <title>【第2章】公的機関の成果/基本と原則</title>
      <link>http://kotazi.github.io/blog/post/2015112301/</link>
      <pubDate>Tue, 24 Nov 2015 19:44:59 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2015112301/</guid>
      <description>学生のころは分からなかったことが分かる気がした。
ドラッカーの基本と原則をKidleで読みなおした。
 多元社会の到来 企業以外の組織もマネジメントを必要としている。また、企業内の各部門でもマネジメントは必要。
公的機関不振の原因 公的機関に欠けているものは、成果であって効率ではない。効率によって成果を手にすることはできない。
公的機関と企業の基本的な違いは、支払いの受け方にある。予算から支払いを受けるということが、成果と業績の意味を変える。予算型組織における成果とは予算獲得である。 予算型組織において、少ない予算、少ない人員で成果を上げることは業績にならない。むしろ組織を危うくしかねない。
公的機関成功の条件 公的機関が成果を上げるうえで必要とするのは偉大な人物ではない。仕組みである。
公的機関に必要なことは、企業のまねではない。もちろん、成果について評価することは必要である。だがそれらのものは、何よりもまず、病院らしく、行政組織らしく、政府らしくなければならない。自らに特有の使命、も汽笛、機能について徹底的に検討しなければならない。
 公的機関について考えたことはあまりなかった。
予算型組織という言葉が印象に残った。</description>
    </item>
    
    <item>
      <title>【第1章】企業の成果/基本と原則</title>
      <link>http://kotazi.github.io/blog/post/2015112001/</link>
      <pubDate>Mon, 23 Nov 2015 19:44:59 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2015112001/</guid>
      <description>学生のころは分からなかったことが分かる気がした。
ドラッカーの基本と原則をKidleで読みなおした。
 マネジメントの役割 組織は目的ではなく手段である。組織自体のために存在するのではなく、何をすべきかが重要。 組織の中核の機関がマネジメント。マネジメントには3つの役割がある。
①自らの組織に特有の使命を果たす。
②仕事を通じて働く人たちを生かす。
③自らが社会に与える影響を処理するとともに、社会の問題について貢献する。
成果をあげること、人を生かすこと、社会に及ぼす影響を処理するとともに社会に貢献すること、これらの課題すべてを今日と明日のバランスのもとに果たすこと。
企業とは何か 企業は営利組織ではない。企業の目的の定義は一つしかない。それは、顧客を創造することである。
そして二つだけの基本的な機能を持つ。それがマーケティングとイノベーションである。マーケティングとイノベーションだけが成果をもたらす。
真のマーケティングは顧客からスタートする。すなわち現実、欲求、価値からスタートする。「われわれは何を売りたいか」ではなく、「顧客は何を買いたいか」を問う。
企業の第二の機能は、イノベーションすなわち新しい満足を生みだすことである。企業はより大きくなる必要はないが、より良くなることは必要。イノベーションとは、発明のことではない。技術のみに関するコンセプトでもない。経済に関わることである。経済的なイノベーション、さらに社会的なイノベーションは、技術のイノベーション以上に重要である。
事業は何か あらゆる組織において、共通のものの見方、理解、方向づけ、努力を実現するには、「われわれの事業は何か。何であるべきか」を定義することが不可欠である。
企業の目的としての事業が十分に検討されていないことが、企業の挫折や失敗の最大の原因である。
企業の目的と使命を定義するとき、出発点は一つしかない。顧客にとっての関心は、彼らにとっての価値、欲求、現実である。この事実からしても、「われわれの事業は何か」との問いに答えるには、顧客からスタートしなければならない。すなわち顧客の価値、欲求、期待、現実、状況、行動からスタートしなければならない。
したがって「顧客は誰か」との問いこそ、個々の企業の使命を定義するうえで、もっとも重要な問いである。この問いに対する答えによって、企業が自らをどう定義するかがほぼ決まってくる。
ほとんどの事業が少なくとも二種類の顧客を持つ。カーペット産業は建築業者、住宅購入者という二種類の顧客を持つ。この両者に購入してもらわなければならない。生活用品のメーカーは主婦、小売店という二種類の顧客を持つ。主婦に買う気を起こさせても、店が品を置いてくれなければ何にもならない。店が目につくよう陳列しても、主婦が買ってくれなければ何にもならない。
事業の目標 目標設定においても、中心となるのはマーケティングとイノベーションである。なぜなら、顧客が代価を支払うのは、この二つの分野における成果と貢献に対してだからである。
マーケティングの目標 ①既存の製品についての目標
②既存の製品の廃棄についての目標
③既存の市場における新製品についての目標
④新市場についての目標
⑤流通チャネルについての目標
⑥アフターサービスについての目標
⑦信用供与についての目標
これらの目標は、&amp;rdquo;集中の目標と市場地位の目標&amp;rdquo;の意思決定のあとでなければ設定できない。
市場において目指すべき地位は、最大ではなく最適である。
イノベーションの目標
イノベーションの種類。
①製品とサービスにおけるイノベーション
②市場におけるイノベーションと消費者の行動や価値観におけるイノベーション
③製品を市場へ持っていくまでの間におけるイノベーション
経営資源の目標 経済活動には三つの資源が必要である。
 土地つまり物的資源 労働つまり人材 資本つまり明日のための資金  である。これら三つの経営資源を確保しなければならない。
生産性の目標 生産性の向上こそ、マネジメントにとって重要な仕事の一つである。困難な仕事の一つである。なぜならば、生産性とは各種の要因の間のバランスをとることだからである
社会的責任の目標 わずか数年前まで、経済学者もマネジメントも、社会的な責任は無形であって、それに目標を設定することはできないとしていた。しかし今日、われわれはこの無形のものがきわめて有形たりうることを知った。消費者運動や、環境破壊に対する攻撃は、企業が社会に与える影響について自ら徹底的に検討し、目標を設定しなければならないことを学ぶための高価な授業だった。企業にとって、社会との関係は自らの存立に関わる問題である。企業は社会と経済のなかに存在する。ところが企業の内部にあっては、自らがあたかも真空に独立して存在していると考えてしまう。事実マネジメントの多くも、自らの事業を内部から眺めている。
しかし企業は、社会と経済のなかに存在する被創造物である。社会や経済は、いかなる企業をも一夜にして消滅させる力を持つ。企業は、社会や経済の許しがあって存在しているのであり、社会と経済が、その企業が有用かつ生産的な仕事をしていると見なすかぎりにおいて、その存続を許されているにすぎない。
社会性に関わる目標は、単なる良き意図の表明ではなく、企業の戦略に組み込まなければならない。社会性の目標が必要となるのは、マネジメントが社会に対して責任を負っているためではない。それは、マネジメントがまさに企業に対して責任を負っているためである。
戦略計画 戦略計画ではないもの。
①戦略計画は魔法の箱や手法の束ではない。思考であり、資源を行動に結びつけるものである。
②戦略計画は予測ではない。未来の主人公になろうとすることではない。
③戦略計画は未来の意思決定に関わるものではない。それは、現在の意思決定が未来において持つ意味に関わるものである意思決定が存在し得るのは、現在においてのみである。
④戦略計画はリスクをなくすためのものではなく、リスクを最小にするためのものでもないり経済的活動の本質とは、リスクを冒すことである。
 マネジメントの役割を明確にできてよかった。
また、マーケティングとイノベーションだけが成果をもたらすという話に驚いた。
企業の目的は、顧客を創造すること。 自分たちの提供するものではなく、顧客が何を欲しているか知る努力をする。 顧客に満足してもらえるよう、自分たちに何ができるか。
組織としての成長、成果を実現するためには、
「われわれの事業は何か。何であるべきか。」を定義することが不可欠。
それが自分たちにはまだできていない。少なくとも組織内での共有がうまくできていない。
クライアントとユーザーを満たすために、
自分たちにしかできないこと、自分たちがやっていきたいことを見つけなければならない。</description>
    </item>
    
    <item>
      <title>【忘備録】Github Pagesへの移行経緯</title>
      <link>http://kotazi.github.io/blog/post/2015111902/</link>
      <pubDate>Fri, 20 Nov 2015 19:18:11 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2015111902/</guid>
      <description> こちらの記事でドメイン移行をした。
けれどもそれ以来メールが受け取れなくなってしまったので、忘備録として事の経緯をまとめる。
 ドメイン移行前  ムームードメイン ロリポップ Wordpress  でブログを2〜3年やっていた。
Wordpressの更新が疎かになっていたので、Hugoに乗り換えたかった。
過去の記事はなくなってもよかったし、レンタルサーバーもそんなに使わないかなという感じ。
Hugoブログ作成  Gehirn  DNSサーバーをロリポップからGithub Pagesへ変更。 GehirnのZone apexを使って、kotazi.com上でGithub Pagesを表示することができた。
これで完了と思ったが、ロリポップメールを使っていたので、メールが使えなくなっていた。
Zoho Mailを使う Zoho Mailを使えば無料でkotazi@kotazi.comを使えると知った。 アカウントを作成したもののGehirn上でMXレコードを設定することができなかった。 これはAレコードをエイリアスで設定してしまったためかなと思っているが正直分からない。
解決編 結局どうにもならなかったのでGehirnを使うことを諦めた。 ムームーDNS上でCNAMEを使ってブログを表示させることにした。 だからkotazi.comではなく、www.kotazi.comになってしまった。 Aレコードでリダイレクトは設定できた。 MXレコードもムームーDNS側から設定した。 とりあえず、メールもWebサイトも使えるようになった。
参考になった記事  CNAME を巡る 2&amp;frasl;3 のジレンマ | 鷲ノ巣  </description>
    </item>
    
    <item>
      <title>【訳読】PDFMakeにおけるカスタムフォントの利用</title>
      <link>http://kotazi.github.io/blog/post/2015111901/</link>
      <pubDate>Wed, 18 Nov 2015 15:53:13 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2015111901/</guid>
      <description>カスタムフォントの使用 vfs_fonts.jsは&amp;rdquo;virtual-file-system&amp;rdquo;オブジェクトをpdfMake.vfsに割り当てています。 このオブジェクトの各キーがファイル名であり、値はbase64エンコードされたファイルを含みます。
grunt dump_dir  を実行すると新しくexamples/fonts内のフォントを含んだvfs_fonts.jsが生成されます。 RobotにLICENSE.txtが必要かは分かりませんが、ライセンスを壊してしまわないように含んでいます。
カスタムフォントを利用するためには、3つのステップが必要になります。
 使用するフォントを含んだvfs_fonts.jsを生成する font familyを定義する doc-definition-object内にあるfont familyを変更する  
1. 使用するフォントを含んだvfs_fonts.jsを生成する: examples/fonts内にフォントをコピーします。 grunt dump_dirを実行してください。新しいbuild/vfs_fonts.jsをウェブページで使います。
ちなみに、上記のアクションはexamples/fonts内の全てのファイルをダンプしてしまうので、画像ファイルなどを含むこともできます。
2. font familyを定義する pdfMake.createPdf(docDefinition)が呼ばれる前に、pdfMake.fontsをセットします。
{ yourFontName: { normal: &#39;fontFile.ttf&#39;, bold: &#39;fontFile2.ttf&#39;, italics: &#39;fontFile3.ttf&#39;, bolditalics: &#39;fontFile4.ttf&#39; }, anotherFontName: { (...) } }  キーの部分があとでdoc-definitionで使うfont-family名になります。 各font-familyは4つのプロパティを定義します。normal/bold/italics/bolditalicsです。
デフォルトの構成は下記のようになっています。
{ Roboto: { normal: &#39;Roboto-Regular.ttf&#39;, bold: &#39;Roboto-Medium.ttf&#39;, italics: &#39;Roboto-Italic.ttf&#39;, bolditalics: &#39;Roboto-Italic.ttf&#39; } };  3. doc-definition-object内にあるfont familyを変更する 現在、PDFMakeではRobotoをデフォルトのfamily nameとして利用しています。あなたのフォントを使うためにはこれを変更する必要があります。一番簡単な方法はグローバルでdefaultStyleを定義することです。
var docDefinition = { content: (.</description>
    </item>
    
    <item>
      <title>【訳読】DataTablesのPDFエクスポート</title>
      <link>http://kotazi.github.io/blog/post/2015111801/</link>
      <pubDate>Tue, 17 Nov 2015 15:10:01 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2015111801/</guid>
      <description>DataTablesのPDF吐き出しの日本語がうまくできません。
すごくはまったけれど、ドキュメントをちゃんと読むと分かったりする。
PDFMakeの存在に気付いていないだけでした。
 テーブルデータを含んだPDFファイルを作成保存します。 注意: このプロパティはDataTablesのButtonsが必要になります。
必要なもの In order to operate, this button requires the following:
動作ささせるために下記のものが必要になります。
 Flashエクスポート用のプラグイン ローカル保存に対応したブラウザ(I) PDFMake フォントファイル(PDFMakeが用意しているものか、カスタムフォントが使えます)  説明 このボタンはデータテーブルからPDFファイルを作成し保存します。 動作させるためにはモダンブラウザが必要となります。(IE8やIE9では動作しません。) 古いブラウザのためにpdfFlashボタンを提供しています。同じくPDFファイルを作成し保存するFlashプラグインです。また、pdfボタンは自動でブラウザ判定をしてボタンを選んでくれます。
このボタンを追加するためにはPDFMakeが利用可能であること、また適切なフォントサイズが必要です。PDFMakeはvfs_fonts.jsとカスタムフォントの使用を提供しています。このMITライセンスのライブラリはブラウザ上でPDFファイルを作成する機能を提供しており、このボタンではこれを利用しています。
PDFMakeとこのボタンを使えば、簡単にテキストやイメージファイル、その他の状貌をPDFにすることができます。詳しくは下記とPDFMakeのドキュメントを読んでください。
Safariについての注意:Safariでは生成されたPDFをダウンロードすることができません。(Webkitのバグ)
生成されたPDFは新しいタブで表示されます。エンドユーザーはブラウザの&amp;rdquo;Save as&amp;rdquo;ボタンを使って保存してください。
Options 下記のオプションを使って動作や表示の設定ができます。
   名前 タイプ 初期値     text ボタンの表示テキスト。このオプションかbuttons.copyを使っても設定できます。 PDF   calssName ボタンのクラス名 buttons-pdf buttons-html5   action PDFの作成保存    exportOptions Datatablesから出力されたデータを選択してください。行や列についても含みます。buttons.exportData()を見てください。 {}   header ヘッダーを含むかどうかを示します。 true   footer フッターを含むかどうかを示します false   title 生成されたファイルのファイル名です。*を使うと自動的にtitleタグの値が置き換えられます。また、PDFファイルの上部にもこのタイトルが表示されます。 *   download PDFが生成された際のアクションを選択します。downloadもしくはopenを選択することができます。Safariの動作には注意してください。limitation in Safari download   extension ファイルの拡張子です .</description>
    </item>
    
    <item>
      <title>PowderとrbenvとYosemiteと</title>
      <link>http://kotazi.github.io/blog/post/2015111401/</link>
      <pubDate>Mon, 16 Nov 2015 18:11:30 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2015111401/</guid>
      <description>言われるがまま導入したPowderがいつのまにか動かなくなっていた。
いまいちなんなのか分かっていなかったので調べながら直しました。
 Powは設定が不要なRails &amp;amp; Rackサーバ。
そしてそのコマンド操作を手助けしてくれるのがpowder。
設定周り ◯ Powのインストール $ curl get.pow.cx | sh  ◯ シンボリックリンクの作成 $ cd ~/.pow $ ln -s /path/to/myapp  ◯ powderのインストール $ gem install powder  ◯ powderコマンド  # link $ powder link # unlink $ powder unlink # list $ powder list # config $ powder config # restart $ powder restart  ◯ rbenvで使う時 rbenvで使う場合は~/.powconfigにパスを通す必要がある。
powがrbenvを使っているにもかかわらず、システムのrubyを使ってしまうため。
# ~/.powconfig export PATH=&amp;quot;/Users/kz/.</description>
    </item>
    
    <item>
      <title>【Hugo】Hosting on GitHub Pages【翻訳】</title>
      <link>http://kotazi.github.io/blog/post/2015111301/</link>
      <pubDate>Fri, 13 Nov 2015 10:09:02 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2015111301/</guid>
      <description>HugoをGithub Pages上でホスティングする際に、大きくハマってしまったので全訳した。
一度訳してみると、案外簡単にいった。
 導入 多くのHugoユーザーが作成したブログをGithub Pages上にホストする方法に興味を抱いています。 このチュートリアルはまさにそのためのものです。私たちに必要なドキュメントは、Hugoを正しくインストールし、git上で快適に動作させるためのものなのです。
このチュートリアルでは、主要なステップを通してhttp://spencerlyon2.github.io/hugo_gh_blog上で動作するサンプルブログを作成していきます。ソースコードはGithub上に上がっています。読者はサンプルのリポジトリをダウンロードして、それに従ってみることを推奨します。
リポジトリの作成 私たちの目的はGithub Pages上にブログをホストすることなので、ブログ記事をGithubリポジトリ上にホストするのは自然なことです。
従って、最初のステップではウェブサイトのコンテンツを設置する新しいリポジトリ、もしくは既存のリポジトリに新しいディレクトリを作成します。 このため、私はspencerlyon2/hugo_gh_blogというリポジトリを作成しました。
ブログの作成 設定ファイルを用意する 新しいHugoサイトを作成するための第一歩として、configファイルを記述します。このconfigファイルは下記の２つの理由において重要な役割を果たします。(1)baseurlなどの、サイトについての広い設定を行います。(2)またこのファイルが、Hugoサイトがどのように作られたかを示すためのものとなります。 例として、私が作成したconfig.yamlファイルがあります。
--- contentdir: &amp;quot;content&amp;quot; layoutdir: &amp;quot;layouts&amp;quot; publishdir: &amp;quot;public&amp;quot; indexes: category: &amp;quot;categories&amp;quot; baseurl: &amp;quot;http://spencerlyon2.github.io/hugo_gh_blog&amp;quot; title: &amp;quot;Hugo Blog Template for GitHub Pages&amp;quot; canonifyurls: true ...   警告: このチュートリアル作成以後、デフォルトであったcanonifyurls:trueはfalseに変更されました。もしも、Spencerによるhttps://github.com/spencerlyon2/hugo_gh_blogサイトをチュートリアルで使うのであれば、自身のconfig.yamlファイルにcanonifyurls:trueを手動で追加するようにしてください。でないと、CSSファイルが読み込まれません。 より詳しくは、“Extras: URLs page”にある“Canonicalization: Caveat”を参考にしてみてください。
 サイト構造を定義する Hugoはあなた自身が意味のあるサイト構造を設計し、それと同じ構造でサイトをレンダリングすることを想定しています。設定ファイルにあるcontentdir: &amp;quot;content&amp;quot;という行に注目してください。これは全てのコンテンツはcontentという名前のフォルダ配下に置かれるということを意味します。Hugoでは全てのディレクトリをセクションとして扱います。たとえばセクションがひとつしかなければ、投稿が一箇所に置かれることになります。そのため私たちは新たに２つのフォルダを作成しました。
▾ &amp;lt;root&amp;gt;/ ▾ content/ ▾ posts/  HTMLテンプレートの作成 続いて新しいサイトの見た目の部分を定義していきます。 Hugoではユーザー(あなた)が作成したHTMLテンプレートを使ってサイトを生成します。このステップはとても主観的なものです。私は単にブログを生成することが可能なテーマを使っています。LanyonというJekyllのテーマを使うことに決めました。LanyonはピュアCSSを使っており、少しだけ修正したものが/static/cssリポジトリに上がっています。チュートリアルに沿っていれば、サンプルリポジトリのstaticフォルダに格納されているはずです。
完璧なウェブサイトを作るにはたくさんのファイルが必要になるので、このチュートリアルで全てを補うことはできません。しかしながら、ディレクトリ構成だけ紹介させていただきます。
▾ &amp;lt;root&amp;gt;/ ▾ content/ ▾ posts/ &amp;lt;blog posts&amp;gt;.</description>
    </item>
    
    <item>
      <title>HugoブログとGithub Pagesと独自ドメイン</title>
      <link>http://kotazi.github.io/blog/post/2015111201/</link>
      <pubDate>Thu, 12 Nov 2015 08:28:26 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2015111201/</guid>
      <description>Wordpressで続けていたブログをやめて、Hugoでブログを作りなおした。 以前の記事は削除した。 HugoはGoで書かれた静的サイトジェネレータだ。早くて便利。
 Hugoブログの立ちあげ 基本的には公式サイトのQuickstartに従う。
# Hugoをローカルで立ちあげ hugo server --theme=hugo-cactus-theme --buildDrafts -w # 新しく投稿 hugo new post/newpost.md  Github Pages Github PagesもHugo公式のHosting on GitHub Pagesを参考にする。
 git subtreeを使う 全体のコンテンツはmasterブランチに、公開ファイルをgh-pagesブランチで運用 deploy.shの作成   チュートリアルに沿えばGithub Pagesにサイトができる。
独自ドメイン 僕はもともとムームードメインで取得したドメインと、ロリポップのレンタルサーバーを使ってWordpressブログを使っていた。
それにあたりこちらの記事を参考にした。
Hugo + GitHub Pagesでブログを作る#2|TANKSUZUKI.COM
 サブドメインとZone Apex(kotazi.com)で公開するのでは手順が異なる ムームードメインではApex Aliasが使えない そのためGehirn DNSなどを使う必要がある   そんな感じでブログの移行が完了しました。</description>
    </item>
    
    <item>
      <title>AngularJS Masonry Directiveの検証</title>
      <link>http://kotazi.github.io/blog/post/2015111101/</link>
      <pubDate>Wed, 11 Nov 2015 17:31:11 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2015111101/</guid>
      <description> 現在プロジェクトで使っているMasonryが正しく動作しなくなった。 確認もかねてサンプルを作った。
See the Pen 【AngularJS】Masonry Directive Behavior with adding items by Kohei Saeki (@kotazi) on CodePen.

■ 基本サンプル &amp;lt;div masonry&amp;gt; &amp;lt;div class=&amp;quot;masonry-brick&amp;quot; ng-repeat=&amp;quot;brick in bricks&amp;quot;&amp;gt; &amp;lt;img ng-src=&amp;quot;{{ brick.src }}&amp;quot; alt=&amp;quot;A masonry brick&amp;quot;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;  ■ Attributes  item-selector: エレメント指定。masonry-brick属性も付ける必要あり？ load-images: ImagesLoaded用。初期値でtrue reload-on-show: 表示切替時にリロード reload-on-resize: Masonryアイテムの横幅が変更された時リロード masonry-options: その他のオプションはこれで設定  ■ URL  Masonry AngularJS Masonry Directive  </description>
    </item>
    
    <item>
      <title>about</title>
      <link>http://kotazi.github.io/blog/about/</link>
      <pubDate>Tue, 10 Nov 2015 01:06:32 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/about/</guid>
      <description>コタジです。
1990年生まれのエンジニア。
新卒入社したサイバーエージェントを一年半で退職し、
現在はShuttlerock Japanで働いでいます。
好きな言葉は「一視同仁」。</description>
    </item>
    
  </channel>
</rss>