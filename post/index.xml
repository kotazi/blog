<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on kotazi.com</title>
    <link>http://kotazi.github.io/blog/post/</link>
    <description>Recent content in Posts on kotazi.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 Apr 2016 00:46:15 +0900</lastBuildDate>
    <atom:link href="http://kotazi.github.io/blog/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>【DMM英会話】 Meeting | Business Basic</title>
      <link>http://kotazi.github.io/blog/post/2016/0412_dmm/</link>
      <pubDate>Tue, 12 Apr 2016 00:46:15 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0412_dmm/</guid>
      <description>

&lt;p&gt;DMM英会話のレッスン中。その日学んだことをメモ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://eikaiwa.dmm.com/download/pdf/Business_basic_08_01.pdf/&#34;&gt;Lesson 08: Discussion | Business Basic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h5 id=&#34;practice-1-formal-and-informal-expressions:e6c1c0c2711565ef367ea5f6f70d8643&#34;&gt;◯ Practice 1 | Formal and Informal Expressions&lt;/h5&gt;

&lt;p&gt;割愛。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;practice-2-reading-sentences:e6c1c0c2711565ef367ea5f6f70d8643&#34;&gt;◯ Practice 2 | Reading Sentences&lt;/h5&gt;

&lt;p&gt;割愛。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;practice-3-studying-the-manual:e6c1c0c2711565ef367ea5f6f70d8643&#34;&gt;◯ Practice 3 | Studying the Manual&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;A presented purpose of the meeting.&lt;/li&gt;
&lt;li&gt;Good timing (Before the meeting decide how much time are you planning to talk; it should be neither too short nor too long) feel that you are paying attention to his ideas.&lt;/li&gt;
&lt;li&gt;A requirement for the audience to join the discussion (ask questions, ask to write the minutes, ask to comment on the graph)&lt;/li&gt;
&lt;li&gt;Some statistics and/or examples.&lt;/li&gt;
&lt;li&gt;Visual information is valuable (example: pictures, graphs, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;意訳&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ミーティングの目的を伝える&lt;/li&gt;
&lt;li&gt;事前にどのくらいの時間で伝えるのかを考える。長すぎても短すぎてもいけない&lt;/li&gt;
&lt;li&gt;聴衆が参加するように要求をする(質問をする、メモを頼む、コメントを求める)&lt;/li&gt;
&lt;li&gt;統計や例を用いる&lt;/li&gt;
&lt;li&gt;ビジュアルを用意する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;practice-4-situation-questions:e6c1c0c2711565ef367ea5f6f70d8643&#34;&gt;◯ Practice 4 | Situation Questions&lt;/h5&gt;

&lt;p&gt;割愛。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;覚えた英単語:e6c1c0c2711565ef367ea5f6f70d8643&#34;&gt;◯ 覚えた英単語&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;単語&lt;/th&gt;
&lt;th&gt;意味&lt;/th&gt;
&lt;th&gt;その他&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;gradually&lt;/td&gt;
&lt;td&gt;徐々に&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;attract&lt;/td&gt;
&lt;td&gt;惹きつける&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;statistics&lt;/td&gt;
&lt;td&gt;統計&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;involve&lt;/td&gt;
&lt;td&gt;巻き込む&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;conduct&lt;/td&gt;
&lt;td&gt;指揮をする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;passive&lt;/td&gt;
&lt;td&gt;受け身の&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>【訳読】2.2 Reducers|Redux</title>
      <link>http://kotazi.github.io/blog/post/2016/0329_redux_reducers/</link>
      <pubDate>Tue, 29 Mar 2016 18:55:03 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0329_redux_reducers/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://redux.js.org/docs/basics/Reducers.html&#34;&gt;2.2 Reducers|Redux&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Actionは何かが起こったという事実は述べるが、アプリケーションのStateがどのように変わったかということまで細かくは言わない。
それはReducerの仕事だ。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&#34;designing-the-state-shape:efd63614895e76f4b1f41133fc5c5d39&#34;&gt;Designing the State Shape&lt;/h2&gt;

&lt;p&gt;Reduxではアプリケーションの全てのステートはシングルオブジェクトとして保たれる。&lt;/p&gt;

&lt;p&gt;ToDoアプリでは2つのことをストアしたい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;現在選択されているフィルター&lt;/li&gt;
&lt;li&gt;実際のToDoリスト&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;UI State同様に、ストアしたいデータが見つかると思う。
それは良いことだけれど、UI Stateからデータは分離するようにすること。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// これがState(ステート）!!
{
  visibilityFilter: &#39;SHOW_ALL&#39;,
  todos: [
    {
      text: &#39;Consider using Redux&#39;,
      completed: true,
    },
    {
      text: &#39;Keep all state in a single tree&#39;,
      completed: false
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;handling-actions:efd63614895e76f4b1f41133fc5c5d39&#34;&gt;Handling Actions&lt;/h2&gt;

&lt;p&gt;Stateオブジェクトの形が決まったので、Reducerを準備していく。
Reducerは前のStateとActionを引数に取り、次のステートを返すピュア関数だ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(previousState, action) =&amp;gt; newState
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Array.prototype.reduce&lt;/code&gt;関数のようだからReducerと呼ばれる。&lt;br /&gt;
Reducerの中で決してしてはならないことが下記だ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;引数を変えること&lt;/li&gt;
&lt;li&gt;APIを呼び出したり、ルーティングを変更すること&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Date.now()&lt;/code&gt;や&lt;code&gt;Math.random()&lt;/code&gt;といったピュアでない関数を呼ぶこと&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とりあえずReducerはピュアであることを覚えておこう。
&lt;strong&gt;ただ計算するだけであり、同じ引数を与えれば同じ次の結果を返す。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;最初のStateを決めるところから始めよう。最初は&lt;code&gt;undefined&lt;/code&gt;のStateでReducerを呼ぶ。
そうして最初のステートを取得する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { VisibilityFilters } from &#39;./actions&#39;

// 最初のステート
const initialState = {
  visibilityFilter: VisibilityFilters.SHOW_ALL,
  todos: []
}

function todoApp(state, action) {
  if (typeof state === &#39;undefined&#39;) {
    return initialState
  }

  // For now, don’t handle any actions
  // and just return the state given to us.
  return state
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ES6だとこんなふうにも書ける。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function todoApp(state = initialState, action) {
  // For now, don’t handle any actions
  // and just return the state given to us.
  return state
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;SET_VISIBILITY_FILTER&lt;/code&gt;を操作する。大切なのはStateの&lt;code&gt;visibilityFilter&lt;/code&gt;を変更すること。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function todoApp(state = initialState, action) {
  switch (action.type) {
    case SET_VISIBILITY_FILTER:
      return Object.assign({}, state, {
        visibilityFilter: action.filter
      })
    default:
      return state
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;メモ。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;state&lt;/code&gt;を変更しないこと。&lt;code&gt;Object.assign()&lt;/code&gt;を使ってコピーを作成する。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;default&lt;/code&gt;の時は前のステートを返すこと。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;handling-more-actions:efd63614895e76f4b1f41133fc5c5d39&#34;&gt;Handling More Actions&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ADD_TODO&lt;/code&gt;も追加する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function todoApp(state = initialState, action) {
  switch (action.type) {
    case SET_VISIBILITY_FILTER:
      return Object.assign({}, state, {
        visibilityFilter: action.filter
      })
    case ADD_TODO:
      return Object.assign({}, state, {
        todos: [
          ...state.todos,
          {
            text: action.text,
            completed: false
          }
        ]
      })    
    default:
      return state
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先ほどと同じように、&lt;code&gt;state&lt;/code&gt;に直接書き込むことはせず、新しいオブジェクトを返す。&lt;/p&gt;

&lt;p&gt;最後に&lt;code&gt;COMPLETE_TODO&lt;/code&gt;ハンドラの実装。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;case COMPLETE_TODO:
  return Object.assign({}, state, {
    todos: state.todos.map((todo, index) =&amp;gt; {
      if (index === action.index) {
        return Object.assign({}, todo, {
          completed: true
        })
      }
      return todo
    })
  })
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;splitting-reducers:efd63614895e76f4b1f41133fc5c5d39&#34;&gt;Splitting Reducers&lt;/h2&gt;

&lt;p&gt;かなりごちゃごちゃしてきた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function todoApp(state = initialState, action) {
  switch (action.type) {
    case SET_VISIBILITY_FILTER:
      return Object.assign({}, state, {
        visibilityFilter: action.filter
      })
    case ADD_TODO:
      return Object.assign({}, state, {
        todos: [
          ...state.todos,
          {
            text: action.text,
            completed: false
          }
        ]
      })
    case COMPLETE_TODO:
      return Object.assign({}, state, {
        todos: state.todos.map((todo, index) =&amp;gt; {
          if(index === action.index) {
            return Object.assign({}, todo, {
              completed: true
            })
          }
          return todo
        })
      })
    default:
      return state
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もっと綺麗に書く方法はないのか？&lt;code&gt;todos&lt;/code&gt;と&lt;code&gt;visibilityFilter&lt;/code&gt;は独立しているように見える。
今回の場合は&lt;code&gt;todos&lt;/code&gt;はとても分離しやすい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function todos(state = [], action) {
  switch (action.type) {
    case ADD_TODO:
      return [
        ...state,
        {
          text: action.text,
          completed: false
        }
      ]
    case COMPLETE_TODO:
      return state.map(todo, index) =&amp;gt; {
        if (index === action.index) {
          return Object.assign({}, todo, {
            completed: true
          })
        }
        return todo
      }
    default:
      return state
  }
}

function todoApp(state = initialState, action) {
  switch (action.type) {
    case SET_VISIBILITY_FILTER:
      return Object.assign({}, state, {
        visibilityFilter: action.filter
      })
    case ADD_TODO:
    case COMPLETE_TODO:
      return Object.assign({}, state, {
        todos: todos(state.todos, action)
      })
    default:
      return state
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;todos&lt;/code&gt;もまた&lt;code&gt;state&lt;/code&gt;を取ることに注意する。しかも配列！
これはReducer Compositionと呼ばれ、Reduxアプリの基本的なパターンである。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;visibilityFilter&lt;/code&gt;ももっとできるんじゃない？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function visibilityFilter(state = SHOW_ALL, action) {
  switch (action.type) {
  case SET_VISIBILITY_FILTER:
    return action.filter
  default:
    return state
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;メインのReducerを各パーツとなるステートを管理するReducerを呼び出す関数に書きなおした。
初期のステートを知る必要はない。子のReducerが初期値で何を返すかを知っていればいい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function todos(state = [], action) {
  switch (action.type) {
    case ADD_TODO:
      return [
        ...state,
        {
          text: action.text,
          completed: false
        }
      ]
    case COMPLETE_TODO:
      return state.map((todo, index) =&amp;gt; {
        if (index === action.index) {
          return Object.assign({}, todo, {
            completed: true
          })
        }
        return todo
      })
    default:
      return state
  }
}

function visibilityFilter(state = SHOW_ALL, action) {
  switch (action.type) {
    case SET_VISIBILITY_FILTER:
      return action.filter
    default:
      return state
  }
}

function todoApp(state = {}, action) {
  // Actionが関係している場合だけ変更して返す
  return {
    visibilityFilter: visibilityFilter(state.visibilityFilter, action),
    todos: todos(state.todos, action)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;各Recuderにとっての&lt;code&gt;state&lt;/code&gt;はことなり、各ステートに対応している。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;いいかんじ！アプリが大きくなった時はReducerを分割することができる。&lt;/p&gt;

&lt;p&gt;最後に、Reducerは&lt;a href=&#34;http://redux.js.org/docs/api/combineReducers.html&#34;&gt;&lt;code&gt;conbineReducers()&lt;/code&gt;&lt;/a&gt;と呼ばれるものを提供する。このように書き換えることができるようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { combineReducers } from &#39;redux&#39;

const todoApp = combineReducers({
  visibilityFilter,
  todos
})

export default todoApp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記は下記と全く同じ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export default function todoApp(state = {}, action) {
  return {
    visibilityFilter: visibilityFilter(state.visibilityFilter, action),
    todos: todos(state.todos, action)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;異なるキーや関数呼び出しを与えることができる。下2つは同じことがかいてある。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const reducer = combineReducers({
  a: doSomethingWithA,
  b: processB,
  c: c
})
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;function reducer(state = {}, action) {
  return {
    a: doSomethingWithA(state.a, action),
    b: processB(state.b, action),
    c: c(state.c, action)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;source-code:efd63614895e76f4b1f41133fc5c5d39&#34;&gt;Source Code&lt;/h2&gt;

&lt;p&gt;最終的なやつ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// combineReducersを読み込む
import { combineReducers } from &#39;redux&#39;

// 各Actionを読み込む
import { ADD_TODO, COMPLETE_TODO, SET_VISIBILITY_FILTER, VisibilityFilters } from &#39;./actions&#39;
const { SHOW_ALL } = VisibilityFilters

function visibilityFilter(state = SHOW_ALL, action) {
  switch (action.type) {
    case SET_VISIBILITY_FILTER:
      return action.filter
    default:
      return state
  }
}

function todos(state = [], action) {
  switch (action.type) {
    case ADD_TODO:
      return [
        ...state,
        {
          text: action.text,
          completed: false
        }
      ]
    case COMPLETE_TODO:
      return state.map((todo, index) =&amp;gt; {
        if (index === action.index) {
          return Object.assign({}, todo, {
            completed: true
          })
        }
        return todo
      })
    default:
      return state
  }
}

// 親となるReducer
const todoApp = combineReducers({
  visibilityFilter,
  todos
})

export default todoApp
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>【訳読】2.1 Actions|Redux</title>
      <link>http://kotazi.github.io/blog/post/2016/0328_redux_actions/</link>
      <pubDate>Mon, 28 Mar 2016 18:34:45 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0328_redux_actions/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://redux.js.org/docs/basics/Actions.html&#34;&gt;2.1 Actions|Redux&lt;/a&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&#34;actions:7bfca12585449761f97344878800fa11&#34;&gt;Actions&lt;/h2&gt;

&lt;p&gt;Actionはアプリケーションからの情報をStoreへ渡す。
&lt;a href=&#34;http://redux.js.org/docs/api/Store.html#dispatch&#34;&gt;&lt;code&gt;store.dispatch()&lt;/code&gt;&lt;/a&gt;を使ってActionをStoreへ送信する。&lt;/p&gt;

&lt;p&gt;ToDoアイテムのアクションサンプル:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const ADD_TODO = &#39;ADD_TODO&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{
  type: ADD_TODO,
  text: &#39;Build my first Redux app&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ActionはプレーンなJavaScriptオブジェクトである。&lt;code&gt;type&lt;/code&gt;プロパティを必ず持ち、Actionの種類を示す。
Typeは文字列の定数として定義されるべきであり、アプリケーションが肥大化した際はモジュールに分割することができる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { ADD_TODO, REMOVE_TODO } from &#39;../actionTypes&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;type&lt;/code&gt;以外のActionオブジェクトの構造はあなた次第だ。興味があれば&lt;a href=&#34;https://github.com/acdlite/flux-standard-action&#34;&gt;Flux Standard Action&lt;/a&gt;を見ること。&lt;/p&gt;

&lt;p&gt;ユニークなIDを付けることはいいかも。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  type: COMPLETE_TODO,
  index: 5
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;action-creators:7bfca12585449761f97344878800fa11&#34;&gt;Action Creators&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Action creators&lt;/strong&gt; はActionを生成する関数である。
&amp;ldquo;Action&amp;rdquo;と&amp;rdquo;Action Creator&amp;rdquo;をまとめるのは簡単なのでそのほうがいいかも。&lt;/p&gt;

&lt;p&gt;典型的なFluxの実装では、こんな感じでAction CreatorはDispachのトリガーとなる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function addTodoWithDispatch(text) {
  const action = {
    type: ADD_TODO,
    text
  }
  dispatch(action)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;それに対しReduxでは、Action Creatorは単純にActionを返すだけ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function addTodo(text) {
  return {
    type: ADD_TODO,
    text
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これによりテストがすごく簡単になる。
実際dispachするには&lt;code&gt;dispach()&lt;/code&gt;関数に結果を渡すだけだ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dispatch(addTodo(text))
dispatch(completeTodo(index))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また &lt;strong&gt;bound action creator&lt;/strong&gt; を作成して自動的にdispachすることも可能。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const boundAddTodo = (text) =&amp;gt; dispatch(addTodo(text))
const boundCompleteTodo = (index) =&amp;gt; dispatch(completeTodo(index))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じで呼び出すことができる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;boundAddTodo(text)
boundCompleteTodo(index)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;dispach()&lt;/code&gt;関数はStoreから&lt;code&gt;store.dispatch()&lt;/code&gt;を使って直接アクセスすることができるが、&lt;a href=&#34;http://github.com/gaearon/react-redux&#34;&gt;react-redux&lt;/a&gt;の&lt;code&gt;connect()&lt;/code&gt;は便利。
&lt;a href=&#34;http://redux.js.org/docs/api/bindActionCreators.html&#34;&gt;&lt;code&gt;bindActionCreators()&lt;/code&gt;&lt;/a&gt;を使って自動的にたくさんのアクションを&lt;code&gt;dispatch()&lt;/code&gt;関数にバインドすることもできる。&lt;/p&gt;

&lt;h2 id=&#34;source-code:7bfca12585449761f97344878800fa11&#34;&gt;Source Code&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;/*
 * action types
 */

export const ADD_TODO = &#39;ADD_TODO&#39;
export const COMPLETE_TODO = &#39;COMPLETE_TODO&#39;
export const SET_VISIBILITY_FILTER = &#39;SET_VISIBILITY_FILTER&#39;

/*
 * other constants
 */

export const VisibilityFilters = {
  SHOW_ALL: &#39;SHOW_ALL&#39;,
  SHOW_COMPLETED: &#39;SHOW_COMPLETED&#39;,
  SHOW_ACTIVE: &#39;SHOW_ACTIVE&#39;
}

/*
 * action creators
 */

export function addTodo(text) {
  return { type: ADD_TODO, text }
}

export function completeTodo(index) {
  return { type: COMPLETE_TODO, index }
}

export function setVisibilityFilter(filter) {
  return { type: SET_VISIBILITY_FILTER, filter }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;UIを用意する前に振る舞いを明確にできた。
チュートリアルではやらないけれど、テストをこの時点で書くことができる。
これらはタダの関数だからモックがいらない。&lt;/p&gt;

&lt;h2 id=&#34;source-code-1:7bfca12585449761f97344878800fa11&#34;&gt;Source Code&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;index.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { createStore } from &#39;redux&#39;
import todoApp from &#39;./reducers&#39;

let store = createStore(todoApp)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>【読書】「正義」は決められるのか？</title>
      <link>http://kotazi.github.io/blog/post/2016/0324_seigi/</link>
      <pubDate>Fri, 25 Mar 2016 11:40:44 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0324_seigi/</guid>
      <description>&lt;p&gt;21冊目。&lt;/p&gt;

&lt;p&gt;&lt;a  href=&#34;http://www.amazon.co.jp/gp/product/4761271264/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4761271264&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;「正義」は決められるのか?&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=kotazi-22&amp;l=as2&amp;o=9&amp;a=4761271264&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;を読みました。&lt;/p&gt;

&lt;hr&gt;

&lt;ul&gt;
&lt;li&gt;トロッコ問題&lt;/li&gt;
&lt;li&gt;功利主義&lt;/li&gt;
&lt;li&gt;アナロジー&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;要点はこの3つ。&lt;/p&gt;

&lt;p&gt;アナロジーの話が特に面白かった。
有名なトロッコ問題というのは、
トロッコが暴走していてこのままだと先にいる5人を轢き殺してしまう。&lt;br /&gt;
あなたはスイッチでトロッコの進行方向を切り替えることができるが、
そうすると、その先にいる1人の人間を轢き殺してしまう。&lt;/p&gt;

&lt;p&gt;スイッチを切り替えるか？&lt;/p&gt;

&lt;p&gt;これを多くの人間に質問するとスイッチを切り替えるという人は多数派になるらしい。&lt;/p&gt;

&lt;p&gt;こういう考え方を功利主義といって、「最大多数の最大幸福」を基本原理とした論理思想。&lt;/p&gt;

&lt;p&gt;そういう人たちに例えばこういう質問を返す。
死にそうな人が5人いるけれど、別の一人から血清を作れば助けることができる。そうするとその一人は死んでしまうのだけれど、
オペをするべきか。みたいな。&lt;/p&gt;

&lt;p&gt;そうするとYesの数が大きく減るらしい。&lt;/p&gt;

&lt;p&gt;なんでか。ということになるのだけれど、&lt;/p&gt;

&lt;p&gt;こういう時にアナロジーという言葉が出てくる。&lt;/p&gt;

&lt;p&gt;類推。&lt;/p&gt;

&lt;p&gt;似ていれば分かりやすい説明になっていいんだけど、説得力だけを持ってしまって似ていないこともあるから
それは気をつけないといけない。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【読書】Zero to One</title>
      <link>http://kotazi.github.io/blog/post/2016/0323_zero_to_one/</link>
      <pubDate>Wed, 23 Mar 2016 11:40:44 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0323_zero_to_one/</guid>
      <description>&lt;p&gt;20冊目。&lt;/p&gt;

&lt;p&gt;&lt;a  href=&#34;http://www.amazon.co.jp/gp/product/4140816589/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4140816589&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;ゼロ・トゥ・ワン―君はゼロから何を生み出せるか&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=kotazi-22&amp;l=as2&amp;o=9&amp;a=4140816589&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;を読みました。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;ペイパルマフィアの一人、ピーター・ティールの著書。&lt;br /&gt;
「我々は空飛ぶ自動車を欲したのに、代わりに手にしたのは百四十文字だ。」
とTwitterを揶揄しているのは有名。&lt;/p&gt;

&lt;p&gt;ティールは今流行の「リーン・スタートアップ」とは真逆の考え方を示す。
リーン・スタートアップでは事業計画はあまりせずに、改善をすることを大事にしているが、
ティールはそうしたスタートアップは結局のところ成功しにくいと考える。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1. 僕たちは未来を創ることができるか&lt;/li&gt;
&lt;li&gt;2. 一九九九年のお祭り騒ぎ&lt;/li&gt;
&lt;li&gt;3. 幸福な企業はみなそれぞれに違う&lt;/li&gt;
&lt;li&gt;4. イデオロギーとしての競争&lt;/li&gt;
&lt;li&gt;5. 終盤を制する&lt;/li&gt;
&lt;li&gt;6. 人生は宝くじじゃない&lt;/li&gt;
&lt;li&gt;7. カネの流れを追え&lt;/li&gt;
&lt;li&gt;8. 隠れた真実&lt;/li&gt;
&lt;li&gt;9. ティールの法則&lt;/li&gt;
&lt;li&gt;10. マフィアの力学&lt;/li&gt;
&lt;li&gt;11. それを作れば、みんあやってくる？&lt;/li&gt;
&lt;li&gt;12. 人間と機会&lt;/li&gt;
&lt;li&gt;13. エネルギー20&lt;/li&gt;
&lt;li&gt;14. 創業者のパラドックス&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「２１世紀をこれまでより平和な繁栄の時代にしてくれる新たなテクノロジーを思い描き、それを創り出すことが、今の僕らに与えられた挑戦なのだ。」&lt;/p&gt;

&lt;p&gt;という一文が心に残った。&lt;/p&gt;

&lt;p&gt;進歩には2種類があるといい。水平進捗と垂直進捗と述べた。
水平的進捗とは1台のタイプライターから100台作ること、成功のコピーと言い、
垂直的進歩はタイプライターからワープロを生み出すことだと言った。&lt;/p&gt;

&lt;p&gt;日本の多くのベンチャー企業やそこで働く人たちも、大きなことを述べているようで
水平進捗しか想像できていないということはあるなあと思ったし、
そういう部分を真っ向から否定するティールの視点の高さに少し痺れた。&lt;/p&gt;

&lt;p&gt;他にも独占市場を築くことを進めていて、そのためにはどんなスタートアップも非常に小さな市場から始めるべきだといったり、
ニッチ市場を創造し支配したら、次は関連する少し大きな市場に徐々に拡大してゆくべきだと。&lt;/p&gt;

&lt;p&gt;企業は創業者の想像以上の会社にはならないというけれど、
始める時に視点を高く持つのは大事だと感じた。&lt;/p&gt;

&lt;p&gt;あと面白かったのは、
日本だとよく大企業かベンチャーか、とかで意識の高さとか派閥があったりするけど、ティールは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;あいまいな楽観主義者&lt;/li&gt;
&lt;li&gt;あいまいな悲観主義者&lt;/li&gt;
&lt;li&gt;明確な楽観主義者&lt;/li&gt;
&lt;li&gt;明確な悲観主義者&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;に人の考えたを分類していて、あいまいな楽観主義者のことをかなりボロクソに言っていた。&lt;/p&gt;

&lt;p&gt;現状に満足して大して何も考えていないのに、この先もよくなっていくんだろうとか考えているからみたい。&lt;/p&gt;

&lt;p&gt;ひたすら視点の高い本だった。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【読書】考える練習をしよう</title>
      <link>http://kotazi.github.io/blog/post/2016/0325_think_practice/</link>
      <pubDate>Wed, 23 Mar 2016 11:40:44 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0325_think_practice/</guid>
      <description>

&lt;p&gt;22冊目。&lt;/p&gt;

&lt;p&gt;&lt;a  href=&#34;http://www.amazon.co.jp/gp/product/4794919514/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4794919514&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;考える練習をしよう (子どものためのライフ・スタイル)&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=kotazi-22&amp;l=as2&amp;o=9&amp;a=4794919514&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;を読みました。&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;目次:4ac932a51ba653a1d49ba786ee1eb5a3&#34;&gt;目次&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;自己流で考えちゃダメだ&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;問題にぶつかったらどうするか&lt;/li&gt;
&lt;li&gt;頭にだって屈伸運動が必要だ&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;上記の3章をテーマに、かわいいイラストと簡単な思考クイズと共に、考え方について書かれている。
小学生でも楽しめそうな本。&lt;/p&gt;

&lt;p&gt;各項は数分で読める程度の内容になっているけれど、
そこからある程度、基本的な考え方について感じ取ることができる。&lt;/p&gt;

&lt;p&gt;小さい子供に、考え方のパターンや思考のプロセスについて教える時に参考になりそうな良書だった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;自分のことならよく知っているってホント？&lt;/li&gt;
&lt;li&gt;いつも見ているものをちゃんと見ること&lt;/li&gt;
&lt;li&gt;せまい見方ってどういうことだろう？&lt;/li&gt;
&lt;li&gt;いいセンスを持たなくちゃね&lt;/li&gt;
&lt;li&gt;ぶらぶら歩くことも大事だ&lt;/li&gt;
&lt;li&gt;なんだか分かる？&lt;/li&gt;
&lt;li&gt;むすびつかないものをむすびつけてみる&lt;/li&gt;
&lt;li&gt;知ってるつもりで知らない人たち&lt;/li&gt;
&lt;li&gt;ものの見かたは1つきりじゃない&lt;/li&gt;
&lt;li&gt;何が問題なのかはっきりさせること&lt;/li&gt;
&lt;li&gt;思いつきだけじゃダメだ&lt;/li&gt;
&lt;li&gt;どんな考えも書き出してみること&lt;/li&gt;
&lt;li&gt;理屈は1つってかぎらないんだ&lt;/li&gt;
&lt;li&gt;最後から考えてみる&lt;/li&gt;
&lt;li&gt;質問することはかっこいいんだ&lt;/li&gt;
&lt;li&gt;心を自由に遊ばせよう&lt;/li&gt;
&lt;li&gt;べつの人になったつもりで考えてみよう&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などなど。&lt;/p&gt;

&lt;p&gt;こういうことはなんだか知っている感じがするし、
実際に本を開いて読んでみると特に目新しいことが書いてあるわけじゃない。&lt;/p&gt;

&lt;p&gt;でも実際に自分が子どもにこういう話を教えられるかというとまた別で、
そういう気持ちで読んでみると「なるほど！」ということがたくさん書いてある。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【読書】ノヤン先生のマーケティング学</title>
      <link>http://kotazi.github.io/blog/post/2016/0310_marketing/</link>
      <pubDate>Tue, 22 Mar 2016 11:40:44 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0310_marketing/</guid>
      <description>

&lt;p&gt;19冊目。&lt;/p&gt;

&lt;p&gt;&lt;a  href=&#34;http://www.amazon.co.jp/gp/product/B00JXKGQLK/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00JXKGQLK&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;ノヤン先生のマーケティング学&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=kotazi-22&amp;l=as2&amp;o=9&amp;a=B00JXKGQLK&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;
を読みました。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;20年以上もマーケティングの研究を続けてきたノヤン先生。&lt;br /&gt;
マーケティングの歴史からフレームワーク、実践的な話などを網羅。&lt;br /&gt;
マーケティングの基礎理論を学ぶうえで最高の一冊。&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;目次:c943564f8684f1331a35f1e13e2ca07f&#34;&gt;目次&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;第1章 マーケティングを想像した巨匠たち&lt;/li&gt;
&lt;li&gt;第2章 マーケティングのフレームワークとセオリー&lt;/li&gt;
&lt;li&gt;第3章 顧客や製品、市場を評価するフレームワーク&lt;/li&gt;
&lt;li&gt;第4章 マーケティングのチャネルとツール&lt;/li&gt;
&lt;li&gt;第5章 マーケティングの組織とキャリア&lt;/li&gt;
&lt;li&gt;第6章 マーケティングの学び方と新しい潮流&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&#34;第1章-マーケティングを想像した巨匠たち:c943564f8684f1331a35f1e13e2ca07f&#34;&gt;第1章 マーケティングを想像した巨匠たち&lt;/h2&gt;

&lt;h4 id=&#34;マーケティングの巨匠:c943564f8684f1331a35f1e13e2ca07f&#34;&gt;マーケティングの巨匠&lt;/h4&gt;

&lt;h5 id=&#34;セオドア-レビット:c943564f8684f1331a35f1e13e2ca07f&#34;&gt;セオドア・レビット&lt;/h5&gt;

&lt;p&gt;1925年、ドイツ生まれ。&lt;br /&gt;
1960年に「マーケティング近視眼」を発表し、経営におけるマーケティングの重要性を説いた。&lt;br /&gt;
1983年の「After the Sales is Over」では、契約や八周書は顧客との長い関係の始まりであり、
その後の顧客とのリレーションが起業の明暗を分けるとして、&amp;rdquo;企業の最も大切な資産は顧客リレーションである&amp;rdquo;とも説いた。&lt;/p&gt;

&lt;p&gt;1968年に出版された「マーケティング発想法」の中の&amp;rdquo;ドリルを買う人が欲しいのは「穴」である&amp;rdquo;という言葉も有名。顧客の解決したい課題を正しく理解して、ようやく本当に必要なドリルのスペックが見えてくる。&lt;/p&gt;

&lt;h5 id=&#34;フィリップ-コトラー:c943564f8684f1331a35f1e13e2ca07f&#34;&gt;◯ フィリップ・コトラー&lt;/h5&gt;

&lt;p&gt;1931年、米国生まれ。&lt;br /&gt;
「企業の最も重要な業務は、新たな顧客を創造し、既存の顧客を維持することである」&lt;br /&gt;
「企業の資産は、顧客の存在を抜きにしたらほとんど価値がない」&lt;br /&gt;
「嘆かわしいことに、バランス良くマーケティングを学んだものでさえ、企業に入ると予算の大半を広告に使っている」&lt;/p&gt;

&lt;p&gt;多くの本や言葉を残した偉大な存在。&lt;br /&gt;
その中でも最も偉大な功績が下記の3つ。&lt;/p&gt;

&lt;p&gt;① マーケティングを体系化して編纂したこと&lt;br /&gt;
② STPというフレームワークを提唱したこと&lt;br /&gt;
③  ソーシャルマーケティングの分野を確立したこと&lt;/p&gt;

&lt;p&gt;80歳を超えた今でも現役のマーケティング学者として研究に明け暮れる。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「マーケティングは他の部門に影響を与えて、顧客満足を実現するよう協力しなければならない。」&lt;/strong&gt;&lt;/p&gt;

&lt;h5 id=&#34;マイケル-ポーター:c943564f8684f1331a35f1e13e2ca07f&#34;&gt;◯ マイケル・ポーター&lt;/h5&gt;

&lt;p&gt;1947年、米国生まれ。&lt;br /&gt;
経営戦略の代表的な学者。198-年に書いた「競争の戦略」はベストセラー。
その中で提唱したファイブフォースモデルは経営戦略の代表的なフレームワーク。&lt;/p&gt;

&lt;p&gt;ファイブフォース論はポジショニング論とも呼ばれ、産業もしくは業界を俯瞰的に評価する具体的な方法。
セグメントを決めるにあたって、参入するべきかどうかだけでなく、参入した後に守れるかどうかをチェックする。&lt;/p&gt;

&lt;p&gt;(ちなみに、無料化によって競合を駆逐する戦略は、ポーターの3つの基本戦略のひとつ、コストリーダーシップの発展系)&lt;/p&gt;

&lt;h5 id=&#34;ピーター-ドラッカー:c943564f8684f1331a35f1e13e2ca07f&#34;&gt;◯ ピーター・ドラッカー&lt;/h5&gt;

&lt;p&gt;1909年、オーストラリア生まれ。&lt;br /&gt;
マーケティングを志す人の必読書、1964年に「創造する経営者」を著書。&lt;br /&gt;
経営学の父とも、経営の神様とも呼ばれる。経営(マネジメント)を体系化し、学問分野へと確立した。&lt;/p&gt;

&lt;p&gt;「事業の目的は顧客の創造である」&lt;br /&gt;
「顧客が事業であるのと同じように、知識が事業である」&lt;br /&gt;
「事業とは、市場において知識という資源を経済価値に転換するプロセスである」&lt;/p&gt;

&lt;p&gt;「成果をあげるには、資源を、問題ではなく、機会に投じなければならない」&lt;br /&gt;
「顧客や市場について、企業が知っていると考えていることは、正しいことよりも間違っていることの方が多い」&lt;br /&gt;
「企業が売っていると考えているものを、顧客が買っていることは稀である」&lt;/p&gt;

&lt;h5 id=&#34;フレデリック-ランチェスター:c943564f8684f1331a35f1e13e2ca07f&#34;&gt;◯ フレデリック・ランチェスター&lt;/h5&gt;

&lt;p&gt;1868年、英国生まれ。
ナポレオンと同じ時代を生きた軍人。&lt;br /&gt;
「ランチェスターの法則」を考案した。&lt;br /&gt;
戦いの結果を詳しく分析する中で、空戦における戦闘機の損害を定量的に比較分析する手法を発見し、定理にまとめた。これが後にマーケティング古典のひとつになることになる。&lt;/p&gt;

&lt;h2 id=&#34;第2章-マーケティングのフレームワークとセオリー:c943564f8684f1331a35f1e13e2ca07f&#34;&gt;第2章 マーケティングのフレームワークとセオリー&lt;/h2&gt;

&lt;h5 id=&#34;stp:c943564f8684f1331a35f1e13e2ca07f&#34;&gt;◯ STP&lt;/h5&gt;

&lt;p&gt;フィリップ・コトラーが提唱。
マーケティングは「売れる仕組みを創ること」。&lt;br /&gt;
その仕組を設計するうえで欠かせないのがSTP。&lt;br /&gt;
セグメンテーションのS、ターゲティングのT、ポジショニングのPからなる。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;例えば、サラダ油メーカーのマーケティング担当者が競合製品として意識するのは、通常は競合サラダ油メーカー、あるいはごま油やオリーブオイルなどの調理用油製品じゃろう。でも「お中元・お歳暮などのギフトマーケット」と定義すれば、競合はビールやカルピス、石鹸等になるかもしれん。しかも、このギフトセグメントはサラダ油業界には無視できないマーケットサイズになんじゃ。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;実際のセグメント方法は、BtoCなら年齢、性別、職種、地域、趣味、所得レベル、家族構成などが基本的な切り方。BtoBの場合は、業種、業態、規模(社員数、売上、資本金など)、企業形態、地域などになる。そこに所属する個人ならば、所属部門、役職、担当などになる。&lt;/p&gt;

&lt;h5 id=&#34;swot分析:c943564f8684f1331a35f1e13e2ca07f&#34;&gt;◯ SWOT分析&lt;/h5&gt;

&lt;p&gt;もともとは、米国のコンサルティングの現場で使われ始めた戦略ツール。&lt;br /&gt;
1960年代にスタンフォード大学でSWOT分析として確立された。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;強み: Strength&lt;/li&gt;
&lt;li&gt;弱み: Weakness&lt;/li&gt;
&lt;li&gt;機会: Opportunity&lt;/li&gt;
&lt;li&gt;脅威: Threat&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の4つに分けて、評価・分析する手法。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;客観性を確保する&lt;/li&gt;
&lt;li&gt;目的を明確に定義する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この2つを大前提とする。&lt;/p&gt;

&lt;h5 id=&#34;戦闘教義:c943564f8684f1331a35f1e13e2ca07f&#34;&gt;◯ 戦闘教義&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;戦闘教義&lt;/strong&gt;は「&lt;strong&gt;バトルドクトリン&lt;/strong&gt;」とも呼ばれ、企業の勝ちパターンのこと。
マーケティング戦略の根幹を成す、「どう戦えば勝てるか」という考え方。&lt;/p&gt;

&lt;h5 id=&#34;サイバネティクス理論:c943564f8684f1331a35f1e13e2ca07f&#34;&gt;◯ サイバネティクス理論&lt;/h5&gt;

&lt;p&gt;アメリカの科学者でマサチューセッツ工科大学の教授だったノーバート・ウィーナーに提唱された、通信工学と制御工学を融合した理論。
1948年に出版した「サイバネティクス」はベストセラーとなった科学論文。数千キロ先の目的地へ辿り着く渡り鳥の軌道修正についての論文。&lt;/p&gt;

&lt;p&gt;この理論を元に、アメリカの整形外科医で臨床心理学者でもあったマクスウェルマルツが「サイコ・サイバネティクス」を提唱。人間の内面にも軌道修正しながら本来の自分(目的地)に近づく機能が備わっているという理論。&lt;/p&gt;

&lt;p&gt;このサイコ・サイバネティクスとサイコ・セラピーが融合したものが日本で流行っている自己啓発セミナー。
自己啓発プログラムと訪問販売が結びついたのが、マルチ商法と呼ばれるマルチレベルマーケティング。&lt;/p&gt;

&lt;h5 id=&#34;マーチャンダイズ戦略:c943564f8684f1331a35f1e13e2ca07f&#34;&gt;◯ マーチャンダイズ戦略&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;マーチャンダイジング&lt;/strong&gt; は教義で言えば、仕入れ・品揃えを指すが、広義では商品・サービスの開発や調達、人事トレーニングを含めた戦略的な言葉。&lt;/p&gt;

&lt;p&gt;ディズニーのテーマパーク内で敷地外の看板などが見えないようになっていること、アップルの箱を手にした瞬間から始まるユーザー体験なども。&lt;/p&gt;

&lt;h5 id=&#34;カニバリゼーション:c943564f8684f1331a35f1e13e2ca07f&#34;&gt;◯ カニバリゼーション&lt;/h5&gt;

&lt;p&gt;カニバリゼーションの語源は生物学の用語であり、共食いのこと。&lt;br /&gt;
マーケティングの世界でも同じ私情でシェアを奪い合うことを指す。&lt;/p&gt;

&lt;p&gt;必ずしもネガティブなことではなく、マーケティング設計上、自社製品をうまくカニバらせることで他社の入る余地を無くすような戦略もある。
トヨタはこのような戦略をとっており、トヨタのディーラーの営業にとっての競合は他社製品ではなく自社製品。&lt;/p&gt;

&lt;h5 id=&#34;4pと4c:c943564f8684f1331a35f1e13e2ca07f&#34;&gt;◯ 4Pと4C&lt;/h5&gt;

&lt;p&gt;マーケティングミックスというフレームワークがあり、これがいわゆる4P。
1960年代前半にアメリカのジェローム・マッカーシー経済学者が提唱した。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;製品: Product&lt;/li&gt;
&lt;li&gt;流通: Place&lt;/li&gt;
&lt;li&gt;価格: Price&lt;/li&gt;
&lt;li&gt;販促: Promotion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;STPでは市場を細分化し、勝負すべきターゲットセグメントを決定して、ターゲットを相手にした製品を開発する。4Pでは製品開発から販売プロモーションまでのフレームワーク。そのため前提にSTPがある。&lt;/p&gt;

&lt;p&gt;ターゲットセグメントのニーズに対応した「製品」を開発し、彼らに届けるために最も効率的な「流通網」を構築し、その流通チャネルが最も活性化する「価格」を設定し、ターゲットセグメントに対して最も効果的な「プロモーション」を展開するという考え方。&lt;/p&gt;

&lt;p&gt;ラウターボーンという、広告関係の論文を多く発表しているアメリカの経済学者が1990年に4Cを提唱。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;顧客価値: Customer Value&lt;/li&gt;
&lt;li&gt;顧客利便性: Convenience&lt;/li&gt;
&lt;li&gt;顧客にとっての経費: Cost&lt;/li&gt;
&lt;li&gt;顧客とのコミュニケーション: Communication&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;ソリューションブランド:c943564f8684f1331a35f1e13e2ca07f&#34;&gt;◯ ソリューションブランド&lt;/h5&gt;

&lt;p&gt;ブランドには大きく、「企業ブランド」「製品ブランド」「ソリューションブランド」がある。&lt;/p&gt;

&lt;p&gt;「ソリューションブランド」とは文字通り、その会社がどういう問題を解決できるのか、何ができるのか、何が得意なのかということを提供する価値のブランド。&lt;/p&gt;

&lt;p&gt;ソリューションブランドを創るには、ターゲットにできるだけ具体的な事例を伝え続けるしかない。「快適なビジネス環境をサポートする」などという抽象的なメッセージでは企業ブランドを上げることはできてもソリューションブランドをあげることはできない。&lt;/p&gt;

&lt;h2 id=&#34;第3章-顧客や製品-市場を評価するフレームワーク:c943564f8684f1331a35f1e13e2ca07f&#34;&gt;第3章 顧客や製品、市場を評価するフレームワーク&lt;/h2&gt;

&lt;h5 id=&#34;rfm分析:c943564f8684f1331a35f1e13e2ca07f&#34;&gt;◯ RFM分析&lt;/h5&gt;

&lt;p&gt;顧客分析手法。ABC分析とRFM分析が代表的。
ABC分析は、売れ筋商品と死に筋商品を分別する在庫分析などに使われる。RFM分析は顧客の売上への貢献度セグメントなどに使われる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Recency: 最終購買日&lt;/li&gt;
&lt;li&gt;Frequency: 購買頻度&lt;/li&gt;
&lt;li&gt;Monetary: 購買金額&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この3つの要素を5~7段階にランク付けをして、その組み合わせで最も大切にすべきお客様を探す。&lt;/p&gt;

&lt;h5 id=&#34;ライフタイムバリュー:c943564f8684f1331a35f1e13e2ca07f&#34;&gt;◯ ライフタイムバリュー&lt;/h5&gt;

&lt;p&gt;ライフタイムバリュー(LTV)とは、顧客生涯価値と訳される。単発的な売上ではなく、その顧客が生まれてから死ぬまでの間にもたらしてくれる価値。&lt;/p&gt;

&lt;h5 id=&#34;bant条件:c943564f8684f1331a35f1e13e2ca07f&#34;&gt;◯ BANT条件&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Budget(予算): 予算はあるのか？&lt;/li&gt;
&lt;li&gt;Authority(決裁権): 今合っている人は決定権を持っているのか？&lt;/li&gt;
&lt;li&gt;Needs(必要性): 個人の興味ではなく企業として必要性が高いのか？&lt;/li&gt;
&lt;li&gt;Timeframe(導入時期): 導入・購入する時期が具体的に決まっているのか？&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;パレートの法則:c943564f8684f1331a35f1e13e2ca07f&#34;&gt;◯ パレートの法則&lt;/h5&gt;

&lt;p&gt;イタリアの経済学者ヴィルフレド・パレートによって1990年代の初頭に提唱されたもので、20:80の法則とも呼ばれる。
20%の不要うそうに社会全体の富が集中し、残りの20%の富を80%の非富裕層がわけあっているというもの。&lt;/p&gt;

&lt;h5 id=&#34;ロングテール:c943564f8684f1331a35f1e13e2ca07f&#34;&gt;◯ ロングテール&lt;/h5&gt;

&lt;p&gt;インターネット系の情報誌ワイヤードの編集長だったクリス・アンダーソンが2000年ごろに提唱した。
アマゾンやebayの売上構成を説明するために使った言葉で、縦軸に販売量、横軸に書籍のアイテムや購入顧客をとってグラフにすると、しっぽの長いシルエットのようになるから付いた名前。&lt;/p&gt;

&lt;h5 id=&#34;イノベーター理論:c943564f8684f1331a35f1e13e2ca07f&#34;&gt;◯ イノベーター理論&lt;/h5&gt;

&lt;p&gt;イノベーター理論とは1962年、米国スタンフォード大の社会学の教授だったエベレット・ロジャーズが著書「イノベーション普及学」で提唱した理論。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;イノベーター&amp;hellip;革新的購入者(2.5%)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;アーリーアダプター&amp;hellip;初期購入者(13.5%)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;アーリーマジョリティ&amp;hellip;初期主要購入者(34%)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;レイターマジョリティ&amp;hellip;後期主要購入者(34%)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;ラガード&amp;hellip;購入遅滞者(16%)&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;例えばFAXを初期に購入した人は、イノベーター。&lt;br /&gt;
送る相手もいないのになぜ購入したかといえば、まだ誰も持っていないから。&lt;/p&gt;

&lt;h5 id=&#34;ホールプロダクト:c943564f8684f1331a35f1e13e2ca07f&#34;&gt;◯ ホールプロダクト&lt;/h5&gt;

&lt;p&gt;セオドア・レビットが提唱。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;コアプロダクト&lt;/li&gt;
&lt;li&gt;期待プロダクト&lt;/li&gt;
&lt;li&gt;閣僚プロダクト&lt;/li&gt;
&lt;li&gt;理想プロダクト&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apple製品などが好例。&lt;/p&gt;

&lt;h5 id=&#34;ppm-プロダクト-ポートフォリオ-マネジメント:c943564f8684f1331a35f1e13e2ca07f&#34;&gt;◯ PPM(プロダクト・ポートフォリオ・マネジメント)&lt;/h5&gt;

&lt;p&gt;マーケティング戦略を立案するうえで必要な、担当する事業や製品、サービスの市場でのポジションを把握すること。それを診断するためのフレームワーク。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Problem child: 問題児&lt;/li&gt;
&lt;li&gt;Star: 花形&lt;/li&gt;
&lt;li&gt;Cash cow: 金のなる木&lt;/li&gt;
&lt;li&gt;Dog: 負け犬&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「経営とは経営資源の再分配である。」とも言われる。
PPMは縦軸に市場の成長率(可能性)を、横軸に自社のシェア(競合優位性)をとって、上の4つの象限を作成し、
そこに自社の製品や事業をプロとして分類していく手法。&lt;/p&gt;

&lt;h2 id=&#34;第4章-マーケティングのチャネルとツール:c943564f8684f1331a35f1e13e2ca07f&#34;&gt;第4章 マーケティングのチャネルとツール&lt;/h2&gt;

&lt;h5 id=&#34;romi:c943564f8684f1331a35f1e13e2ca07f&#34;&gt;◯ ROMI&lt;/h5&gt;

&lt;p&gt;ROMI(Return On Marketing Investment: マーケティング投資回収率)。&lt;br /&gt;
効果測定が難しい分野であり、実際正しく定量的にベンチマークで着ている企業はほとんど存在しない。&lt;/p&gt;

&lt;h5 id=&#34;デマンドジェネレーション:c943564f8684f1331a35f1e13e2ca07f&#34;&gt;◯ デマンドジェネレーション&lt;/h5&gt;

&lt;p&gt;営業案件の創出という意味。マーケティング活動を経て、営業部門へホットリストを渡すまでの活動全般を指す。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;リードジェネレーション: 見込み客獲得&lt;/li&gt;
&lt;li&gt;リードナーチャリング: 見込み客育成&lt;/li&gt;
&lt;li&gt;リードクオリフィケーション: 見込み客の絞込&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;kpi:c943564f8684f1331a35f1e13e2ca07f&#34;&gt;◯ KPI&lt;/h5&gt;

&lt;p&gt;KPI(Key Performance Indicator: 重要業績評価指標)。&lt;br /&gt;
企業活動をモニタリングする指標のひとつであり、目標達成を定量的に測定するためのもの。&lt;/p&gt;

&lt;h2 id=&#34;第5章-マーケティングの組織とキャリア:c943564f8684f1331a35f1e13e2ca07f&#34;&gt;第5章 マーケティングの組織とキャリア&lt;/h2&gt;

&lt;p&gt;日本は欧米に比べてマーケティングに遅れている。
欧米企業がなぜ基本を踏まえた経営戦略を実行できるかといえば、経営戦略を体系的に学び、トレーニングを積んだ人材を抱えているということに尽きる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;マイケル・ポーター 「競争の戦略」&lt;/li&gt;
&lt;li&gt;フィリップ・コトラー 「マーケティング・マネジメント」&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;すごく勉強になったので、端的にまとめてしまったけれど、絶対に買うことをおすすめする。&lt;/p&gt;

&lt;p&gt;&lt;a  href=&#34;http://www.amazon.co.jp/gp/product/B00JXKGQLK/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00JXKGQLK&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;ノヤン先生のマーケティング学&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=kotazi-22&amp;l=as2&amp;o=9&amp;a=B00JXKGQLK&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;「マーケティング」をここまで読みやすくまとめてくれている本は他にないと思う。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【git】There is an existing release branchへの対処</title>
      <link>http://kotazi.github.io/blog/post/2016/0316_git_flow/</link>
      <pubDate>Wed, 16 Mar 2016 13:01:21 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0316_git_flow/</guid>
      <description>&lt;p&gt;&lt;code&gt;git flow&lt;/code&gt;のメモ。&lt;/p&gt;

&lt;p&gt;リリースをしようとした時に下記のような注意が出てしまった。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/W/ git:develop ❯❯❯ git flow release start 2016-03-16-0349
There is an existing release branch (2016-03-14-0349). Finish that one first.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;リリースブランチを作成しようと思ったけれど、もうあるからまずはそれを完了させてくれとのこと。&lt;br /&gt;
webからgithubを確認すると既に&lt;code&gt;2016-03-14-0349&lt;/code&gt;があるから何でだろうと。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/W/ git:develop ❯❯❯ git branch | grep release
  release/2016-03-14-0349
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;grepしてみるとブランチが存在してる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/W/ git:develop ❯❯❯ git branch -D release/2016-03-14-0349
Deleted branch release/2016-03-14-0349 (was 0c652fd).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ブランチを削除して完了。無事にリリース作業に移れた。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【読書】ネットコミュニティの設計と力　つながる私たちの時代</title>
      <link>http://kotazi.github.io/blog/post/2016/0312_internet/</link>
      <pubDate>Sat, 12 Mar 2016 23:29:19 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0312_internet/</guid>
      <description>

&lt;p&gt;18冊目。&lt;/p&gt;

&lt;p&gt;&lt;a  href=&#34;http://www.amazon.co.jp/gp/product/4046538856/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4046538856&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;角川インターネット講座 (5) ネットコミュニティの設計と力 つながる私たちの時代&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=kotazi-22&amp;l=as2&amp;o=9&amp;a=4046538856&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;を読みました。&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;目次-http-kci-salon-jp-books-05:eb76b670aa6799b46f00323bbec081f8&#34;&gt;&lt;a href=&#34;http://kci-salon.jp/books/05/&#34;&gt;目次&lt;/a&gt;&lt;/h3&gt;

&lt;h5 id=&#34;第1部-人間の集まるコミュニティを設計する:eb76b670aa6799b46f00323bbec081f8&#34;&gt;◯ 第1部 人間の集まるコミュニティを設計する&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;序章　日本のインターネットコミュニティ   　…近藤 淳也 著&lt;/li&gt;
&lt;li&gt;第1章　ソーシャルメディアの発生と進化  　…yomoyomo 著&lt;/li&gt;
&lt;li&gt;第2章　恋愛論的コミュニティサイト運営術  　…Hagex 著&lt;/li&gt;
&lt;li&gt;第3章　人が集まるコミュニティのつくり方 　…古川 健介 著&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;第2部-私たちのコミュニティはと-こへ向かうのか:eb76b670aa6799b46f00323bbec081f8&#34;&gt;◯ 第2部 私たちのコミュニティはどこへ向かうのか?&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;第4章　サル学から考える人間のコミュニティの未来  　…山極 寿一 著&lt;/li&gt;
&lt;li&gt;第5章　情報技術とリアルコミュニティ    　…広井 良典 著&lt;/li&gt;
&lt;li&gt;第6章　コミュニティと人の力    　…近藤 淳也 著&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;本書のテーマはインターネットコミュニティ。&lt;br /&gt;
僕自身インターネットを仕事にしていこうと考えたのは、
コミュニティだとか、コミュニケーションのあり方が
これからのインターネットによって再構築されていくだろうと感じたことが大きかった。
だから強い関心を持って読めた。&lt;/p&gt;

&lt;p&gt;思えば少し前までインターネットコミュニティでは、
匿名であるべき、実名であるべきだとか、
レビューの信頼性がどうとかあったけれど、
いつの間にかそういう議論も少なくなり、
多くの人々がそれぞれのインターネットコミュニティの特性を理解して使い分けれるようになったと思う。&lt;/p&gt;

&lt;p&gt;それ自体はいいことだと思うけれど、その反面、
道の輝きを放っていたインターネットコミュニティも
ある程度「こういうもの」みたいなイメージが出来上がってきてしまったようにも感じる。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>better-npm-runを使ってpackage.jsonを整備</title>
      <link>http://kotazi.github.io/blog/post/2016/0310_better-npm-run/</link>
      <pubDate>Thu, 10 Mar 2016 15:45:52 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0310_better-npm-run/</guid>
      <description>&lt;p&gt;ReduxのStarterKitを触っていて気付いたのでメモ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/benoror/better-npm-run&#34;&gt;benoror/better-npm-run&lt;/a&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt;内でのハードコーディングを避ける。&lt;/p&gt;

&lt;p&gt;下記のように書く。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;scripts&amp;quot;: {
  &amp;quot;compile&amp;quot;: &amp;quot;better-npm-run compile&amp;quot;,
  &amp;quot;start&amp;quot;: &amp;quot;better-npm-run start&amp;quot;,
  &amp;quot;dev&amp;quot;: &amp;quot;better-npm-run dev&amp;quot;,
  &amp;quot;test&amp;quot;: &amp;quot;better-npm-run test&amp;quot;
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;better-npm-run&lt;/code&gt;がどのように動作するかというと、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;betterScripts&amp;quot;: {
  &amp;quot;compile&amp;quot;: {
    &amp;quot;command&amp;quot;: &amp;quot;babel-node bin/compile&amp;quot;,
    &amp;quot;env&amp;quot;: {
      &amp;quot;DEBUG&amp;quot;: &amp;quot;app:*&amp;quot;
    }
  },
  &amp;quot;dev&amp;quot;: {
    &amp;quot;command&amp;quot;: &amp;quot;nodemon --exec babel-node bin/server&amp;quot;,
    &amp;quot;env&amp;quot;: {
      &amp;quot;NODE_ENV&amp;quot;: &amp;quot;development&amp;quot;,
      &amp;quot;DEBUG&amp;quot;: &amp;quot;app:*&amp;quot;
    }
  },
  &amp;quot;deploy&amp;quot;: {
    &amp;quot;command&amp;quot;: &amp;quot;npm run clean &amp;amp;&amp;amp; npm run compile&amp;quot;,
    &amp;quot;env&amp;quot;: {
      &amp;quot;NODE_ENV&amp;quot;: &amp;quot;production&amp;quot;,
      &amp;quot;DEBUG&amp;quot;: &amp;quot;app:*&amp;quot;
    }
  },
  &amp;quot;start&amp;quot;: {
    &amp;quot;command&amp;quot;: &amp;quot;babel-node bin/server&amp;quot;,
    &amp;quot;env&amp;quot;: {
      &amp;quot;DEBUG&amp;quot;: &amp;quot;app:*&amp;quot;
    }
  },
  &amp;quot;test&amp;quot;: {
    &amp;quot;command&amp;quot;: &amp;quot;babel-node ./node_modules/karma/bin/karma start build/karma.conf&amp;quot;,
    &amp;quot;env&amp;quot;: {
      &amp;quot;NODE_ENV&amp;quot;: &amp;quot;test&amp;quot;,
      &amp;quot;DEBUG&amp;quot;: &amp;quot;app:*&amp;quot;
    }
  }
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じになる。
冗長になりがちなpackage.jsonがきれいに。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ファイルやディレクトリの削除にはrimrafを使う</title>
      <link>http://kotazi.github.io/blog/post/2016/0310_rimraf/</link>
      <pubDate>Wed, 09 Mar 2016 15:36:56 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0310_rimraf/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/isaacs/rimraf&#34;&gt;isaacs/rimraf&lt;/a&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;コールバッグも使える。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rm -rf&lt;/code&gt;の代わりぐらいに使おうかな。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【読書】ビジネスモデル・ジェネレーション</title>
      <link>http://kotazi.github.io/blog/post/2016/0309_business/</link>
      <pubDate>Tue, 08 Mar 2016 11:40:44 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0309_business/</guid>
      <description>

&lt;p&gt;17冊目。&lt;/p&gt;

&lt;p&gt;&lt;a  href=&#34;http://www.amazon.co.jp/gp/product/4798122971/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4798122971&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;ビジネスモデル・ジェネレーション ビジネスモデル設計書&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=kotazi-22&amp;l=as2&amp;o=9&amp;a=4798122971&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;
を読みました。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;作家アレックス・オスターワルダーの著書。
ビジネスモデルをフレームワーク化し、さまざまな起業のビジネスモデルを
そのフレームワークに当てはめながら事例を紹介する。&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;目次:612fa179e825e4964c8b6172a0206750&#34;&gt;目次&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Canvas&lt;/li&gt;
&lt;li&gt;Patterns&lt;/li&gt;
&lt;li&gt;Design&lt;/li&gt;
&lt;li&gt;Strategy&lt;/li&gt;
&lt;li&gt;Process&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&#34;canvas:612fa179e825e4964c8b6172a0206750&#34;&gt;Canvas&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;[定義]ビジネスモデルとは、どのように価値を創造し、顧客に届けるかを論理的に記述したもの&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;9つの構築ブロック:612fa179e825e4964c8b6172a0206750&#34;&gt;9つの構築ブロック&lt;/h4&gt;

&lt;h5 id=&#34;customer-segments:612fa179e825e4964c8b6172a0206750&#34;&gt;◯ Customer Segments&lt;/h5&gt;

&lt;p&gt;誰のために価値を想像するのか？最も重要な顧客は誰なのか？
- マス市場
- ニッチ市場
- 細分化
- 多角化
- マルチサイドプラットフォーム&lt;/p&gt;

&lt;h5 id=&#34;value-propositions:612fa179e825e4964c8b6172a0206750&#34;&gt;◯ Value Propositions&lt;/h5&gt;

&lt;p&gt;顧客にどんな価値を提供するのか？
どういった問題の解決を手助けするのか？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;新規性&lt;/li&gt;
&lt;li&gt;パフォーマンス&lt;/li&gt;
&lt;li&gt;カスタマイゼーション&lt;/li&gt;
&lt;li&gt;「仕事を終らせる」&lt;/li&gt;
&lt;li&gt;ブランド&lt;/li&gt;
&lt;li&gt;価格&lt;/li&gt;
&lt;li&gt;デザイン&lt;/li&gt;
&lt;li&gt;コスト削減&lt;/li&gt;
&lt;li&gt;アクセスしやすさ&lt;/li&gt;
&lt;li&gt;リスクの低減&lt;/li&gt;
&lt;li&gt;快適さ/使いやすさ&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;channels:612fa179e825e4964c8b6172a0206750&#34;&gt;◯ Channels&lt;/h5&gt;

&lt;p&gt;どのチャネルを通じて、顧客セグメントに立直したいか。
チャネルを顧客の日常と、どのように統合すればよいか。&lt;/p&gt;

&lt;p&gt;[チャネルフェーズ]
- 認知
- 評価
- 購入
- 提供
- アフターサービス&lt;/p&gt;

&lt;h5 id=&#34;customer-relationships:612fa179e825e4964c8b6172a0206750&#34;&gt;◯ Customer Relationships&lt;/h5&gt;

&lt;p&gt;顧客セグメントがどんな関係を構築、維持してほしいと期待しているのか。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;パーソナルアシスタンス&lt;/li&gt;
&lt;li&gt;専任のパーソナルアシスタンス&lt;/li&gt;
&lt;li&gt;セルフサービス&lt;/li&gt;
&lt;li&gt;自動サービス&lt;/li&gt;
&lt;li&gt;コミュニティ&lt;/li&gt;
&lt;li&gt;共創&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;revenue-stream:612fa179e825e4964c8b6172a0206750&#34;&gt;◯ Revenue Stream&lt;/h5&gt;

&lt;p&gt;顧客はどんな価値にお金を払おうとするのか。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;資産価値のある商品の販売&lt;/li&gt;
&lt;li&gt;使用料&lt;/li&gt;
&lt;li&gt;購読料&lt;/li&gt;
&lt;li&gt;レンタル/リース&lt;/li&gt;
&lt;li&gt;ライセンス&lt;/li&gt;
&lt;li&gt;仲介手数料&lt;/li&gt;
&lt;li&gt;広告&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また、これらのそれぞれに異なる価格メカニズムが存在する。&lt;/p&gt;

&lt;h5 id=&#34;key-resources:612fa179e825e4964c8b6172a0206750&#34;&gt;◯ Key Resources&lt;/h5&gt;

&lt;p&gt;価値を提案するのに必要なリソースはなんだろうか。
流通チャネルや顧客との関係、収益の流れに対してはどうだろうか。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;物理的なリソース&lt;/li&gt;
&lt;li&gt;知的財産&lt;/li&gt;
&lt;li&gt;人的リソース&lt;/li&gt;
&lt;li&gt;ファイナンスリソース&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;key-activities:612fa179e825e4964c8b6172a0206750&#34;&gt;◯ Key Activities&lt;/h5&gt;

&lt;p&gt;価値を提案するのに必要な腫瘍活動は何なのか？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;製造&lt;/li&gt;
&lt;li&gt;問題解決&lt;/li&gt;
&lt;li&gt;プラットフォーム/ネットワーク&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;key-partners:612fa179e825e4964c8b6172a0206750&#34;&gt;◯ Key Partners&lt;/h5&gt;

&lt;p&gt;主要なパートナーは誰だろうか&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;最適化と規模の経済&lt;/li&gt;
&lt;li&gt;リスクと不確実性の低減&lt;/li&gt;
&lt;li&gt;リソースと活動の獲得&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;cost-structure:612fa179e825e4964c8b6172a0206750&#34;&gt;◯ Cost Structure&lt;/h5&gt;

&lt;p&gt;ビシネスモデルにおいて最も重要なコストはなんだろうか？
どのリソースが最も高価だろうか？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;コスト主導&lt;/li&gt;
&lt;li&gt;価値主導&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;patterns:612fa179e825e4964c8b6172a0206750&#34;&gt;Patterns&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;アンバンドルビジネスモデル&lt;/li&gt;
&lt;li&gt;ロングテール&lt;/li&gt;
&lt;li&gt;マルチサイドプラットフォーム&lt;/li&gt;
&lt;li&gt;ビジネスモデルとしてのフリー戦略&lt;/li&gt;
&lt;li&gt;フリーミアム&lt;/li&gt;
&lt;li&gt;餌と釣り針パターン&lt;/li&gt;
&lt;li&gt;オープンビジネスモデル&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;design:612fa179e825e4964c8b6172a0206750&#34;&gt;Design&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;顧客インサイト&lt;/li&gt;
&lt;li&gt;アイディア創造&lt;/li&gt;
&lt;li&gt;ビジュアルシンキング&lt;/li&gt;
&lt;li&gt;ストーリーテリング&lt;/li&gt;
&lt;li&gt;プロトタイピング&lt;/li&gt;
&lt;li&gt;シナリオ&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;strategy:612fa179e825e4964c8b6172a0206750&#34;&gt;Strategy&lt;/h2&gt;

&lt;h4 id=&#34;市場における圧力:612fa179e825e4964c8b6172a0206750&#34;&gt;市場における圧力&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;市場の論点&lt;/li&gt;
&lt;li&gt;市場セグメント&lt;/li&gt;
&lt;li&gt;需要と供給&lt;/li&gt;
&lt;li&gt;スイッチングコスト&lt;/li&gt;
&lt;li&gt;収益の魅力&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;産業における圧力:612fa179e825e4964c8b6172a0206750&#34;&gt;産業における圧力&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;競合&lt;/li&gt;
&lt;li&gt;新規参入&lt;/li&gt;
&lt;li&gt;代替品&lt;/li&gt;
&lt;li&gt;サプライヤー&lt;/li&gt;
&lt;li&gt;ステークホルダー&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;重要なトレンド:612fa179e825e4964c8b6172a0206750&#34;&gt;重要なトレンド&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;技術のトレンド&lt;/li&gt;
&lt;li&gt;規制のトレンド&lt;/li&gt;
&lt;li&gt;社会的、文化的なトレンド&lt;/li&gt;
&lt;li&gt;社会経済のトレンド&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;マクロ経済の圧力:612fa179e825e4964c8b6172a0206750&#34;&gt;マクロ経済の圧力&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;グローバル市場の状況&lt;/li&gt;
&lt;li&gt;資本市場&lt;/li&gt;
&lt;li&gt;原料や他のリソース&lt;/li&gt;
&lt;li&gt;経済インフラ&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;フレームワークが果たして有用なのかは分からなかったが、
ビジネスモデルが体系化されることで、ビジネスを考えるうえで最低限検討しなければいけない箇所を
頭のなかにマッピングできたのでよかった。&lt;/p&gt;

&lt;p&gt;事業でもサービスでも何でもそうなんだけど、
複数の要素が絡まって成り立っている。&lt;/p&gt;

&lt;p&gt;複数人で話しあえばそれそれにとって
優先度や移り方も違うのでうまく共有することができない。&lt;/p&gt;

&lt;p&gt;そういう意味でこのようにビジュアライズするための
共通フレームワークを持っておくべきというのはすごくある。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【読書】道は開ける</title>
      <link>http://kotazi.github.io/blog/post/2016/0308_carnegie/</link>
      <pubDate>Tue, 08 Mar 2016 11:40:44 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0308_carnegie/</guid>
      <description>

&lt;p&gt;16冊目。&lt;/p&gt;

&lt;p&gt;&lt;a  href=&#34;http://www.amazon.co.jp/gp/product/B00Q9NQ8NA/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00Q9NQ8NA&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;新訳　道は開ける 角川文庫&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=kotazi-22&amp;l=as2&amp;o=9&amp;a=B00Q9NQ8NA&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;
を読みました。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;鉄鋼王や実業家としても名高い、「人を動かす」の著者デール・カーネギー。&lt;br /&gt;
そのカーネギーのもう一つの代表的な著書であり、悩みへの対処法について書かれている。&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;目次:de775a07d34a506ba96c546e4363d36d&#34;&gt;目次&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;そもそも不安とは何なのか&lt;/li&gt;
&lt;li&gt;不安分析の基本テクニック&lt;/li&gt;
&lt;li&gt;不安の習慣。その先手を打つには&lt;/li&gt;
&lt;li&gt;平穏と幸福とをもたらす心のあり方を育てる七つの方法&lt;/li&gt;
&lt;li&gt;不安に打ち勝つ黄金率&lt;/li&gt;
&lt;li&gt;批判を気にせず忘れる方法&lt;/li&gt;
&lt;li&gt;疲労と不安を予防して元気になる六つの方法&lt;/li&gt;
&lt;li&gt;幸福と成功をもたらす仕事の見つけかた&lt;/li&gt;
&lt;li&gt;お金の不安を軽くするには&lt;/li&gt;
&lt;li&gt;私はこうして不安を乗り越えた三十二の実話&lt;/li&gt;
&lt;/ol&gt;

&lt;hr&gt;

&lt;h3 id=&#34;名言まとめ:de775a07d34a506ba96c546e4363d36d&#34;&gt;名言まとめ&lt;/h3&gt;

&lt;p&gt;「賢者位には毎日が新たなる人生である」&lt;/p&gt;

&lt;p&gt;「鉄の扉で過去と未来を閉ざし、今日という一区切りを生きる」&lt;/p&gt;

&lt;p&gt;「私が何より励まされるのは、人はたゆまぬ努力によって人生を向上させてゆく力をはっきり持っているのだ、ということだ。もし胸を張って夢の道を歩き、思い描いた人生に向けて努力ができるのであれば、人は創造もしなかったような成功を収めることができる」&lt;/p&gt;

&lt;p&gt;「小さなことにこだわっている間に、人生は終わってしまう。」&lt;/p&gt;

&lt;p&gt;「人生とは、人の思考が作り上げるものだ。」&lt;/p&gt;

&lt;p&gt;「人は心で思ったとおりの人間になる。」&lt;/p&gt;

&lt;p&gt;「人はできごとそのものではなく、できごとを自分がどう見るかで木津付くのである。」&lt;/p&gt;

&lt;p&gt;「感謝とは、深い教養に実る果実である。粗野な人びとの中には、決して見つかりはしない。」&lt;/p&gt;

&lt;p&gt;「人は、意識の中にあるものしか表現できない。」&lt;/p&gt;

&lt;p&gt;「あなたは、この世界にただ一人の、新しい人間だ。それは、とても素晴らしいことなのだ。持って生まれたものを、最大限に活かさなくてはいけない。」&lt;/p&gt;

&lt;p&gt;「人が自らの責任をしっかりと背負えば、どんな状況であろうとも成功と幸福が訪れる。」&lt;/p&gt;

&lt;p&gt;「善行とは、人の顔に喜びの笑みをもたらす行為である。」&lt;/p&gt;

&lt;p&gt;「人は人生を理解するためにではなく、人生を生きるために作られたのだ」&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;大学生の頃、自己啓発本は一通り読んだけれど社会人になってから読んだのは久しぶりだった。
カーネギーは文章がうまく、ものすごく読みやすい。&lt;/p&gt;

&lt;p&gt;自己啓発書に書いてあることは実は当たり前の事が多いので、たまに読みなおして調子を調えるのはいいかも。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【読書】インターネットの基礎　〜ネットが生んだ文化　誰もが表現者の時代〜</title>
      <link>http://kotazi.github.io/blog/post/2016/0302_internet/</link>
      <pubDate>Wed, 02 Mar 2016 11:40:44 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0302_internet/</guid>
      <description>

&lt;p&gt;15冊目。&lt;/p&gt;

&lt;p&gt;&lt;a  href=&#34;http://www.amazon.co.jp/gp/product/B00OLCSSE8/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00OLCSSE8&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;角川インターネット講座４　ネットが生んだ文化　誰もが表現者の時代&amp;lt;角川インターネット講座&amp;gt; (角川学芸出版全集)&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=kotazi-22&amp;l=as2&amp;o=9&amp;a=B00OLCSSE8&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;を読みました。&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;目次-http-kci-salon-jp-books-04:730b0a221a085ebaf7ce0d944e571290&#34;&gt;&lt;a href=&#34;http://kci-salon.jp/books/04/&#34;&gt;目次&lt;/a&gt;&lt;/h3&gt;

&lt;h5 id=&#34;第1部-日本のネット文化と精神風土:730b0a221a085ebaf7ce0d944e571290&#34;&gt;◯ 第1部 日本のネット文化と精神風土&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;序章　ネットがつくった文化圏    　…川上 量生 著&lt;/li&gt;
&lt;li&gt;第1章　日本のネットカルチャー史  　…ばるぼら 著&lt;/li&gt;
&lt;li&gt;第2章　ネットの言論空間形成    　…佐々木 俊尚 著&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;第2部-ネット文化を支配する原理:730b0a221a085ebaf7ce0d944e571290&#34;&gt;◯ 第2部 ネット文化を支配する原理&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;第3章　リア充対非リアの不毛な戦い 　…小野 ほりでい 著&lt;/li&gt;
&lt;li&gt;第4章　炎上の構造 　…萩上 チキ 著&lt;/li&gt;
&lt;li&gt;第5章　祭りと血祭り　炎上の社会学 　…伊藤 昌亮 著&lt;/li&gt;
&lt;li&gt;第6章　日本文化にみるコピペのルール    　…山田 奨治 著&lt;/li&gt;
&lt;li&gt;第7章　リア充/非リア充の構造   　…仲正 昌樹 著&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;これを読むまでしっかりとインターネットにおける著作権問題についてしっかりと考えたことがなかった。
そもそも著作権が生まれた経緯についてしっかりと書かれているため、
なぜ著作権問題が生まれてくるのか、なぜ当時の法が適用できなくなってしまっているのかということについて感じ取ることができた。&lt;/p&gt;

&lt;p&gt;世界中の本が誰にでも読めるようになるためにはまだまだ課題がありそう。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>cronによるメールを停止する方法</title>
      <link>http://kotazi.github.io/blog/post/2016/0301_crontab/</link>
      <pubDate>Tue, 01 Mar 2016 18:04:32 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0301_crontab/</guid>
      <description>&lt;p&gt;cronからのメールが1分おきに来るようになってしまったので直しました。&lt;/p&gt;

&lt;hr&gt;

&lt;pre&gt;&lt;code&gt;crontab -e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でcronの設定ファイルを開き、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MAILTO=&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を追加。以上。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://network.station.ez-net.jp/server/linux/service/crond/mail.asp&#34;&gt;定時実行プログラム CRON からのメール通知を無効化する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>