<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on kotazi.com</title>
    <link>http://kotazi.github.io/blog/post/</link>
    <description>Recent content in Posts on kotazi.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Jan 2016 21:47:07 +0900</lastBuildDate>
    <atom:link href="http://kotazi.github.io/blog/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>【訳読】JSX</title>
      <link>http://kotazi.github.io/blog/post/2016/0126_jsx/</link>
      <pubDate>Tue, 26 Jan 2016 21:47:07 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0126_jsx/</guid>
      <description>

&lt;p&gt;勉強がてら&lt;a href=&#34;https://jsx.github.io/doc/tutorial.html&#34;&gt;JSXのTutorial&lt;/a&gt;を翻訳しました。&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;background:eefede6fd0575a7a2327da935aefa0bf&#34;&gt;Background&lt;/h3&gt;

&lt;p&gt;JSXはJavaScriptへのコンパイルが可能な、静的型付けかつオブジェクト指向のプログラミング言語です。
JavaScriptよりも頑丈なプログラミング言語が必要だったためにJSXは開発されました。
とはいえ、JSXはとりわけ文や式など、そこそこJavaScriptに近いように作られています。&lt;/p&gt;

&lt;p&gt;ミスタイポや変数名や関数の定義忘れなどをコンパイル時に検知可能のため、静的型付け言語は頑丈なプログラミング言語といえます。
これは特に多くのエンジニアが携わる中規模から大規模のプロジェクトにおいて重要なことです。&lt;/p&gt;

&lt;p&gt;それゆえに、JSXは静的型付け言語として設計されました。
全ての値と変数には静的な型があり、適切な方の値のみを代入することができます。
加えて、全ての関数はパラメータと返り値によって決定されたクロージャーに含まれます。
引数の型が間違っていると代入することはできません。&lt;/p&gt;

&lt;p&gt;またJSXを開発した別の重要な理由として、JSのパフォーマンスを引き上げつことがありました。
JavaScript自身が遅いということはないのですが、大規模開発になると抽象的なレイヤーが肥大化しがちです。
例えば代用的なクラスやアクセサメソッドのことであり、これらはしばしばパフォーマンスにネガティブな影響を与えます。
JSZでは&amp;rdquo;inline expansion&amp;rdquo;によってパフォーマンスを引き上げています。
これはコンパイル時に関数呼び出しが決定したものを、関数本体を呼び出し元の方へ拡張することです。
静的型付け言語のパフォーマンスのちからになります。&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;run-hello-world:eefede6fd0575a7a2327da935aefa0bf&#34;&gt;Run &amp;ldquo;Hello, World!&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;JSXのプログタムを実行してみましょう。&lt;code&gt;jsx&lt;/code&gt;コマンドを使い、JSXをJavaScriptにコンパイルします。&lt;/p&gt;

&lt;p&gt;まずはnpmでjsxをインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm install -g jsx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そしたら下記のコードで&lt;code&gt;hello.jsx&lt;/code&gt;を作成しましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class _Main {
    static function main(args : string[]) : void {
        log &amp;quot;Hello, world!&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下記のコマンドでJSXを実行することができ、&amp;rdquo;Hello, world&amp;rdquo;がコンソール上に出力されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ jsx --run hello.jsx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次のセクションではhello.jsxについて詳しく見ていきましょう。&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;program-structure:eefede6fd0575a7a2327da935aefa0bf&#34;&gt;Program Structure&lt;/h3&gt;

&lt;p&gt;ここでは&amp;rdquo;Hello world!&amp;ldquo;サンプルであるhello.jsxについて取り扱っていきます。
このプログラムに名前や静的型付け、クラス構造といったいくつかのJSXの機能を見ることができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class _Main {
    static function main(args : string[]) : void {
        log &amp;quot;Hello, world!&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;_Main&lt;/code&gt;クラスは&lt;code&gt;main&lt;/code&gt;という名前の静的メンバ関数を持ちます。&lt;code&gt;main&lt;/code&gt;関数は文字列型の配列を引数に取り、返り値はありません。
&lt;code&gt;_Main.main(:string[]):&lt;/code&gt;はJSXアプリケーションのエントリーポイントであり、ユーザーがコマンドラインからアプリケーションを実行した時に呼び出されるものです。JSXはJavaのように、トップレベルに文や関数を置くことを許しません。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;log&lt;/code&gt;文はJavaScriptの&lt;code&gt;console.log()&lt;/code&gt;をマップしたものです。&lt;/p&gt;

&lt;p&gt;続いて、別の典型的なライブラリのクラスを見ていきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Point {
    var x = 0;
    var y = 0;

    function constructor() {
    }

    function constructor(x : number, y : number) {
        this.set(x, y);
    }

    function constructor(other : Point) {
        this.set(other);
    }

    function set(x : number, y : number) : void {
        this.x = x;
        this.y = y;
    }

    function set(other : Point) : void {
        this.set(other.x, other.y);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;見て分かる通り、Pointのメンバ変数であるxとyは型なしで宣言されています。
けれどもそれらの方は初期値からnumber型であることが分かります。&lt;/p&gt;

&lt;p&gt;複数のconstructorsに驚いたかもしれません。
ひとつはパラメータをとらず、他のものはとります。
パラメータの型が重複しています。
あなたが&lt;code&gt;new Point()&lt;/code&gt;を用いてクラスを生成する場合、最初のコンストラクタは引数無しで呼びだされます。
ふたつ目のコンストラクタは、&lt;code&gt;new Point(2, 3)&lt;/code&gt;といったように２つの引数を必要とします。３つめはコピーのコンストラクタとしてひとつ引数にとります。
&lt;code&gt;new Point(42)&lt;/code&gt;や&lt;code&gt;new Point(&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;)&lt;/code&gt;といったその他の方法では、コンパイル時にエラーが起きます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Point#set()&lt;/code&gt;関数もまた重複しており、コンパイラは正しい引数の取り方を知っています。&lt;/p&gt;

&lt;Hr&gt;

&lt;h3 id=&#34;static-typing:eefede6fd0575a7a2327da935aefa0bf&#34;&gt;Static Typing&lt;/h3&gt;

&lt;p&gt;基本的な型の概要についてはこの章で述べます。プリミティブ型やオブジェクト型、Variant型、Null型がJSZには存在します。&lt;/p&gt;

&lt;h4 id=&#34;pritimive-types:eefede6fd0575a7a2327da935aefa0bf&#34;&gt;Pritimive Types&lt;/h4&gt;

&lt;p&gt;JSXには3つのプリミティブ型が存在します。&lt;code&gt;string&lt;/code&gt;、&lt;code&gt;number&lt;/code&gt;、&lt;code&gt;boolean&lt;/code&gt;です。
これらの3つはNull型にはならず、不変の型です。&lt;/p&gt;

&lt;p&gt;下の例文では&lt;code&gt;s&lt;/code&gt;、&lt;code&gt;n&lt;/code&gt;、&lt;code&gt;b&lt;/code&gt;の変数を型とともに宣言しています。&lt;code&gt;:&lt;/code&gt;マークを使って変数名の右側に記述します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var s : string;
var n : number;
var b : boolean;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;型宣言は初期値を代入することで省略することができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var s = &amp;quot;hello&amp;quot;;  // s is string, initialized as &amp;quot;hello&amp;quot;
var n = 42;       // n is number, initialized as 42
var b = true;     // b is boolean, initialized as true
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;object-types:eefede6fd0575a7a2327da935aefa0bf&#34;&gt;Object Types&lt;/h4&gt;

&lt;p&gt;オブジェクト型はクラスのインスタンスオブジェクトに参照を持つ方になります。
例えば、関数、文字列配列、Dateオブジェクトは全てオブジェクト型になります。
型が変わりやすいかは各クラスの定義に依存しいます。&lt;/p&gt;

&lt;p&gt;大半のオブジェクトは&lt;code&gt;new&lt;/code&gt;演算子を用いて生成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var d = new Date();            // instantiate an object of class Date
var a = new Array.&amp;lt;string&amp;gt;();  // instantiate an array of string
var m = new Map.&amp;lt;number&amp;gt;();    // instantiate an associative map of strings to numbers
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ArrayとMapについては初期化式を用いたイニシャライズが可能です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var a1 = [] : Array.&amp;lt;string&amp;gt;;  // a1 is Array.&amp;lt;string&amp;gt;, and is empty
var a2 = [ 1, 2, 3 ];          // a2 is Array.&amp;lt;number&amp;gt; with three elements

var m1 : {} : Map.&amp;lt;number&amp;gt;;    // m1 is Map.&amp;lt;number&amp;gt;
var m2 = {                     // m2 is Map.&amp;lt;string&amp;gt;
  en: &amp;quot;Good morning&amp;quot;,
  de: &amp;quot;Guten Morgen&amp;quot;,
  ja: &amp;quot;ãã¯ãããããã¾ã&amp;quot;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Functionクラスの変数のみ、静的関数として生成することや、またfunction式やfunction文を使って生成することが可能です。&lt;/p&gt;

&lt;h4 id=&#34;the-variant-type:eefede6fd0575a7a2327da935aefa0bf&#34;&gt;The Variant Type&lt;/h4&gt;

&lt;p&gt;Variant型は&amp;rdquo;静的型情報がない&amp;rdquo;という意味です。既存のJavaScriptAPIに役立ちます。
バリアント変数を返すJavaScriptライブラリもあるかもしれません。これらの型はコンパイル時に決定することができません。
バリアントの値に対してできることは、variantのあたいかそうでない値かをチェックすることだけです。&lt;/p&gt;

&lt;p&gt;何かする前に値に対してチェックをする必要があります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function guessTheType(v : variant) : void {
    if (typeof v == &amp;quot;string&amp;quot;) {
        log &amp;quot;v is string and the value is:&amp;quot; + v as string;
    } else {
        log &amp;quot;v is not string&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;nullable-types:eefede6fd0575a7a2327da935aefa0bf&#34;&gt;Nullable Types&lt;/h4&gt;

&lt;p&gt;Nullable型はメタ型です。値がnullかもしれないことを示します。
primitive型にnullを代入することは禁止されています。(Object型はデフォルトではnullです。)
Nullable型はこのような目的で使われます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var s1 : string;
s1 = &amp;quot;abc&amp;quot;;       // ok
s1 = null;        // compile error!  cannot assign null to string

var s2 : Nullable.&amp;lt;string&amp;gt;;
s2 = &amp;quot;abc&amp;quot;;       // ok
s2 = null;        // ok
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nullable型の最も特出した使い方は、配列との使い方です。
ある配列の数より多い値にアクセスするとnullを返します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var a = [ 1, 2, 3 ]; // creates Array.&amp;lt;number&amp;gt; with three elements
a[3];                // out-of-bounds access, returns null
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nullableを返すAPIが他にも存在します。例えば&lt;code&gt;&amp;lt;string&amp;gt;#shift() is Nullable.&amp;lt;string&amp;gt;&lt;/code&gt;。
Nullableな値を使った時、その値がnullでないか確認する必要があります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function shiftOrReturnEmptyString(args : string[]) : string {
    if (args.length &amp;gt; 0)
        return args.shift();
    else
        return &amp;quot;&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コードがデバッグモードでコンパイルされる時(デフォルト値です。)、コンパイラは実行時に型の確認コードを埋め込みます。
null値の誤用が検知されると例外が発生します。
ランタイム型確認では&lt;code&gt;--release&lt;/code&gt;オプションでコンパイルを生着することができます。&lt;/p&gt;

&lt;p&gt;より詳しく知るためには&lt;a href=&#34;https://jsx.github.io/doc/typeref.html&#34;&gt;Types&lt;/a&gt;セクションを参照してください。&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;expressions:eefede6fd0575a7a2327da935aefa0bf&#34;&gt;Expressions&lt;/h3&gt;

&lt;p&gt;JSXにおける演算子の定義はほとんどJavaScriptと同じです。しかしながら違う点もあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;算術演算子は非演算子に数字のみをとります&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;var a = 3;
a + 1;      // OK, returns 4
a * a;      // OK, returns 9
a + &amp;quot;abc&amp;quot;;  // compile error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意: 連結演算子(+)による文字列の結合は存在します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ドット演算子によるプロパティアクセスは定義されたプロパティのみになります&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;class Point {
    var x : number;
    var y : number;
    function print() : void {
        log this.z;             // compile error! no property named z
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[]&lt;/code&gt;プロパティではMapかvariantのみにアクセスできます&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;var m = {            // m is Map.&amp;lt;string&amp;gt;
    hello: &amp;quot;world!&amp;quot;
};
log m[&amp;quot;hello&amp;quot;];      // OK
log m.hello;         // compile error!
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;as&lt;/code&gt;演算子を導入します。型変換に用いられます&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;var n = 123;
var s = &amp;quot;value of n is &amp;quot; + (n as string);
log s;               // print &amp;quot;value of n is 123&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;&amp;amp;, ||&lt;/code&gt;演算子はBooleanを返します。&lt;code&gt;?:&lt;/code&gt;を導入します。これは&lt;code&gt;||&lt;/code&gt;と等価です。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;詳しくは&lt;a href=&#34;https://jsx.github.io/doc/operatorref.html&#34;&gt;Operator Reference&lt;/a&gt;を見てください。&lt;/p&gt;

&lt;h4 id=&#34;statements:eefede6fd0575a7a2327da935aefa0bf&#34;&gt;Statements&lt;/h4&gt;

&lt;p&gt;JSXではJavaScriptで提供される多くの構文をサポートします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;log statement&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;log &amp;quot;hello, world&amp;quot;;    // log strings to console, can turned off with compile option: --release
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;assert statement&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;var n = 123;
assert n != 0;         // assertions.  also can be turned off with --release
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;try-catch-finally statement&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;try {
    ...
} catch (e : TypeError) {
    // got TypeError
} catch (e : Error) {
    // got Error, which is not TypeError
} catch (e : variant) {
    // applications may throw any kind of value
} finally {
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;try-catch-finally statement&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;詳しくは&lt;a href=&#34;https://jsx.github.io/doc/statementref.html&#34;&gt;Statement Reference&lt;/a&gt;を見てください。&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;classes-and-interfaces:eefede6fd0575a7a2327da935aefa0bf&#34;&gt;Classes and Interfaces&lt;/h3&gt;

&lt;p&gt;JSXはクラスベースのオブジェクト指向言語です。クラスモデルはJavaに似ています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;クラスを別のクラスに拡張できる&lt;/li&gt;
&lt;li&gt;クラスは福通のインターフェイスやミックスインを実装する&lt;/li&gt;
&lt;li&gt;すべてのクラスはひとつのルートクラスをシェアする: Objectクラス&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;all classes share a single root class: the Object class
interface Flyable {
    abstract function fly() : void;
}

abstract class Animal {
    function eat() : void {
      log &amp;quot;An animal is eating!&amp;quot;;
    }
}

class Bat extends Animal implements Flyable {
    override function fly() : void {
        log &amp;quot;A bat is flying!&amp;quot;;
    }
}

abstract class Insect {
}

class Bee extends Insect implements Flyable {
    override function fly() : void {
        log &amp;quot;A bee is flying!&amp;quot;;
    }
}

class _Main {

    static function main(args : string[]) : void {
        // fo bar
        var bat = new Bat();

        var animal : Animal = bat; // OK. A bat is an animal.
        animal.eat();

        var flyable : Flyable = bat; // OK. A bat can fly
        flyable.fly();

        // for Bee
        var bee = new Bee();

        flyable = bee; // A bee is also flyable
        flyable.fly();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例において、BatクラスはAnimalクラスを拡張したものであり、&lt;code&gt;Animal#eat()&lt;/code&gt;というメンバ関数を継承しています。そしてAnimal型に変数に代入することも可能です。
BatクラスはまたFlyableクラスの&lt;code&gt;Flyable#fly()&lt;/code&gt;メンバ関数をオーバーライドして実装しています。そのため、Flyableの変数に代入することも可能です。
また、別のflyableクラスがありいます。Beeクラスです。
Flyableインターフェイスを使うことで、例えbeeとbatが完全に異なる組織だったとしても、両方のクラスに対応することができます。&lt;/p&gt;

&lt;p&gt;メンバ関数をオーバーライドした時に、&lt;code&gt;override&lt;/code&gt;キーワードの使用は委任されます。
それにも関わらず、コンパイラはエラーを発生させます。言い換えれば、やっかいなエラーを出す代わりに、予期せぬベースクラスのインターフェイスの変更による編集エラーからあなたを救っています。&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;functions-and-closures:eefede6fd0575a7a2327da935aefa0bf&#34;&gt;Functions and Closures&lt;/h3&gt;

&lt;p&gt;JSXでは、関数が最初のクラスオブジェクトであり、静的な型をもっています。
&lt;code&gt;var f : function(arg : number) : number&lt;/code&gt;といった関数型の変数を宣言することができます。
関数は引数にnumberを取り、別のnumberを返すといったように。(同じ値を返すかもしれませんがここでは重要ではありません。)
その変数&lt;code&gt;f&lt;/code&gt;は&lt;code&gt;f(42)&lt;/code&gt;といって呼び出しをされ、数値を返しいます。&lt;/p&gt;

&lt;p&gt;function式やfunction文を使ってクロージャーを定義することができあmす。
典型的な方法でGUIプログラミングで人気のイベントリスナやコールバックを実装します。
クロージャーはJavaScriptの&lt;code&gt;this&lt;/code&gt;に似ています。メンバ関数内でクロージャーが出意義された時、メンバ関数のレシーバーを参照します。下記のサンプルを見てください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class _Main {
    var foo = 42;

    function constructor() {
        var f = function() : void {
            log this.foo;
        };

        f(); // says 42
    }

    static function main(args : string[]) : void {
        var o = new _Main();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;function式やfunction文のアノテーションはコンパイラに推測された場合に省略されるかもしれません。
下記の例では、引数のnも式の返り値も&lt;code&gt;Array#map&lt;/code&gt;の定義からnumberになることが推測されます。&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;modules:eefede6fd0575a7a2327da935aefa0bf&#34;&gt;Modules&lt;/h3&gt;

&lt;p&gt;JSXはモジュールシステムを持ちます。&lt;code&gt;import&lt;/code&gt;式を使ってJSXのクラスライブラリを利用することができます。
例えば、下記のプログラムでは&lt;code&gt;timer.jsx&lt;/code&gt;モジュールを使用し、Timerクラスをエクスポートしています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import &amp;quot;timer.jsx&amp;quot;;

class _Main {

    static function main(args : string[]) : void {
        Timer.setTimeout(function() : void {
            log &amp;quot;Hello, world!&amp;quot;;
        }, 1000);
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;モジュールは複数のクラスをエクスポートしますが、インポートするモジュールを指定したり、インポートしたモジュールにネームスペースをつけたりすることができます。&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;interface-to-web-browsers:eefede6fd0575a7a2327da935aefa0bf&#34;&gt;Interface to Web Browsers&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;js/web.jsx&lt;/code&gt;モジュールはWebブラウザへのインターフェイスを提供します。
下記のサンプルではどのように挿入するかを見せます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// hello.jsx
import &amp;quot;js/web.jsx&amp;quot;;

class _Main {

    static function main(args : string[]) : void {
        var document = dom.window.document;

        var text = document.createTextNode(&amp;quot;Hello, world!&amp;quot;);
        document.getElementById(&amp;quot;hello&amp;quot;).appendChild(text);
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Hello, world!&amp;lt;/title&amp;gt;
    &amp;lt;script src=&amp;quot;hello.jsx.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
  &amp;lt;p id=&amp;quot;hello&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以前コマンドからコンパイルした&lt;code&gt;hello.jsx&lt;/code&gt;を用いて、アクセスしたHTMLで&amp;rdquo;Hello, world!&amp;ldquo;を確認できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ bin/jsx --executable web --output hello.jsx.js hello.jsx
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;h3 id=&#34;further-learning:eefede6fd0575a7a2327da935aefa0bf&#34;&gt;Further Learning&lt;/h3&gt;

&lt;p&gt;より詳しいドキュメントは&lt;a href=&#34;https://github.com/jsx/JSX/wiki&#34;&gt;wiki&lt;/a&gt;を見てください。&lt;/p&gt;

&lt;p&gt;サンプルを探しているのであれば、&lt;a href=&#34;https://jsx.github.io/#examples&#34;&gt;example&lt;/a&gt;を参照してください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【FullCalendar】Current Date</title>
      <link>http://kotazi.github.io/blog/post/2016/0125_calendar/</link>
      <pubDate>Mon, 25 Jan 2016 22:53:46 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0125_calendar/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://fullcalendar.io/docs/current_date/&#34;&gt;Current Date&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;agendaWeek&lt;/code&gt;と&lt;code&gt;agendaDay&lt;/code&gt;用のオプションです。&lt;/p&gt;

&lt;hr&gt;

&lt;h5 id=&#34;defaultdate-http-fullcalendar-io-docs-current-date-defaultdate:64626c8a94a6af0c72d57024092cd2ec&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/current_date/defaultDate&#34;&gt;defaultDate&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;最初の読み込み時に表示する日時。&lt;/p&gt;

&lt;h5 id=&#34;nowindicator-http-fullcalendar-io-docs-current-date-nowindicator:64626c8a94a6af0c72d57024092cd2ec&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/current_date/nowIndicator&#34;&gt;nowIndicator&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;現在時刻にマーカーを引くかどうか。&lt;/p&gt;

&lt;h5 id=&#34;prev-method-http-fullcalendar-io-docs-current-date-prev:64626c8a94a6af0c72d57024092cd2ec&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/current_date/prev&#34;&gt;prev (method)&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;前に戻るためのメソッド。&lt;/p&gt;

&lt;h5 id=&#34;next-method-http-fullcalendar-io-docs-current-date-next:64626c8a94a6af0c72d57024092cd2ec&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/current_date/next&#34;&gt;next (method)&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;次に進むためのメソッド。&lt;/p&gt;

&lt;h5 id=&#34;prevyear-method-http-fullcalendar-io-docs-current-date-prevyear:64626c8a94a6af0c72d57024092cd2ec&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/current_date/prevYear&#34;&gt;prevYear (method)&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;前年に戻る。&lt;/p&gt;

&lt;h5 id=&#34;nextyear-method-http-fullcalendar-io-docs-current-date-nextyear:64626c8a94a6af0c72d57024092cd2ec&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/current_date/nextYear&#34;&gt;nextYear (method)&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;翌年に進む。&lt;/p&gt;

&lt;h5 id=&#34;today-method-http-fullcalendar-io-docs-current-date-today:64626c8a94a6af0c72d57024092cd2ec&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/current_date/today&#34;&gt;today(method)&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;今日を表示する。&lt;/p&gt;

&lt;h5 id=&#34;gotodate-method-http-fullcalendar-io-docs-current-date-gotodate:64626c8a94a6af0c72d57024092cd2ec&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/current_date/gotoDate&#34;&gt;gotoDate(method)&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;指定日へ移動する。&lt;/p&gt;

&lt;h5 id=&#34;incrementdate-method-http-fullcalendar-io-docs-current-date-incrementdate:64626c8a94a6af0c72d57024092cd2ec&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/current_date/incrementDate&#34;&gt;incrementDate(method)&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;指定日時分だけ移動する。&lt;/p&gt;

&lt;h5 id=&#34;getdate-method-http-fullcalendar-io-docs-current-date-getdate:64626c8a94a6af0c72d57024092cd2ec&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/current_date/getDate&#34;&gt;getDate(method)&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;日付を取得する。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【読書】How Google Works</title>
      <link>http://kotazi.github.io/blog/post/2016/0129_google/</link>
      <pubDate>Sun, 24 Jan 2016 18:40:44 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0129_google/</guid>
      <description>

&lt;p&gt;&lt;a rel=&#34;nofollow&#34; href=&#34;http://www.amazon.co.jp/gp/product/4532319552/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4532319552&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;How Google Works (ハウ・グーグル・ワークス)  ―私たちの働き方とマネジメント&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=kotazi-22&amp;l=as2&amp;o=9&amp;a=4532319552&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;を読んだ。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;ラリー・ペイジとセルゲイ・ブリンによって創業された企業「Google」。&lt;br /&gt;
そのGoogleの働き方について書かれた本である。著者は元CEOのエリック・シュミット。&lt;/p&gt;

&lt;p&gt;この本は次の各章から構成される。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;はじめに&lt;/li&gt;
&lt;li&gt;文化&lt;/li&gt;
&lt;li&gt;戦略&lt;/li&gt;
&lt;li&gt;人材&lt;/li&gt;
&lt;li&gt;意思決定&lt;/li&gt;
&lt;li&gt;コミュニケーション&lt;/li&gt;
&lt;li&gt;イノベーション&lt;/li&gt;
&lt;li&gt;おわりに&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;文化や人材、イノベーションといった様々な分野からGoogleという企業について語られる。
非常に学びどころの多い本であったが、ひとつ大事なキーワードを挙げるとすれば、
「スマート・クリエイティブ」だろう。&lt;/p&gt;

&lt;p&gt;1998年にGoogleを創業した当時、ラリーとセルゲイは経営の知識もなければ経験もなかった。
「ユーザーを中心に考えること」を重要視し、最高のサービスを生み出せばお金は後からついてくると信じていた。
成功し壮大な野望を成し遂げるためにはとびきり優秀なエンジニアを惹きつけ、引っ張っていくしかないと感じていた。&lt;/p&gt;

&lt;p&gt;実際業務プロセスも適当で、壮大な志を遂げられるような会社を作る戦術はなかったのだ。
ただ一つはっきりしていた経営戦術は、「私たちが20世紀に学んだことのほとんどは間違っており、それを根本から見直すべき時期がきている。」ということだけだった。&lt;/p&gt;

&lt;p&gt;技術成長に伴う時代の変化の結果、いまや企業の成功に最も重要な要素はプロダクトの優位性になった。
アマゾン創業者兼CEOのジェフ・ベゾスも次のように述べている。&lt;br /&gt;
「古い世界では持てる時間の30%を優れたプロダクトの開発に、70%をそれがどれほど素晴らしいプロダクトか吹聴してまわるのに充てていた。それが新たな世界では逆転した」&lt;/p&gt;

&lt;p&gt;また優位性が重要視されるようになるのに伴い、新たな試みをし失敗するコストが大幅に低下した。
プロダクト開発はより柔軟でスピードが求められるプロセスになった。&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;スマート-クリエイティブ:c8c2508cddce353cb3ee152cf74b8410&#34;&gt;スマート・クリエイティブ&lt;/h3&gt;

&lt;p&gt;実験のコストや失敗のコストは大幅に低下し、希少だったデータやPCも簡単に手に入るようになった。
そして、突如して「ひとり」のプレイヤー、マネージャー、経営者がとほうもないインパクトを生み出せるようになった。&lt;/p&gt;

&lt;p&gt;こんにち成功している企業の際立った特色は、最高のプロダクトを生み出し続ける能力だ。
それを手に入れる唯一の道は、スマートクリエイティブを惹きつけ、彼らが偉業を成し遂げられるような環境を作り出すことだ。&lt;/p&gt;

&lt;p&gt;スマート・クリエイティブはどのような人間か。
彼らは自分の”商売道具”を使いこなすための高度な専門知識を持っており経験値も高い。分析力とビジネス感覚にも優れており、競争心も好奇心も旺盛だ。
ユーザーのこともよく分かっている。リスクをいとわない。自発的である。あらゆる可能性にオープンであり、コミュニケーション能力も高い。
すべてのスマート・クリエイティブがこうした特徴を全て備えているわけではなくむしろ稀である。&lt;/p&gt;

&lt;p&gt;共通して持っているものは「努力をいとわず、これまでの常識的方法に疑問を持ち、新しいやり方を試すことに積極的であること」だ。
これがスマート・クリエイティブが大きな影響を持ちうる理由である。&lt;/p&gt;

&lt;p&gt;2003年ごろのGoogleが課題にしていたことは、こうしたスマート・クリエイティブな社員たちが真価を発揮できるような新たな労働環境を生み出し、維持することだった。&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;文化:c8c2508cddce353cb3ee152cf74b8410&#34;&gt;文化&lt;/h3&gt;

&lt;p&gt;企業を立ち上げるときに、最初にどんな文化を作りたいか考え、明確にしておくほうが懸命だ。
文化を生み出すのは創業者だが、それを最もよく反映するのは、会社を立ち上げる時に集まった、創業者が信頼を置くチームである。
「ぼくらにとって大切なことは何か」「信念は何か」「どんな存在になりたいのか」「会社の行動や意思決定の方法はどうあるべきか」
成功する会社とそうでない会社の違いは、従業員がこうした文言を信じているかどうかにある。&lt;/p&gt;

&lt;p&gt;PMについて良い文章があったので引用する。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;インタ-ネット世紀のプロダクトマネジャーの役割は、最高のプロダクトの設計、エンジニアリング、開発を担う人々とともに働くことだ。
そのなかには、プロダクトのライフサイクルを管理し、プロダクトのロードマップを決定し、消費者の声を代弁し、そうした事柄をチームや経営陣に伝えるといった従来型の管理業務も含まれる。だが、スマート・クリエイティブ型のプロダクト・マネジャーに何より求められるのは、プロダクトをさらに良くするための技術的ヒントを見つけることだ。それは消費者のプロダクトの使い方(そして技術の進歩とともにそのパターンがどのように変化するか)を把握すること、データの理解や分析、技術のトレンドやそれが業界に及ぼす影響を見きわめることによって得られる。そのためにプロダクト・マネジャーはチームのエンジニア(あるいは化学者、生物学者、デザイナーなど、プロダクトの設計や開発のために採用されたスマート・クリエイティブ)と仕事も食事も生活もともにする必要がある。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;能力主義を浸透させるには:c8c2508cddce353cb3ee152cf74b8410&#34;&gt;◯ 能力主義を浸透させるには&lt;/h5&gt;

&lt;p&gt;能力主義を浸透させるには、「異議を唱える義務」を重視する文化が必要。ある考え方に問題があると思った人は、懸念を表明しなければならない。そうしなければ最高とはいえない考え方が通り、懸念を口にしなかったものも共同責任を負うことになる。&lt;/p&gt;

&lt;h5 id=&#34;優れた仕事は楽しくなければならない:c8c2508cddce353cb3ee152cf74b8410&#34;&gt;◯ 優れた仕事は楽しくなければならない&lt;/h5&gt;

&lt;p&gt;あなたが死ぬほど働いているのに、ちっとも楽しくないという場合、おそらく何か間違っている。
楽しい理由の一つは、将来の成功の予感かもしれない。だが、一番大きいのは、同僚と一緒に笑ったり、ジョークを言い合ったり、ともに仕事をする楽しさのはずだ。&lt;/p&gt;

&lt;h5 id=&#34;戦略会議:c8c2508cddce353cb3ee152cf74b8410&#34;&gt;◯ 戦略会議&lt;/h5&gt;

&lt;p&gt;正しい先着にはある種の美しさがある、多くの人やアイディアが成功のためにひとつになっている感覚。
まずは「5年後はどうなっているか」と尋ねるところから始めよう。
自身が挑戦者である場合、アイディアを軸にプロダクトを開発し、事業を構築しなければならない。
成功している大企業は例外なく次の点から出発している。&lt;/p&gt;

&lt;p&gt;① 問題をまったく新しい方法で解決する&lt;br /&gt;
② その方法を活かして急速に成長・拡大する&lt;br /&gt;
③ 成功の最大の要因はプロダクトである&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;人材:c8c2508cddce353cb3ee152cf74b8410&#34;&gt;人材&lt;/h3&gt;

&lt;h5 id=&#34;ラーニングアニマルを採用する:c8c2508cddce353cb3ee152cf74b8410&#34;&gt;◯ ラーニングアニマルを採用する&lt;/h5&gt;

&lt;p&gt;ヘンリー・フォードは「人は学習を辞めたとき老いる。20歳の老人もいれば、80歳の若者もいる。学びつづける者は若さを失わない。人生で何よりすばらしいのは、自分の心の若さを保つことだ」と言った。
自分の能力は変わらないと考えていると、その自己イメージを維持するために「到達目標」を設定する。一方で人は変われる、適応できると考えている人は「学習目標」を設定する。&lt;/p&gt;

&lt;h5 id=&#34;laxテスト:c8c2508cddce353cb3ee152cf74b8410&#34;&gt;◯ LAXテスト&lt;/h5&gt;

&lt;p&gt;Googleでは「LAXテスト（LAX＝ロサンゼルス国際空港で6時間足止めをくらったとして、それでも一緒にいたいと思う人材かどうかで判断すること）」を採用している。
採用候補者に欠かせない資質として、情熱、知力、ラーニングアニマルのマインドセットを述べた。
もう一つの重要な要素が人格。
単に親切で信頼感があるかというだけでなく、多才で、世界と深く関わっている人間、つまり「おもしろい」人間。&lt;/p&gt;

&lt;h5 id=&#34;google-採用のおきて:c8c2508cddce353cb3ee152cf74b8410&#34;&gt;◯ Google「採用のおきて」&lt;/h5&gt;

&lt;p&gt;Googleの採用のおきてを引用する。
採用だけでなく、自分の仕事ぶりを振り返るいい指標にもなる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;自分より優秀で博識な人物を採用せよ。学ぶもののない、あるいは手強いと感じない人物は採用してはならない。&lt;/li&gt;
&lt;li&gt;プロダクトと企業文化に付加価値をもたらしそうな人物を採用せよ。問題について考えるだけの人物は採用してはならない。&lt;/li&gt;
&lt;li&gt;仕事を成し遂げる人物を採用せよ。仕事がほしいだけの人物は採用してはならない。&lt;/li&gt;
&lt;li&gt;熱意があり、自発的で、情熱的な人物を採用せよ。仕事がほしいだけの人物は採用してはならない。&lt;/li&gt;
&lt;li&gt;周囲に刺激を与え、協力できる人物を採用せよ。ひとりで仕事をしたがる人物を採用してはならない。&lt;/li&gt;
&lt;li&gt;チームや会社とともに成長しそうな人物を採用せよ。スキルセットや興味の幅が狭い人間は採用してはならない。&lt;/li&gt;
&lt;li&gt;多才で、ユニークな興味や才能を持っている人物を採用せよ。仕事しか能がない人物は採用してはならない。&lt;/li&gt;
&lt;li&gt;倫理観があり、素直に意思を伝える人物を採用せよ。駆け引きをシたり、他人を操ろうとする人物は採用してはならない。&lt;/li&gt;
&lt;li&gt;最高の候補者を見つけた場合のみ採用せよ。一切の妥協は許されない。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;キャリア計画:c8c2508cddce353cb3ee152cf74b8410&#34;&gt;◯ キャリア計画&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;トム・レーラー「人生は下水管のようなものだ。何が出てくるかは、何を入れるかで決まる。」&lt;/li&gt;
&lt;li&gt;ヨギ・ベラ「目的地がどこかわからないときは、注意したほうがいい。おそらくそこには辿り着けないから」&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h3 id=&#34;意思決定:c8c2508cddce353cb3ee152cf74b8410&#34;&gt;意思決定&lt;/h3&gt;

&lt;h5 id=&#34;正しい意思決定:c8c2508cddce353cb3ee152cf74b8410&#34;&gt;◯ 正しい意思決定&lt;/h5&gt;

&lt;p&gt;正しい選択をすることだけに集中してはいけない。判断に到達するプロセス、タイミング、判断を実行に移す方法も、判断の内容そのものと同じくらいに重要。
どれか一つでも欠ければまずい結果になりかねない。意思決定すべき事柄は次々と出てくるので、そのプロセスに問題があると弊害はとめどなく広がっていく。&lt;/p&gt;

&lt;h5 id=&#34;行動志向:c8c2508cddce353cb3ee152cf74b8410&#34;&gt;◯ 行動志向&lt;/h5&gt;

&lt;p&gt;「とにかく、”何か”行動を起こすんだ。間違っていたっていい」&lt;br /&gt;
トム・ピーターズはこのような考え方を「行動志向」と呼んだ。
「デザイン的思考の中核的マインドセット」である。
行動志向は、実践的で試行錯誤をいとわない考え方である。
ある行動をとることが正しいか確信が持てないなら、一番いいのは実際にやってみて軌道修正することだ。&lt;/p&gt;

&lt;h5 id=&#34;すべての会議には-オーナー-が必要:c8c2508cddce353cb3ee152cf74b8410&#34;&gt;◯ すべての会議には&amp;rdquo;オーナー&amp;rdquo;が必要。&lt;/h5&gt;

&lt;p&gt;意思決定の舞台はたいてい会議。エリックの作り上げた会議のルール。&lt;/p&gt;

&lt;p&gt;会議には単一の意思決定者、すなわち&amp;rdquo;オーナー&amp;rdquo;を置く。意思決定に責任を持つ人物である。
そしてその意思決定者は自ら動くこと。会議の目的が意思決定でない場合でも(情報共有やブレストでも)必ずオーナーを決めること。
参加者の顔ぶれが適切であること、議題が明確であること。必要な準備がきちんとなされていること。こういったことに責任を持つ。
会議は簡単に廃止できるようにする。運営しやすい規模に留める。時間管理は重要。締めくくりには結論と行動計画をおさらいする。
会議に出るのならまじめにでること。&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;イノベーション:c8c2508cddce353cb3ee152cf74b8410&#34;&gt;イノベーション&lt;/h3&gt;

&lt;h5 id=&#34;新しいプロジェクトに取り組むか決める時:c8c2508cddce353cb3ee152cf74b8410&#34;&gt;◯ 新しいプロジェクトに取り組むか決める時&lt;/h5&gt;

&lt;p&gt;Googleチームではベン図を使う。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;数百万人、数十億人に影響をおよぼすような大きな問題あるいはチャンスか&lt;/li&gt;
&lt;li&gt;すでに市場に存在するものとは根本的に異なる解決策のアイディアはあるか&lt;/li&gt;
&lt;li&gt;根本的に異なる解決策を世に送り出すための画期的な技術は存在しているのか&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;イノベーションを生む環境:c8c2508cddce353cb3ee152cf74b8410&#34;&gt;◯ イノベーションを生む環境&lt;/h5&gt;

&lt;p&gt;イノベーションがうまれるにはふさわしい環境が必要。
たいてい急速に成長しており、たくさんの競合がひしめく市場。
からっぽの市場にひとりぼっち、というのは避けること。
イノベーションに取り組む舞台には、大きなあるいは今後大きくなりそうな市場を選ぶべき。
未開の地を夢見てしまう起業家は多い。&lt;/p&gt;

&lt;h5 id=&#34;世に出てから手直しする:c8c2508cddce353cb3ee152cf74b8410&#34;&gt;◯ 世に出てから手直しする&lt;/h5&gt;

&lt;p&gt;新しいアイディアが初めから完璧であることはありえない。完璧になるまで待っている時間はない。
プロダクトを作り、出荷し、市場の反応を見てから、改善策を考え実践し、再び出荷する。
勝つのはこのプロセスを最も速く繰り返すことにできる企業。&lt;/p&gt;

&lt;h5 id=&#34;良い失敗をする:c8c2508cddce353cb3ee152cf74b8410&#34;&gt;◯ 良い失敗をする&lt;/h5&gt;

&lt;p&gt;イノベーションを生み出すには、良い失敗のしかたを身につけなければならない。
失敗から学ぶのだ。どんな失敗プロジェクトからも、次の試みに役に立つような技術、ユーザー、市場への理解が得られるはず。&lt;/p&gt;

&lt;p&gt;経営者の仕事はリスクを最小限に抑えたり、失敗を防ぐことではない。
リスクを取り、避けられない失敗に耐えうる組織をつくること。&lt;/p&gt;

&lt;p&gt;おそらく、最も難しいのは失敗のタイミングを見極めること。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Googleという企業の取り組んできたさまざまなプロジェクトや、乗り越えてきたたくさんの困難を通して
多くの実践的な考えを学びながらGoogleという企業について知ることができた。良書。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【FullCalendar】General Display</title>
      <link>http://kotazi.github.io/blog/post/2016/0123_calendar/</link>
      <pubDate>Sat, 23 Jan 2016 22:53:46 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0123_calendar/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://fullcalendar.io/docs/display/&#34;&gt;General Display&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h5 id=&#34;header-http-fullcalendar-io-docs-display-header:9292537d398d35e2714a7e18b5b2d7a6&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/display/header/&#34;&gt;header&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;カレンダー上部のボタンとタイトルを定義します。&lt;/p&gt;

&lt;h5 id=&#34;custombuttons-http-fullcalendar-io-docs-display-custombuttons:9292537d398d35e2714a7e18b5b2d7a6&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/display/customButtons&#34;&gt;customButtons&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;ヘッダーで使用されるカスタムボタンを定義します。&lt;/p&gt;

&lt;h5 id=&#34;buttonicons-http-fullcalendar-io-docs-display-buttonicons:9292537d398d35e2714a7e18b5b2d7a6&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/display/buttonIcons&#34;&gt;buttonIcons&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;ヘッダーボタンで表示するアイコンを決めます。&lt;/p&gt;

&lt;h5 id=&#34;theme-http-fullcalendar-io-docs-display-theme:9292537d398d35e2714a7e18b5b2d7a6&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/display/theme&#34;&gt;theme&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;jQuery UIテーマの使用不使用です。&lt;/p&gt;

&lt;h5 id=&#34;themebuttonicons-http-fullcalendar-io-docs-display-themebuttonicons:9292537d398d35e2714a7e18b5b2d7a6&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/display/themeButtonIcons&#34;&gt;themeButtonIcons&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;テーマで使用するアイコンを決定します。&lt;/p&gt;

&lt;h5 id=&#34;firstday-http-fullcalendar-io-docs-display-firstday:9292537d398d35e2714a7e18b5b2d7a6&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/display/firstDay&#34;&gt;firstDay&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;週始めを決めます。&lt;/p&gt;

&lt;h5 id=&#34;isrtl-http-fullcalendar-io-docs-display:9292537d398d35e2714a7e18b5b2d7a6&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/display/&#34;&gt;isRTL&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;カレンダーの表示向きです。&lt;/p&gt;

&lt;h5 id=&#34;weekends-http-fullcalendar-io-docs-display-weekends:9292537d398d35e2714a7e18b5b2d7a6&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/display/weekends&#34;&gt;weekends&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;カレンダーのビューに土日を含めるかどうかです。&lt;/p&gt;

&lt;h5 id=&#34;hiddendays-http-fullcalendar-io-docs-display-hiddendays:9292537d398d35e2714a7e18b5b2d7a6&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/display/hiddenDays&#34;&gt;hiddenDays&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;決まった曜日を非表示にすることができます。&lt;/p&gt;

&lt;h5 id=&#34;fixedweekcount-http-fullcalendar-io-docs-display-fixedweekcount:9292537d398d35e2714a7e18b5b2d7a6&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/display/fixedWeekCount&#34;&gt;fixedWeekCount&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;デフォルトは&lt;code&gt;true&lt;/code&gt;.必ず6週です。
&lt;code&gt;false&lt;/code&gt;の場合は4や5週の場合があります。&lt;/p&gt;

&lt;h5 id=&#34;weeknumbers-http-fullcalendar-io-docs-display-weeknumbers:9292537d398d35e2714a7e18b5b2d7a6&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/display/weekNumbers&#34;&gt;weekNumbers&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;週番号を表示するかです。&lt;code&gt;true&lt;/code&gt;にすると左側に入ります。&lt;/p&gt;

&lt;h5 id=&#34;weeknumbercalculation-http-fullcalendar-io-docs-display:9292537d398d35e2714a7e18b5b2d7a6&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/display/&#34;&gt;weekNumberCalculation&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;weekNumbersの設定に合わせて週の数を計算します。&lt;/p&gt;

&lt;h5 id=&#34;businesshours-http-fullcalendar-io-docs-display-businesshours:9292537d398d35e2714a7e18b5b2d7a6&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/display/businessHours&#34;&gt;businessHours&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;ビジネスタイムの設定。&lt;/p&gt;

&lt;h5 id=&#34;height-http-fullcalendar-io-docs-display-height:9292537d398d35e2714a7e18b5b2d7a6&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/display/height&#34;&gt;height&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;カレンダーの高さを指定します。&lt;/p&gt;

&lt;h5 id=&#34;aspectratio-http-fullcalendar-io-docs-display-aspectratio:9292537d398d35e2714a7e18b5b2d7a6&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/display/aspectRatio&#34;&gt;aspectRatio&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;縦横のアスペクト比を決定します。&lt;/p&gt;

&lt;h5 id=&#34;handlewindowresize-http-fullcalendar-io-docs-display-handlewindowresize:9292537d398d35e2714a7e18b5b2d7a6&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/display/handleWindowResize&#34;&gt;handleWindowResize&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;ブラウザがリサイズされた時に、カレンダーをリサイズします。&lt;/p&gt;

&lt;h5 id=&#34;eventlimit-http-fullcalendar-io-docs-display-eventlimit:9292537d398d35e2714a7e18b5b2d7a6&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/display/eventLimit&#34;&gt;eventLimit&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;一日に表示するイベントの数の上限。&lt;/p&gt;

&lt;h5 id=&#34;eventlimitclick-http-fullcalendar-io-docs-display-eventlimitclick:9292537d398d35e2714a7e18b5b2d7a6&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/display/eventLimitClick&#34;&gt;eventLimitClick&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;eventLimitで設定した上限を超え、&lt;code&gt;more&lt;/code&gt;をクリックした時のアクション。&lt;/p&gt;

&lt;h5 id=&#34;viewrender-callback-http-fullcalendar-io-docs-display-viewrender:9292537d398d35e2714a7e18b5b2d7a6&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/display/viewRender&#34;&gt;viewRender (callback)&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;レンダリング後のコールバック&lt;/p&gt;

&lt;h5 id=&#34;viewdestroy-callback-http-fullcalendar-io-docs-display-viewdestroy:9292537d398d35e2714a7e18b5b2d7a6&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/display/viewDestroy&#34;&gt;viewDestroy (callback)&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;データ破壊後のコールバック&lt;/p&gt;

&lt;h5 id=&#34;dayrender-callback-http-fullcalendar-io-docs-display-dayrender:9292537d398d35e2714a7e18b5b2d7a6&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/display/dayRender&#34;&gt;dayRender (callback)&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;セルを修正した時のコールバック&lt;/p&gt;

&lt;h5 id=&#34;windowresize-callback-http-fullcalendar-io-docs-display-windowresize:9292537d398d35e2714a7e18b5b2d7a6&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/display/windowResize&#34;&gt;windowResize (callback)&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;リサイズ時のコールバック&lt;/p&gt;

&lt;h5 id=&#34;render-method-http-fullcalendar-io-docs-display-render:9292537d398d35e2714a7e18b5b2d7a6&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/display/render&#34;&gt;render (method)&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;レンダリングメソッド。&lt;/p&gt;

&lt;h5 id=&#34;destroy-method-http-fullcalendar-io-docs-display-destroy:9292537d398d35e2714a7e18b5b2d7a6&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/display/destroy&#34;&gt;destroy (method)&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;要素を取り除く。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【FullCalendar】Google Calendar</title>
      <link>http://kotazi.github.io/blog/post/2016/0122_calendar/</link>
      <pubDate>Fri, 22 Jan 2016 22:53:46 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0122_calendar/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://fullcalendar.io/&#34;&gt;FullCalendar&lt;/a&gt;のGoogleCalendar同期について。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://fullcalendar.io/docs/google_calendar/&#34;&gt;Google Calendar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h3 id=&#34;google-calendar:d1c1dad631980de0087d81fc9c503c32&#34;&gt;Google Calendar&lt;/h3&gt;

&lt;p&gt;FullCalendarではGoogle Calendarのイベントを表示することができます。
GoogleCalendarはバックエンド側で管理・保持しているイベントデータを提供することができます。
(FullCalendarにはない機能)&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;before-you-code:d1c1dad631980de0087d81fc9c503c32&#34;&gt;Before you code&amp;hellip;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;GoogleCalendarのAPIキーが必要です&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://console.developers.google.com/&#34;&gt;Google Developer Console&lt;/a&gt;から新しいプロジェクトを作成してください&lt;/li&gt;
&lt;li&gt;そのプロジェクトのサイドバーから、「APIs &amp;amp; auth &amp;gt; APIs」と移動します&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Calendar API&amp;rdquo;をオンにしてください。&lt;/li&gt;
&lt;li&gt;サイドバーから「APIs &amp;amp; auth &amp;gt; Credentials」と移動します&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Public API access&amp;rdquo;セクション内の&amp;rdquo;Create new Key&amp;rdquo;をクリックします&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Browser Key&amp;rdquo;を選択します&lt;/li&gt;
&lt;li&gt;カレンダーをホストするドメインが分かれば入力してください。いつでも変更できるので分からなければそのままで大丈夫です&lt;/li&gt;
&lt;li&gt;新しいAPIキーが現れます。&lt;/li&gt;
&lt;/ol&gt;

&lt;hr&gt;

&lt;p&gt;&lt;strong&gt;Googleを公開する&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;GoogleCalendarのインターフェイスで、左側にある&amp;rdquo;My calendars&amp;rdquo;へ&lt;/li&gt;
&lt;li&gt;カレンダーにカーソルを当て、矢印をクリックします&lt;/li&gt;
&lt;li&gt;メニューが表示されるので&amp;rdquo;Share this Calendar&amp;rdquo;をクリックします&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Make this calendar public&amp;rdquo;にチェックします&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Share only my free/busy information&amp;rdquo;にチェックが入っていないことを確認してください&lt;/li&gt;
&lt;li&gt;保存します&lt;/li&gt;
&lt;/ol&gt;

&lt;hr&gt;

&lt;p&gt;&lt;strong&gt;GoogleCalendarのIDを取得する&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;GoogleCalendarのインターフェイスで、左側にある&amp;rdquo;My calendars&amp;rdquo;へ&lt;/li&gt;
&lt;li&gt;カレンダーにカーソルを当て、矢印をクリックします&lt;/li&gt;
&lt;li&gt;メニューが表示されるので&amp;rdquo;Calendar settings&amp;rdquo;をクリックします&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Calendar Address&amp;rdquo;セクションのCalendarIDを見てください。 &amp;ldquo;abcd1234@group.calendar.google.com&amp;rdquo;のようなものです。&lt;/li&gt;
&lt;/ol&gt;

&lt;hr&gt;

&lt;h3 id=&#34;dependencies:d1c1dad631980de0087d81fc9c503c32&#34;&gt;Dependencies&lt;/h3&gt;

&lt;p&gt;続いて、必要なJS/CSSを追加します。標準的なファイルに加え、&lt;code&gt;gcal.js&lt;/code&gt;も追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&#39;text/javascript&#39; src=&#39;fullcalendar/gcal.js&#39;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;h3 id=&#34;writing-the-code:d1c1dad631980de0087d81fc9c503c32&#34;&gt;Writing the code&lt;/h3&gt;

&lt;p&gt;JSでカレンダーを初期化する準備が整いました。これが最小のサンプルになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&#39;text/javascript&#39;&amp;gt;

$(document).ready(function() {
    $(&#39;#calendar&#39;).fullCalendar({
        googleCalendarApiKey: &#39;&amp;lt;YOUR API KEY&amp;gt;&#39;,
        events: {
            googleCalendarId: &#39;abcd1234@group.calendar.google.com&#39;
        }
    });
});

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;特定の&lt;a href=&#34;http://fullcalendar.io/docs/event_data/Event_Source_Object/&#34;&gt;Event Source&lt;/a&gt;オプションを追加したければ、&lt;code&gt;events&lt;/code&gt;オブジェクトに含めることができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&#39;text/javascript&#39;&amp;gt;

$(document).ready(function() {
    $(&#39;#calendar&#39;).fullCalendar({
        googleCalendarApiKey: &#39;&amp;lt;YOUR API KEY&amp;gt;&#39;,
        events: {
            googleCalendarId: &#39;abcd1234@group.calendar.google.com&#39;,
            className: &#39;gcal-event&#39; // an option!
        }
    });
});

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;h3 id=&#34;timezones:d1c1dad631980de0087d81fc9c503c32&#34;&gt;Timezones&lt;/h3&gt;

&lt;p&gt;GoogleCalendarのプラグインでは&lt;a href=&#34;http://fullcalendar.io/docs/timezone/timezone/&#34;&gt;timezone&lt;/a&gt;をリスペクトしています。
&lt;code&gt;false&lt;/code&gt;(デフォルト)にしておくと、GoogleCalendarのタイムゾーン設定が使用されます。特定のものを指定していれば、これらは無視されます。&lt;/p&gt;

&lt;Hr&gt;

&lt;h3 id=&#34;multiple-google-calendars:d1c1dad631980de0087d81fc9c503c32&#34;&gt;Multiple Google Calendars&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;eventSources&lt;/code&gt;オプションを利用すれば複数のGoogleCalendarを利用することができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&#39;text/javascript&#39;&amp;gt;

$(document).ready(function() {
    $(&#39;#calendar&#39;).fullCalendar({
        googleCalendarApiKey: &#39;&amp;lt;YOUR API KEY&amp;gt;&#39;,
        eventSources: [
            {
                googleCalendarId: &#39;abcd1234@group.calendar.google.com&#39;
            },
            {
                googleCalendarId: &#39;efgh5678@group.calendar.google.com&#39;,
                className: &#39;nice-event&#39;
            }
        ]
    });
});

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;Hr&gt;

&lt;h3 id=&#34;advanced:d1c1dad631980de0087d81fc9c503c32&#34;&gt;Advanced&lt;/h3&gt;

&lt;p&gt;カレンダーごとに異なるAPIキーを利用する場合、&lt;code&gt;googleCalendarApiKey&lt;/code&gt;をセットするには個々の[EventSource]を用います。&lt;/p&gt;

&lt;p&gt;GoogleAPIのエラーを検知する必要がある場合、jQueryのAJAZエラーハンドリングには方法がありません。FullCalendarの&lt;code&gt;googleCalendarError&lt;/code&gt;を使います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【FullCalendar】Basic Usage</title>
      <link>http://kotazi.github.io/blog/post/2016/0121_calendar/</link>
      <pubDate>Thu, 21 Jan 2016 22:53:46 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0121_calendar/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://fullcalendar.io/&#34;&gt;FullCalendar&lt;/a&gt;の基本的な使い方です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://fullcalendar.io/docs/usage/&#34;&gt;Basic Usage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h3 id=&#34;basic-usage:618077e916e5f8ed5fedc9c7378a801b&#34;&gt;Basic Usage&lt;/h3&gt;

&lt;p&gt;Webページにカレンダーを組み込む最初のステップは、正しいJSとCSSファイルを用意することです。
FullCalendarのスタイルシート、FullCalendar、jQuery、Momentファイルを&lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;に含めたことを確認してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;link rel=&#39;stylesheet&#39; href=&#39;fullcalendar/fullcalendar.css&#39; /&amp;gt;
&amp;lt;script src=&#39;lib/jquery.min.js&#39;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&#39;lib/moment.min.js&#39;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&#39;fullcalendar/fullcalendar.js&#39;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;jQueryとMomentは必ずFullCalendarのJSファイルより先に読み込んでください。&lt;/p&gt;

&lt;p&gt;もしドラッグやリサイズをするのであれば、追加する必要のあるライブラリがあるかもしれないので、&lt;a href=&#34;http://fullcalendar.io/docs/event_ui/Requirements/&#34;&gt;こちら&lt;/a&gt;を見てください。&lt;/p&gt;

&lt;p&gt;依存関係を書き終えたら、カレンダーを初期化するためのスクリプトを記述します。
このコードはページの初期化後に実行される必要があります。最も良い方法はjQueryの&lt;code&gt;$(document).ready&lt;/code&gt;あたりを使うことです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(document).ready(function() {

    // page is now ready, initialize the calendar...

    $(&#39;#calendar&#39;).fullCalendar({
        // put your options and callbacks here
    })

});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記のコードは&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;タグで囲んでください。
ページ内のID&lt;code&gt;calendar&lt;/code&gt;要素の中にカレンダーを生成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&#39;calendar&#39;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで空っぽの月カレンダーが表示されると思います。
イベントの表示方法について学ぶには&lt;a href=&#34;http://fullcalendar.io/docs/google_calendar/&#34;&gt;Google Calendar&lt;/a&gt;もしくは&lt;a href=&#34;http://fullcalendar.io/docs/event_data/&#34;&gt;Event Data&lt;/a&gt;のセクションを参考にしてください。&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;options:618077e916e5f8ed5fedc9c7378a801b&#34;&gt;Options&lt;/h3&gt;

&lt;p&gt;FullCalendarのドキュメントの大半は、オプションの影響や振る舞いについてです。
オプションはこのように、たいていカレンダーの初期化時にセットされます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;#calendar&#39;).fullCalendar({
    weekends: false // will hide Saturdays and Sundays
});
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;h3 id=&#34;callbacks:618077e916e5f8ed5fedc9c7378a801b&#34;&gt;Callbacks&lt;/h3&gt;

&lt;p&gt;コールバックはオプションのように並べられますが、これらの関数は特別なことが起こらなければ呼ばれません。
下記のサンプルでは、ユーザーが日にちをクリックするとアラートが表示されるものです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;#calendar&#39;).fullCalendar({
    dayClick: function() {
        alert(&#39;a day has been clicked!&#39;);
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;h3 id=&#34;methods:618077e916e5f8ed5fedc9c7378a801b&#34;&gt;Methods&lt;/h3&gt;

&lt;p&gt;メソッドは様々な方法を提供します。
メソッドは既に初期化されたカレンダーのjQueryオブジェクトに対し、&lt;code&gt;fullCalendar&lt;/code&gt;コマンドを買います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;#calendar&#39;).fullCalendar(&#39;next&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは&lt;code&gt;next&lt;/code&gt;メソッドです。カレンダーを次に進めるためのメソッドです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【FullCalendar】Agenda Options</title>
      <link>http://kotazi.github.io/blog/post/2016/0124_calendar/</link>
      <pubDate>Tue, 19 Jan 2016 22:53:46 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0124_calendar/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://fullcalendar.io/docs/agenda/&#34;&gt;Agenda Options&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;agendaWeek&lt;/code&gt;と&lt;code&gt;agendaDay&lt;/code&gt;用のオプションです。&lt;/p&gt;

&lt;hr&gt;

&lt;h5 id=&#34;alldayslot-http-fullcalendar-io-docs-agenda-alldayslot:fa802ff0768f75770328542af23e0887&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/agenda/allDaySlot&#34;&gt;allDaySlot&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;&amp;ldquo;all-day&amp;rdquo;(終日)の表示をカレンダーの上部にするかどうか。&lt;/p&gt;

&lt;h5 id=&#34;alldaytext-http-fullcalendar-io-docs-agenda-alldaytext:fa802ff0768f75770328542af23e0887&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/agenda/allDayText&#34;&gt;allDayText&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;&amp;ldquo;all-day&amp;rdquo;に表示するテキスト。&lt;/p&gt;

&lt;h5 id=&#34;slotduration-http-fullcalendar-io-docs-agenda-slotduration:fa802ff0768f75770328542af23e0887&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/agenda/slotDuration&#34;&gt;slotDuration&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;枠の間隔。&lt;/p&gt;

&lt;h5 id=&#34;slotlabelformat-http-fullcalendar-io-docs-agenda-slotlabelformat:fa802ff0768f75770328542af23e0887&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/agenda/slotLabelFormat&#34;&gt;slotLabelFormat&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;枠の部分の表示フォーマット。&lt;/p&gt;

&lt;h5 id=&#34;slotlabelinterval-http-fullcalendar-io-docs-agenda-slotlabelinterval:fa802ff0768f75770328542af23e0887&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/agenda/slotLabelInterval&#34;&gt;slotLabelInterval&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;枠部分にテキストを表示する間隔を決めます。&lt;/p&gt;

&lt;h5 id=&#34;snapduration-http-fullcalendar-io-docs-agenda-snapduration:fa802ff0768f75770328542af23e0887&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/agenda/snapDuration&#34;&gt;snapDuration&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;イベントをドラックでずらす間隔を決めます。&lt;/p&gt;

&lt;h5 id=&#34;scrolltime-http-fullcalendar-io-docs-agenda-scrolltime:fa802ff0768f75770328542af23e0887&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/agenda/scrollTime&#34;&gt;scrollTime&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;スクロール枠を決めます。&lt;/p&gt;

&lt;h5 id=&#34;mintime-http-fullcalendar-io-docs-agenda-mintime:fa802ff0768f75770328542af23e0887&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/agenda/minTime&#34;&gt;minTime&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;表示する時間の最低枠を決めます。&lt;/p&gt;

&lt;h5 id=&#34;maxtime-http-fullcalendar-io-docs-agenda-maxtime:fa802ff0768f75770328542af23e0887&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/agenda/maxTime&#34;&gt;maxTime&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;表示する時間の最大枠を決めます。&lt;/p&gt;

&lt;h5 id=&#34;loteventoverlap-http-fullcalendar-io-docs-agenda-loteventoverlap:fa802ff0768f75770328542af23e0887&#34;&gt;◯ &lt;a href=&#34;http://fullcalendar.io/docs/agenda/lotEventOverlap&#34;&gt;lotEventOverlap&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;イベントの時間が重複した際の表示方法&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【読書】強いチームはオフィスを捨てる</title>
      <link>http://kotazi.github.io/blog/post/2016/0119_37signals/</link>
      <pubDate>Tue, 19 Jan 2016 22:53:46 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0119_37signals/</guid>
      <description>

&lt;p&gt;&lt;a rel=&#34;nofollow&#34; href=&#34;http://www.amazon.co.jp/gp/product/4152094338/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4152094338&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;強いチームはオフィスを捨てる: 37シグナルズが考える「働き方革命」&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=kotazi-22&amp;l=as2&amp;o=9&amp;a=4152094338&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;を読みました。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;本書は37signalsのCEO、ジェイソン・フリードに書かれた本である。
37signalsは1999年にシカゴに設立されたウェブアプリケーションの会社である。
プロジェクト管理ツール「Basecamp」や、Ruby用のフレームワークである「Runy on Rails」を開発した会社として有名。&lt;/p&gt;

&lt;p&gt;この本は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;はじめに&lt;/li&gt;
&lt;li&gt;イントロダクション: オフィスのない世界&lt;/li&gt;
&lt;li&gt;リモートワークの時代がやってきた&lt;/li&gt;
&lt;li&gt;リモートワークの誤解を解く&lt;/li&gt;
&lt;li&gt;リモートのコラボレーション術&lt;/li&gt;
&lt;li&gt;リモートワークの落とし穴&lt;/li&gt;
&lt;li&gt;リモート時代の人材採用&lt;/li&gt;
&lt;li&gt;リモート時代のマネジメント&lt;/li&gt;
&lt;li&gt;リモートワーカーの仕事スタイル&lt;/li&gt;
&lt;li&gt;おわりに&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;といった各章から成る。
小題は2ページ程度で挿絵も入っていて読みやすい。&lt;/p&gt;

&lt;p&gt;本書はリモートワークに対する考え方をアップデートするために書かれた本だ。&lt;/p&gt;

&lt;p&gt;技術は既に揃った。
世界中の人といつでも簡単にコミュニケーションが取れ、
一緒に作業を進められるツールがいくらでもある。&lt;/p&gt;

&lt;p&gt;オフィスに集まって働くという固定概念をくつがえし、新しい働き方を提唱する本だ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;往復2時間の通勤時間が無駄。それだけで疲弊する。&lt;/li&gt;
&lt;li&gt;本気で日中のオフィスが働きやすいと思っているのか？&lt;/li&gt;
&lt;li&gt;もっとも自分の集中力の高まる時間に働くべき。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;ざっくりまとめると従来のオフィスでの働き方を上記の理由から否定する。　
リモートワークであればこれらに縛られることなく好きな時に好きな場所で働くことができる。&lt;/p&gt;

&lt;p&gt;実際にリモートワークを取り入れている会社もたくさんある。&lt;/p&gt;

&lt;h5 id=&#34;従業員数1万人以上:5370d8405ec555469de54826754668f4&#34;&gt;◯ 従業員数1万人以上&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;AT&amp;amp;T(通信)&lt;/li&gt;
&lt;li&gt;ユナイテッドヘルス・グループ(医療)&lt;/li&gt;
&lt;li&gt;マッキンゼー・アンド・カンパニー(コンサルティング)&lt;/li&gt;
&lt;li&gt;インテル(IT)&lt;/li&gt;
&lt;li&gt;SCジョンソン(メーカー)&lt;/li&gt;
&lt;li&gt;エトナ(保険)&lt;/li&gt;
&lt;li&gt;シスコ(IT)&lt;/li&gt;
&lt;li&gt;デロイト(会計)&lt;/li&gt;
&lt;li&gt;HSBC UK(金融)&lt;/li&gt;
&lt;li&gt;ブリティッシュ・テレコム(通信)&lt;/li&gt;
&lt;li&gt;ユニリーバ(消費財)&lt;/li&gt;
&lt;li&gt;エクスプレス・スクリプツ(薬剤給付管理)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;従業員数1000-1万人:5370d8405ec555469de54826754668f4&#34;&gt;◯ 従業員数1000〜1万人&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;メルセデス・ベンツUSA(自動車)&lt;/li&gt;
&lt;li&gt;ティーチ・フォー・アメリカ(教育)&lt;/li&gt;
&lt;li&gt;プランテ・モラン(会計・コンサルティング)&lt;/li&gt;
&lt;li&gt;ドリームワークス・アニメーションSKG(アニメ制作)&lt;/li&gt;
&lt;li&gt;パーキンス・クーイ(法律)&lt;/li&gt;
&lt;li&gt;アメリカン・フィデリティ・アシュアランス(保険)&lt;/li&gt;
&lt;li&gt;米国教育省(行政)&lt;/li&gt;
&lt;li&gt;ヴァージン・アトランティック(航空)&lt;/li&gt;
&lt;li&gt;ブロケード・コミュニケーションズ・システムズ(IT)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;従業員数1000人以下:5370d8405ec555469de54826754668f4&#34;&gt;◯ 従業員数1000人以下&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;GitHub(ソフトウェア)&lt;/li&gt;
&lt;li&gt;ライアン(税務)&lt;/li&gt;
&lt;li&gt;オートマティック(ウェブ開発)&lt;/li&gt;
&lt;li&gt;MWW(広報・PR)&lt;/li&gt;
&lt;li&gt;コニー(モバイルアプリケーション)&lt;/li&gt;
&lt;li&gt;テキストマスター(翻訳・コピーライティング)&lt;/li&gt;
&lt;li&gt;BeBanjo(オンデマンド配信)&lt;/li&gt;
&lt;li&gt;ブライトボックス(クラウドホスティング)&lt;/li&gt;
&lt;li&gt;HE:labs(ウェブ開発)&lt;/li&gt;
&lt;li&gt;フォトリア(画像素材)&lt;/li&gt;
&lt;li&gt;フリーエージェント(経理ソフト)&lt;/li&gt;
&lt;li&gt;プルーフ・ブランディング(ブランディングデザイン)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;実際弊社でもリモートワークは取り入れているし、個人的にもその魅力を強く感じている。
特に体制を整えれば世界のどこからでも優秀な人間を採用し、一緒に働ける点は大きい。&lt;/p&gt;

&lt;p&gt;けれども実際、別の課題が出てくる。
その点についてまとめたのが「リモートのコラボレーション術」である。&lt;/p&gt;

&lt;h5 id=&#34;コアタイムを決める:5370d8405ec555469de54826754668f4&#34;&gt;◯ コアタイムを決める&lt;/h5&gt;

&lt;p&gt;共通のコアタイムを決める。毎日4時間は一緒に働けるといい。
コミュニケーションもうまくいくし、チームの一体感が出てくる。&lt;/p&gt;

&lt;p&gt;また個人的には、見えない相手が確実に捕まる時間をこちらで把握できていることが非常に大きいと感じる。&lt;/p&gt;

&lt;h5 id=&#34;同じ画面を見る:5370d8405ec555469de54826754668f4&#34;&gt;◯ 同じ画面を見る&lt;/h5&gt;

&lt;p&gt;互いの顔を見るのではなく、画面共有を使うということ。
フォーカスを仕事に当てる。&lt;/p&gt;

&lt;h5 id=&#34;情報を閉じ込めてはいけない:5370d8405ec555469de54826754668f4&#34;&gt;◯ 情報を閉じ込めてはいけない&lt;/h5&gt;

&lt;p&gt;同じオフィスで働くと些細な確認や質問が飛び交う。
これは相手の集中力を途切れさせる良くない習慣であるが、
このあたりの仕組みを整えないままリモートワークをすると困ってしまうことが多い。&lt;/p&gt;

&lt;p&gt;必要な資料や情報がいつでもみんなの手の届くところに来るようにしておくことが大切&lt;/p&gt;

&lt;h5 id=&#34;バーチャルな雑談場を作る:5370d8405ec555469de54826754668f4&#34;&gt;◯ バーチャルな雑談場を作る&lt;/h5&gt;

&lt;p&gt;チームが雑談できる場所を作る。
オフィスにいない分、小さなコミュニケーションが生まれなかったり、
しばらく一緒に働いていても相手のことをよく知れなかったりすることがある。&lt;/p&gt;

&lt;p&gt;リモートワークで働く場合はこういった文化は積極的に取り組むべき。&lt;/p&gt;

&lt;h5 id=&#34;進み具体を共有する:5370d8405ec555469de54826754668f4&#34;&gt;◯ 進み具体を共有する&lt;/h5&gt;

&lt;p&gt;同じオフィスで働いていると社内の情報ななんとなく耳にするものだが、
リモートワークでは周りのことがよく分からなくなってしまうことがある。&lt;/p&gt;

&lt;p&gt;定期的に自分のやっていることを報告したり、
たまには相手の仕事に興味を持ってみるのもいいかもしれない。&lt;br /&gt;
弊社でも「週報」を導入するか現在検討中。&lt;/p&gt;

&lt;h5 id=&#34;印象よりも中身を見る:5370d8405ec555469de54826754668f4&#34;&gt;◯ 印象よりも中身を見る&lt;/h5&gt;

&lt;p&gt;これはオフィスワークと一長一短。&lt;/p&gt;

&lt;p&gt;オフィスワークでは、毎日5分遅れる人、フェイスブックをいつも開いている人。
その人の仕事ぶりにかかわらず、その印象が残ってしまう。
リモートワークではそういった部分が垣間見えないものの、純粋に仕事で相手を測ることができる。&lt;/p&gt;

&lt;h5 id=&#34;まずは近くで試してみる:5370d8405ec555469de54826754668f4&#34;&gt;◯ まずは近くで試してみる&lt;/h5&gt;

&lt;p&gt;これからリモートワークを導入する人は、
いきなり遠くの人を採用しなくとも、今のメンバーで始めてみればいい。&lt;/p&gt;

&lt;h5 id=&#34;ひとつの場所に依存しない:5370d8405ec555469de54826754668f4&#34;&gt;◯ ひとつの場所に依存しない&lt;/h5&gt;

&lt;p&gt;チームがリモートワークに対応できるような柔軟なチームであれば、
例えば雪で電車が大きく遅れるようなことがあっても、みんないつも通りの仕事をこなすことができる。&lt;/p&gt;

&lt;h5 id=&#34;ミーティングを減らそう:5370d8405ec555469de54826754668f4&#34;&gt;◯ ミーティングを減らそう&lt;/h5&gt;

&lt;p&gt;リモートワークに対して懐疑的な人間はだいたい次の2点を言う。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;みんな同じ場所にいないとその場でミーティングができない&lt;/li&gt;
&lt;li&gt;その場で見張っていないと、部下が仕事しているかどうかわからない&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;5人で1時間のミーティングは5時間使っている。
ミーティングはもっと高い質でやったほうがいい。&lt;/p&gt;

&lt;p&gt;といった感じだ。&lt;/p&gt;

&lt;p&gt;他の章も面白いので是非読んで欲しい。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;読んでくれてありがとうございました。&lt;br /&gt;
せっかくなので、最近僕が面白いなあと思っているサービス「コデアル」のリンクを貼っておきます。&lt;br /&gt;
こういうサービスから新しい働き方が広がったら素晴らしいことだと思います。&lt;/p&gt;

&lt;iframe src=&#34;//dspb1oyxjua32.cloudfront.net/p?t=YOj5SQJVvS9yi0j79FoK5YHyUUu5UYSOi7t1HB0qSAU%3D&#34; frameborder=&#34;0&#34; height=&#34;230&#34; width=&#34;170&#34;&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>gemをインストールしたけれど見つからない時に疑うこと</title>
      <link>http://kotazi.github.io/blog/post/2016/0119_gitup/</link>
      <pubDate>Tue, 19 Jan 2016 13:55:26 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0119_gitup/</guid>
      <description>&lt;nav&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#git-up-をインストール:965cc11ac52a827b331d0d676625d376&#34;&gt;◯ &lt;code&gt;git-up&lt;/code&gt;をインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#探す:965cc11ac52a827b331d0d676625d376&#34;&gt;◯ 探す&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#パスを通す:965cc11ac52a827b331d0d676625d376&#34;&gt;◯ パスを通す&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;

&lt;p&gt;&lt;code&gt;git-up&lt;/code&gt;をインストールしたけれど使えなかったのでその時の対処法をメモ。&lt;/p&gt;

&lt;hr&gt;

&lt;h6 id=&#34;git-up-をインストール:965cc11ac52a827b331d0d676625d376&#34;&gt;◯ &lt;code&gt;git-up&lt;/code&gt;をインストール&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;$ gem install git-up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この状態で&lt;code&gt;git up&lt;/code&gt;を試したけれど見つからなかった&lt;/p&gt;

&lt;h6 id=&#34;探す:965cc11ac52a827b331d0d676625d376&#34;&gt;◯ 探す&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;$ bundle list | grep git-up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは見つかる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ which git-up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これが見つからない。rbenvあたりでパスが通っていないっぽい。&lt;/p&gt;

&lt;h5 id=&#34;パスを通す:965cc11ac52a827b331d0d676625d376&#34;&gt;◯ パスを通す&lt;/h5&gt;

&lt;p&gt;rbev内にgit-upが入っているかを確認する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ find .rbenv -name git-up
.rbenv/versions/2.2.2/bin/git-up
.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/gems/git-up-0.5.12/bin/git-up
.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/gems/git-up-0.5.12/lib/git-up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あった。&lt;/p&gt;

&lt;p&gt;シンボリックリンクを作成する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ln -s ~/.rbenv/versions/2.2.2/bin/git-up /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最後にgit-upがあることを確認する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ which git-up
/usr/local/bin/git-up
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>【読書】小さなチーム、大きな仕事</title>
      <link>http://kotazi.github.io/blog/post/2016/0118_37signals/</link>
      <pubDate>Mon, 18 Jan 2016 12:53:46 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0118_37signals/</guid>
      <description>&lt;p&gt;&lt;a rel=&#34;nofollow&#34; href=&#34;http://www.amazon.co.jp/gp/product/415209267X/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=415209267X&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;小さなチーム、大きな仕事〔完全版〕: 37シグナルズ成功の法則&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=kotazi-22&amp;l=as2&amp;o=9&amp;a=415209267X&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;を読みました。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;本書は37signalsのCEO、ジェイソン・フリードに書かれた本である。
37signalsは1999年にシカゴに設立されたウェブアプリケーションの会社である。
プロジェクト管理ツール「Basecamp」や、Ruby用のフレームワークである「Runy on Rails」を開発した会社として有名。&lt;/p&gt;

&lt;p&gt;この本は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;はじめに&lt;/li&gt;
&lt;li&gt;まず最初に&lt;/li&gt;
&lt;li&gt;見直す&lt;/li&gt;
&lt;li&gt;先に進む&lt;/li&gt;
&lt;li&gt;進展&lt;/li&gt;
&lt;li&gt;生産性&lt;/li&gt;
&lt;li&gt;競合相手&lt;/li&gt;
&lt;li&gt;進化&lt;/li&gt;
&lt;li&gt;プロモーション&lt;/li&gt;
&lt;li&gt;人を雇う&lt;/li&gt;
&lt;li&gt;ダメージ・コントロール&lt;/li&gt;
&lt;li&gt;文化&lt;/li&gt;
&lt;li&gt;最後に&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といった各章から成る。
小題は2ページ程度で挿絵も入っていて読みやすい。&lt;/p&gt;

&lt;p&gt;「ビジネスを立ちあげて、経営して、拡大する(あるいは拡大しない)ことについて、言いたいことがある。」
という一文から本書は始まる。&lt;/p&gt;

&lt;p&gt;本書の著者、ジェイソン・フリードが経営する37signalsは少数精鋭型のチームと自分たちのやり方で大きな成果を残してきた。
大方この本は、そんなジェイソン・フリードが一般的なビジネス手法をやんわりと否定するビジネスエッセイである。&lt;/p&gt;

&lt;p&gt;この本でも最後に書かれているのは「ひらめき」についてだった。&lt;/p&gt;

&lt;p&gt;「ひらめきには賞味期限がある」&lt;/p&gt;

&lt;p&gt;ひらめきは永遠に持続できるものではない。何かしたいことがあれば、今しなければならない。
しばらく放っておいて二ヶ月後に取りかかるというわけにはいかない。
「後でやる」とはいえない。「後で」ではそんなにやる気満々でもないだろう。&lt;/p&gt;

&lt;p&gt;待ってはくれない。ひらめきとは「今」のものだ。
もし、虜にされたなら、逆に仕事に専念することだ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【読書】Being Geek</title>
      <link>http://kotazi.github.io/blog/post/2016/0117_geek/</link>
      <pubDate>Sun, 17 Jan 2016 12:53:46 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0117_geek/</guid>
      <description>&lt;p&gt;&lt;a rel=&#34;nofollow&#34; href=&#34;http://www.amazon.co.jp/gp/product/4873114993/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4873114993&amp;linkCode=as2&amp;tag=kotazi-22&#34;&gt;Being Geek ―ギークであり続けるためのキャリア戦略&lt;/a&gt;&lt;img src=&#34;http://ir-jp.amazon-adsystem.com/e/ir?t=kotazi-22&amp;l=as2&amp;o=9&amp;a=4873114993&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;
を読みました。&lt;/p&gt;

&lt;hr&gt;

&lt;ul&gt;
&lt;li&gt;第一部 キャリアの形成&lt;/li&gt;
&lt;li&gt;第二部 マネージメント&lt;/li&gt;
&lt;li&gt;第三部 日々の仕事に必要なスキル&lt;/li&gt;
&lt;li&gt;第四部 変化&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;
上記4部が全40章で構成されている。&lt;/p&gt;

&lt;p&gt;Geekとはについてよく書かれた本である。&lt;br /&gt;
「Geekは普通の人とは違っている。」&lt;/p&gt;

&lt;p&gt;そんなGeekのための本であり、&lt;br /&gt;
Geekがいかにして生きていくべきかを掘り下げていく。&lt;/p&gt;

&lt;p&gt;基本的には日本でいう「オタク」のような技術者を想定された本であり、
「電話に出るべきか？」とか「Geekにとって人間は困りごと」だとかそういう視点でキャリアや人生が語られる。&lt;/p&gt;

&lt;p&gt;本書ではGeekとは次のような信条を持つ人のことであると記される。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;物事を理解するにはまず定義を知るべき&lt;/li&gt;
&lt;li&gt;システムは必ず認識可能な要素に分けられる&lt;/li&gt;
&lt;li&gt;何をすべきかを判断するには、まずルールを見つける&lt;/li&gt;
&lt;li&gt;ルールを知れば成功のための行動がとれる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;
Geekと呼ばれる人たちにとって何よりも重要なものは「構造」である。&lt;br /&gt;
すべてのGeekに共通しているのは「この世界について十分に学べば、全ては予測可能になる。」と信じているという点だ。&lt;/p&gt;

&lt;p&gt;Geekのキャリア形成や転職といってことについて書かれた本書であるが、本の終わりではアイディアについて語られている。&lt;/p&gt;

&lt;p&gt;良いアイディアが思い浮かんでしまったらどうしようという話である。&lt;br /&gt;
もしも、まったく誰も思いついていない斬新なアイディアが浮かんでしまったらどうしよう。&lt;/p&gt;

&lt;p&gt;真剣に考えなくてはならない。
住宅ローンを抱え、幼い子供がいるあなたが素晴らしいアイディアを思いついたとする。
しかも、今のところ、誰も実現していない。ならば、思い切って実現に乗り出すべきではないだろうか。&lt;/p&gt;

&lt;p&gt;ともかくやってみよう。小さいところから始めてみるのだ。
自分で考え、自分の判断で先へ進むのだ。
成功するかは分からないが、いろいろと面倒なことに巻き込まれるのは確実だろう。
新しいことをしようとすれば、おそらく既存のルールをいくつも破ることになるからだ。
だが、きっとそれは気分の悪いことではないはずだ。直感を信じて前進しよう。&lt;/p&gt;

&lt;p&gt;という話。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Angular2のチュートリアル</title>
      <link>http://kotazi.github.io/blog/post/2016/0115_angular2_2/</link>
      <pubDate>Fri, 15 Jan 2016 20:07:16 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0115_angular2_2/</guid>
      <description>

&lt;p&gt;Angualr2のチュートリアルやったのでメモ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kotazi/angular2-quick-start&#34;&gt;kotazi/angular2-quick-start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://angular.io/docs/ts/latest/tutorial/&#34;&gt;TUTORIAL: TOUR OF HEROES&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&#34;構成:24456ac087966b3ecdbdd8d437837263&#34;&gt;構成&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;angular2-tour-of-heroes
|- node_modules
|-app
| |- app.component.ts
| |- boot.ts
| |- hero.ts
| |- hero-detail.component.ts
| |- hero.service.ts
| |- mock-heroes.ts
|- index.html
|- package.json
|- tsconfig.json
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;index-html:24456ac087966b3ecdbdd8d437837263&#34;&gt;index.html&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Angular2では&lt;code&gt;angular2-polyfills.js&lt;/code&gt;と&lt;code&gt;Rx.js&lt;/code&gt;が必要&lt;/li&gt;
&lt;li&gt;&lt;code&gt;System&lt;/code&gt;でconfigとbootの読み込み&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;my-app&amp;gt;&lt;/code&gt;タグを埋め込む&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&#34;https://gist.github.com/kotazi/00d1d0fbe1a4fb92be11.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;boot-ts:24456ac087966b3ecdbdd8d437837263&#34;&gt;boot.ts&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bootstrap()&lt;/code&gt;でアプリケーション起動&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&#34;https://gist.github.com/kotazi/bf9b1e29e590582dc895.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;app-component-ts:24456ac087966b3ecdbdd8d437837263&#34;&gt;app.component.ts&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;@Component&lt;/code&gt;はAngularにこのクラスはAngularのコンポーネントだと伝える役割を担う。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;selector&lt;/code&gt;でHTMLのタグ名を指定する。&lt;code&gt;template&lt;/code&gt;にはレンタリングするHTMLを記述する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;*ngFor=&amp;ldquo;#hero of heroes&amp;rdquo; ng-repeatが変わった&lt;/li&gt;
&lt;li&gt;アスタリスクとシャープが特徴&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&#34;https://gist.github.com/kotazi/e407ee5a6dfe7599c8df.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;hero-ts:24456ac087966b3ecdbdd8d437837263&#34;&gt;hero.ts&lt;/h2&gt;

&lt;p&gt;classではなくinterfaceを利用している。&lt;br /&gt;
ここでの選び方は&lt;code&gt;Hero&lt;/code&gt;をどのように使いたいか。&lt;br /&gt;
ロジックや振る舞いを書く場合は、&lt;code&gt;class&lt;/code&gt;。
型の定義などだけであれば、&lt;code&gt;interface&lt;/code&gt;で十分。&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/kotazi/958abfee0ee7cce36257.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;mock-heroes-ts:24456ac087966b3ecdbdd8d437837263&#34;&gt;mock-heroes.ts&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;HREOES配列はHero型。&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&#34;https://gist.github.com/kotazi/d3b073e5f33ff8ef1605.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;hero-detail-component-ts:24456ac087966b3ecdbdd8d437837263&#34;&gt;hero-detail.component.ts&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;[(ngModel)]=&amp;ldquo;hero.name&amp;rdquo; 書き方変わった&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&#34;https://gist.github.com/kotazi/9bd78998321fde979038.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;hero-service-ts:24456ac087966b3ecdbdd8d437837263&#34;&gt;hero.service.ts&lt;/h2&gt;

&lt;script src=&#34;https://gist.github.com/kotazi/f27b3bc4c989d37fde72.js&#34;&gt;&lt;/script&gt;

&lt;hr&gt;

&lt;p&gt;けっこう変わってるけど抵抗はそんなにないかも。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Angular2メモ</title>
      <link>http://kotazi.github.io/blog/post/2016/0115_angular2/</link>
      <pubDate>Fri, 15 Jan 2016 11:56:56 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0115_angular2/</guid>
      <description>

&lt;h2 id=&#34;speed-performance:57e1e0be89ee88efc9fe9048ca95358d&#34;&gt;SPEED &amp;amp; PERFORMANCE&lt;/h2&gt;

&lt;p&gt;Angular2ではAngular1から劇的に速くなります。
- サーバーサイドプリレンダリングによる初期ロードの高速化
- オフラインコンパイルの立ちあげの速さ、
- 検出やビューキャッシュの大幅改善によるスムーズなスクロールやトランジション。&lt;/p&gt;

&lt;h2 id=&#34;simple-expressive:57e1e0be89ee88efc9fe9048ca95358d&#34;&gt;SIMPLE &amp;amp; EXPRESSIVE&lt;/h2&gt;

&lt;p&gt;意図を明確に自然に書きやすくなります。
柔軟なテンプレートは読みやすく理解しやすいので、
チームの複雑さがなくなります。&lt;/p&gt;

&lt;h2 id=&#34;cross-platform:57e1e0be89ee88efc9fe9048ca95358d&#34;&gt;CROSS PLATFORM&lt;/h2&gt;

&lt;p&gt;Angular2はデスクトップアプリやモバイルウェブ、AndroidとiOSにも対応。
Angular Universalはモバイル高速化のためにサーバーサイドレンダリングを提供します。&lt;/p&gt;

&lt;p&gt;Web workerによってレスポンシブなアプリUIがサポートされます。&lt;/p&gt;

&lt;h2 id=&#34;seamless-upgrade-from-angular-1:57e1e0be89ee88efc9fe9048ca95358d&#34;&gt;SEAMLESS UPGRADE FROM ANGULAR 1&lt;/h2&gt;

&lt;p&gt;自身のペースでAngular1からのアップデードができます。&lt;/p&gt;

&lt;h2 id=&#34;flexible-development:57e1e0be89ee88efc9fe9048ca95358d&#34;&gt;FLEXIBLE DEVELOPMENT&lt;/h2&gt;

&lt;p&gt;言語を自由に選べます。
ES5、TypeScript、Dart、ES2015やJSにコンパイルできる言語なら動作します。&lt;/p&gt;

&lt;h2 id=&#34;comprehensive-routing:57e1e0be89ee88efc9fe9048ca95358d&#34;&gt;COMPREHENSIVE ROUTING&lt;/h2&gt;

&lt;p&gt;ビューの設計が洗練されています。&lt;/p&gt;

&lt;h2 id=&#34;dependency-injection:57e1e0be89ee88efc9fe9048ca95358d&#34;&gt;DEPENDENCY INJECTION&lt;/h2&gt;

&lt;p&gt;依存性注入がシンプルに。
退屈なコードが不要に。
テストも書きやすくなる。&lt;/p&gt;

&lt;h2 id=&#34;legacy-browser-support:57e1e0be89ee88efc9fe9048ca95358d&#34;&gt;LEGACY BROWSER SUPPORT&lt;/h2&gt;

&lt;p&gt;Chrome, Edge, Firefox, IE, and Safariの最新バージョンをサポート。
IE9+ and Android 4.1+も。&lt;/p&gt;

&lt;h2 id=&#34;animations:57e1e0be89ee88efc9fe9048ca95358d&#34;&gt;ANIMATIONS&lt;/h2&gt;

&lt;p&gt;低レイヤーでのアニメーションをサポート。&lt;/p&gt;

&lt;h2 id=&#34;internationalization-i18n-accessibility:57e1e0be89ee88efc9fe9048ca95358d&#34;&gt;INTERNATIONALIZATION (I18N) &amp;amp; ACCESSIBILITY&lt;/h2&gt;

&lt;p&gt;全ての人に届くようにできてる。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【DMM英会話】 Job Interview | Business Basic</title>
      <link>http://kotazi.github.io/blog/post/2016/0115_dmm/</link>
      <pubDate>Fri, 15 Jan 2016 00:46:15 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0115_dmm/</guid>
      <description>

&lt;p&gt;DMM英会話のレッスン中。その日学んだことをメモ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://eikaiwa.dmm.com/download/pdf/Business_basic_06_01.pdf/&#34;&gt;Lesson 05: Job Interview | Business Basic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h5 id=&#34;practice-1-formal-and-informal-expressions:ca0c426fea0849d8af802cb6719a1e4b&#34;&gt;◯ Practice 1 | Formal and Informal Expressions&lt;/h5&gt;

&lt;p&gt;割愛。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;practice-2-reading-sentences:ca0c426fea0849d8af802cb6719a1e4b&#34;&gt;◯ Practice 2 | Reading Sentences&lt;/h5&gt;

&lt;p&gt;割愛。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;practice-3-studying-the-manual:ca0c426fea0849d8af802cb6719a1e4b&#34;&gt;◯ Practice 3 | Studying the Manual&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Research the company you are applying for. Find out about its history, main goals and the founders of the company.&lt;/li&gt;
&lt;li&gt;Don’t be nervous and act confident. Know your best qualities and don’t be afraid to mention a few weaknesses.&lt;/li&gt;
&lt;li&gt;Decide why you are applying for this specific company. You need to be motivated. No company wants an employee who can work anywhere.&lt;/li&gt;
&lt;li&gt;Think: why should they hire you? What can you give to the company? Why are you special?&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Be polite, formal, keep eye contact and believe in yourself!
&lt;strong&gt;意訳&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;志願する会社について調査すること。歴史や創立者、目標について調べる。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ナーバスにならずに自身を持つこと。自分の最高の状態を知り、弱みを言及されることを恐れないこと&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;なぜこの会社を特別に志望するかを決めること。意欲が必要。どこでもいいと思っている人を欲しがる会社はない。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;何故会社があなたを雇うべきか考える。会社に何を与えられる。何故あなたは特別なの？&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;丁寧に。フォーマルに。アイコンタクトを忘れずに自分を信じること！&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;practice-4-situation-questions:ca0c426fea0849d8af802cb6719a1e4b&#34;&gt;◯ Practice 4 | Situation Questions&lt;/h5&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;You did not have time to research the company and went to a business interview. What do you do if they ask about the company? How can you avoid this?&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;省略。&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;You were in a hurry and you forgot to wear a tie for the interview. What do you do?&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;省略。&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Your friend is getting ready for a job interview. What advice can you give him?&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;省略。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;覚えた英単語:ca0c426fea0849d8af802cb6719a1e4b&#34;&gt;◯ 覚えた英単語&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;単語&lt;/th&gt;
&lt;th&gt;意味&lt;/th&gt;
&lt;th&gt;その他&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;strengths&lt;/td&gt;
&lt;td&gt;強み&lt;/td&gt;
&lt;td&gt;a quality or an ability that a person or thing has that gives them an advantage&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;apply&lt;/td&gt;
&lt;td&gt;申し込む&lt;/td&gt;
&lt;td&gt;to make a formal request, usually in writing, for something such as a job, a place at college, university, etc.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Find out&lt;/td&gt;
&lt;td&gt;調べる&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;founders&lt;/td&gt;
&lt;td&gt;創立者&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;confident&lt;/td&gt;
&lt;td&gt;自身に溢れた&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;weaknesses&lt;/td&gt;
&lt;td&gt;弱み&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Decide&lt;/td&gt;
&lt;td&gt;決意する、決定する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;motivated&lt;/td&gt;
&lt;td&gt;意欲のある&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;quit&lt;/td&gt;
&lt;td&gt;やめる&lt;/td&gt;
&lt;td&gt;to stop doing something,  to leave your job, school, etc&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;asset&lt;/td&gt;
&lt;td&gt;価値のあるもの、人、・資産&lt;/td&gt;
&lt;td&gt;a person or thing that is valuable or useful to somebody/something&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;The ability to keep calm is one of her many strengths.&lt;/li&gt;
&lt;li&gt;He has applied to join the army.&lt;/li&gt;
&lt;li&gt;She quit school at 16.&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;ve quit smoking.&lt;/li&gt;
&lt;li&gt;Being able to speak a foreign language is a major asset.&lt;/li&gt;
&lt;li&gt;She&amp;rsquo;ll be an asset to the team.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;けっこう喋れるようになってきた。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【DMM英会話】 Business Call | Business Basic</title>
      <link>http://kotazi.github.io/blog/post/2016/0113_dmm/</link>
      <pubDate>Wed, 13 Jan 2016 00:46:15 +0900</pubDate>
      
      <guid>http://kotazi.github.io/blog/post/2016/0113_dmm/</guid>
      <description>

&lt;p&gt;DMM英会話のレッスン中。その日学んだことをメモ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://eikaiwa.dmm.com/download/pdf/Business_basic_05_01.pdf/&#34;&gt;Lesson 05: Business Call | Business Basic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h5 id=&#34;practice-1-formal-and-informal-expressions:32e6095ac2826eefdb4ce507a949dfe9&#34;&gt;◯ Practice 1 | Formal and Informal Expressions&lt;/h5&gt;

&lt;p&gt;割愛。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;practice-2-reading-sentences:32e6095ac2826eefdb4ce507a949dfe9&#34;&gt;◯ Practice 2 | Reading Sentences&lt;/h5&gt;

&lt;p&gt;割愛。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;practice-3-studying-the-manual:32e6095ac2826eefdb4ce507a949dfe9&#34;&gt;◯ Practice 3 | Studying the Manual&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Don’t forget to introduce yourself and say why you are calling.&lt;/li&gt;
&lt;li&gt;Be polite, brief and informative.&lt;/li&gt;
&lt;li&gt;If you are deciding on some specific details such as a meeting date and place, make sure to repeat it twice so there would be no misunderstandings.&lt;/li&gt;
&lt;li&gt;If the recipient is busy, you can leave an informative message. Don’t forget to mention your contact details before ending the call if you are calling for the first time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;意訳&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;自己紹介と電話の理由を伝えることを忘れないこと&lt;/li&gt;
&lt;li&gt;丁寧に、簡潔に、有益であること。&lt;/li&gt;
&lt;li&gt;ミーティングの時間や場所の詳細といったことを話しているときは、誤解のないように2回繰り返すこと。&lt;/li&gt;
&lt;li&gt;受付が忙しかったらメッセージを残すこと。その際に、初めてならば自分の連絡先を伝えることを忘れないように。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;practice-4-situation-questions:32e6095ac2826eefdb4ce507a949dfe9&#34;&gt;◯ Practice 4 | Situation Questions&lt;/h5&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Imagine you are making a business call and your phone battery drains mid-way. What do you do?&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;I borrow a battery from my co-worker!&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;You are calling a company, but it seems you have misdialed the number. What do you do?&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;ll apologize and check the company name again.&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;You’ve just finished a business call, but you cannot remember the details of the upcoming meeting.What do you do? How can you avoid this?&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;I call him again.
And then, to avoid these case I&amp;rsquo;ll take care to take memo.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;覚えた英単語:32e6095ac2826eefdb4ce507a949dfe9&#34;&gt;◯ 覚えた英単語&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;単語&lt;/th&gt;
&lt;th&gt;意味&lt;/th&gt;
&lt;th&gt;その他&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;inquire about&lt;/td&gt;
&lt;td&gt;について尋ねる&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Receptionist&lt;/td&gt;
&lt;td&gt;受付係&lt;/td&gt;
&lt;td&gt;a person who receives something&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;diale&lt;/td&gt;
&lt;td&gt;ダイヤルする&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;further&lt;/td&gt;
&lt;td&gt;さらに、もっと&lt;/td&gt;
&lt;td&gt;to a greater degree or extent&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;informative&lt;/td&gt;
&lt;td&gt;有益な&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;brief&lt;/td&gt;
&lt;td&gt;短く&lt;/td&gt;
&lt;td&gt;using few words or short&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;postpone A&lt;/td&gt;
&lt;td&gt;Aを延期する&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;secretary&lt;/td&gt;
&lt;td&gt;秘書&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;mid-way&lt;/td&gt;
&lt;td&gt;中間&lt;/td&gt;
&lt;td&gt;that is at an equal distance between two points&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;borrow&lt;/td&gt;
&lt;td&gt;借りる&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;I borrow a battery from my co-worker!&lt;/li&gt;
&lt;li&gt;I did a quick double-check of the figures.&lt;/li&gt;
&lt;li&gt;Our 1 000th member will be the lucky recipient of a mystery gift.&lt;/li&gt;
&lt;li&gt;I haven&amp;rsquo;t received a letter from him yet.&lt;/li&gt;
&lt;li&gt;My life is further complicated by having to work such long hours.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;けっこう喋れるようになってきた。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>